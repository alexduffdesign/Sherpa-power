</rules>

<rule>
Rule 1 - When writing code, ALWAYS follow the Architecture and Separation of Concerns:

## Core Logic (baseChatbot/base-chatbot.js)

Responsible for handling the conversation flow, sending requests to the Voiceflow API via the Gadget middleware, and processing the SSE (Server-Sent Events) responses.
No direct DOM manipulation or UI rendering code. Only data handling, event emissions, and state management belong here.

## Core UI (baseChatbot/base-chatbot-ui.js)

Responsible for rendering messages, interactive elements (buttons, carousels), and updating the frontend as instructed by events from the core.

## Main Chatbot (mainChatbot/chatbot-main.js)

Extends BaseChatbot with specific logic for the Main Chatbot.
Responsible for managing the Main Chatbot's conversation history, UI updates, and user input handling.
No direct API calls.

## Main Chatbot UI (mainChatbot/chatbot-main-ui.js)

Responsible for rendering specific UI elements for the Main Chatbot.

## Section Chatbot (sectionChatbot/chatbot-section.js)

Extends BaseChatbot with specific logic for the Section Chatbot. (deviece_answer)

## Section Chatbot UI (sectionChatbot/chatbot-section-ui.js)

Responsible for rendering specific UI elements for the Section Chatbot. (deviece_answer)

## UI Components (message-component, button-component, carousel-component)

Self-contained UI elements.
No network requests or complex logic, just represent and display data passed to them.

# Utils (event-bus, event-constants, user-id-generator)

Shared logic or services used across Core and UI layers, such as event handling and ID generation.
No domain-specific business logic or UI rendering should occur here.
Voiceflow and Gadget Integration

# chatbot-template.liquid is the html file that both chatbots use.

# chatbot-drawer.liquid is where the main chatbots is rendered.

# application.liquid is where the section chatbot is rendered.

</rule>

<rule>
Rule 2 - Remember the tech stack used:Voiceflow and Gadget Integration:
Voiceflow API

All communication with Voiceflow occurs through the Gadget API endpoint.
Voiceflow Project ID and API Key are configured via environment variables.
No direct Voiceflow calls in UI files—only from ChatbotCore or Gadget routes.
Gadget Middleware

Acts as a proxy to Voiceflow’s SSE endpoint.
Handles authentication, streaming events, and error handling before passing data back to the frontend.
Documentation and Style

We are using eventemitter3 for event handling.
We are using vite for bundling.
</rule>

<rule>
Rule 3 - For each function or class, write a JSDoc Comments:

Every function and class should include a JSDoc header block describing parameters, return values, and purpose.
Maintain consistent JSDoc format throughout the codebase.
Code Consistency
</rule>

</rules>
