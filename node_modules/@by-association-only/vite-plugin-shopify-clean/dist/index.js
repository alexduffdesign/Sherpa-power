"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => shopifyClean
});
module.exports = __toCommonJS(src_exports);
var import_fs = require("fs");
var import_promises = require("fs/promises");
var import_path2 = __toESM(require("path"));

// src/options.ts
var import_path = __toESM(require("path"));
var resolveOptions = (options) => ({
  manifestFileName: typeof options.manifestFileName !== "undefined" ? options.manifestFileName : ".vite/manifest.json",
  themeRoot: typeof options.themeRoot !== "undefined" ? import_path.default.normalize(options.themeRoot) : "./"
});

// src/index.ts
var buildStartFirstRun = true;
var closeBundleFirstRun = true;
function shopifyClean(options = {}) {
  const resolvedOptions = resolveOptions(options);
  return {
    name: "vite-plugin-shopify-clean",
    buildStart: async () => {
      const rootPath = import_path2.default.resolve(resolvedOptions.themeRoot);
      const assetsDir = import_path2.default.resolve(rootPath, "./assets");
      if (!(0, import_fs.existsSync)(assetsDir)) {
        console.warn(`WARNING: No assets folder located at ${assetsDir}. No clean attempted.`);
        return;
      }
      const manifestFile = import_path2.default.join(assetsDir, resolvedOptions.manifestFileName);
      if (!(0, import_fs.existsSync)(manifestFile)) {
        console.warn(`WARNING: No ${resolvedOptions.manifestFileName} in ${assetsDir}. No clean attempted.`);
        return;
      }
      const manifest = JSON.parse((0, import_fs.readFileSync)(manifestFile, "utf-8"));
      const filesInManifest = getFilesInManifest(manifest);
      if (process.env.VITE_WATCH && !buildStartFirstRun) {
        return;
      }
      buildStartFirstRun = false;
      await Promise.all(filesInManifest.map(async (file) => {
        const location = import_path2.default.join(assetsDir, file);
        if ((0, import_fs.existsSync)(location)) {
          return (0, import_promises.unlink)(location);
        }
        return Promise.resolve();
      }));
    },
    writeBundle: async (_, bundle) => {
      if (!(resolvedOptions.manifestFileName in bundle))
        return;
      if (!process.env.VITE_WATCH)
        return;
      if (closeBundleFirstRun) {
        closeBundleFirstRun = false;
        return;
      }
      const rootPath = import_path2.default.resolve(resolvedOptions.themeRoot);
      const assetsDir = import_path2.default.resolve(rootPath, "./assets");
      if (!(0, import_fs.existsSync)(assetsDir)) {
        console.warn(`WARNING: No assets folder located at ${assetsDir}. No clean attempted.`);
        return;
      }
      const manifestAsset = bundle[resolvedOptions.manifestFileName];
      if (!("source" in manifestAsset))
        return;
      const manifest = JSON.parse(manifestAsset.source.toString());
      const filesInManifest = getFilesInManifest(manifest);
      const filesInAssets = await import_fs.promises.readdir(assetsDir);
      const filesToDelete = [...new Set(filesInManifest.map((file) => {
        const fileStartsWith = file.split("-").slice(0, file.split("-").length - 1).join("-");
        const fileExtension = file.split(".")[file.split(".").length - 1];
        const toLookFor = new RegExp(`${fileStartsWith}-(.*).${fileExtension}`, "i");
        return filesInAssets.filter((assetFile) => {
          const matches = assetFile.match(toLookFor);
          const fileIsInManifest = filesInManifest.includes(assetFile);
          return matches && !fileIsInManifest;
        });
      }).flat())];
      await Promise.all(filesToDelete.map(async (file) => {
        const location = import_path2.default.join(assetsDir, file);
        if ((0, import_fs.existsSync)(location)) {
          return (0, import_promises.unlink)(location);
        }
        return Promise.resolve();
      }));
    }
  };
}
function getFilesInManifest(manifest) {
  const filesListedInImports = new Set(
    Object.values(manifest).map((block) => {
      if ("imports" in block) {
        return block.imports;
      }
      return [];
    }).flat()
  );
  return Object.entries(manifest).map(([key, block]) => {
    const file = block.file;
    if (key.startsWith("_")) {
      if (filesListedInImports.has(key)) {
        return [file];
      }
      return [];
    }
    return [file];
  }).flat();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
