{"version":3,"file":"chatbot-main.js","sources":["../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// chatbot-main.js\n\nimport { ChatbotCore } from \"./chatbot-core-file.js\";\n\nconsole.log(\"MainChatbot module loading\");\n\nclass MainChatbot {\n  constructor(element, config) {\n    console.log(\"MainChatbot constructor called with config:\", config);\n    this.element = element;\n    this.voiceflowEndpoint = config.voiceflowEndpoint;\n\n    this.core = new ChatbotCore({\n      apiEndpoint: this.voiceflowEndpoint,\n      userIDPrefix: \"mainChatbot\",\n    });\n    console.log(\"ChatbotCore instance created:\", this.core);\n\n    this.conversationHistory = [];\n    this.hasLaunched = localStorage.getItem(\"chatHasLaunched\") === \"true\";\n\n    this.eventListenersAttached = false;\n\n    this.initializeElements();\n    this.setupEventListeners();\n\n    if (this.hasLaunched) {\n      this.loadConversationFromStorage();\n      this.displaySavedConversation();\n    } else {\n      this.initializeChat();\n    }\n  }\n\n  /**\n   * Initializes and sets the required DOM elements for the chatbot.\n   */\n  initializeElements() {\n    console.log(\"MainChatbot initializeElements called\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    const typingIndicator = this.element.querySelector(\".chat-typing\");\n    const drawer = this.element.closest(\"x-drawer\");\n    let drawerBody = null;\n\n    if (drawer && drawer.shadowRoot) {\n      drawerBody = drawer.shadowRoot.querySelector('[part=\"body\"]');\n    }\n\n    if (!messageContainer || !typingIndicator || !drawerBody) {\n      console.error(\"MainChatbot: Required DOM elements not found\");\n      return;\n    }\n\n    this.core.setDOMElements(messageContainer, typingIndicator, drawerBody);\n    console.log(\"MainChatbot: DOM elements set in ChatbotCore:\", this.core);\n  }\n\n  /**\n   * Sets up event listeners for form submission and button clicks.\n   */\n  setupEventListeners() {\n    if (this.eventListenersAttached) return;\n\n    console.log(\"MainChatbot setupEventListeners called\");\n    const form = this.element.querySelector(\"#chatForm\");\n    const input = this.element.querySelector(\"#userInput\");\n\n    if (!form || !input) {\n      console.error(\"MainChatbot: Chat form or input not found\");\n      return;\n    }\n\n    // Handle form submission (user sends a message)\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const message = input.value.trim();\n      if (message) {\n        console.log(\"MainChatbot: Form submitted with message:\", message);\n        input.value = \"\"; // Clear the input field immediately\n        await this.handleUserMessage(message);\n      }\n    });\n\n    // Handle button clicks within the chat (e.g., choices, carousel buttons)\n    this.element.addEventListener(\"click\", async (e) => {\n      if (\n        e.target.matches(\".button-container button\") ||\n        e.target.matches(\".carousel__item-button\")\n      ) {\n        const buttonData = JSON.parse(e.target.dataset.buttonData);\n        try {\n          const response = await this.core.handleButtonClick(buttonData);\n          // Save button click as a message\n          this.conversationHistory.push({\n            type: \"user\",\n            message: buttonData.name,\n          });\n          this.saveConversationToStorage();\n          await this.handleAgentResponse(response);\n        } catch (error) {\n          console.error(\"MainChatbot: Error handling button click:\", error);\n        }\n      }\n    });\n\n    // Handle \"Back to Start\" or \"Main Menu\" button clicks\n    const jumpToMainButton = this.element.querySelector(\".back-to-start\");\n    if (jumpToMainButton) {\n      jumpToMainButton.addEventListener(\"click\", () => this.jumpToMainMenu());\n    } else {\n      console.error(\"MainChatbot: Jump to start button not found\");\n    }\n\n    this.eventListenersAttached = true;\n  }\n\n  /**\n   * Initializes the chat by sending a launch request if it's the first time.\n   */\n  async initializeChat() {\n    console.log(\"MainChatbot: Initializing chat\");\n    if (!this.hasLaunched) {\n      try {\n        console.log(\"MainChatbot: Initializing chat for the first time\");\n        const response = await this.core.sendLaunch();\n        await this.handleAgentResponse(response);\n        this.hasLaunched = true;\n        localStorage.setItem(\"chatHasLaunched\", \"true\");\n      } catch (error) {\n        console.error(\"MainChatbot: Error during chat initialization:\", error);\n      }\n    }\n    this.core.scrollToBottom();\n    console.log(\"MainChatbot: Chat initialized\");\n  }\n\n  /**\n   * Handles sending a user message and processing the response.\n   * @param {string} message - The user's message.\n   */\n  async handleUserMessage(message) {\n    this.core.addMessage(\"user\", message);\n    this.conversationHistory.push({ type: \"user\", message: message });\n    this.saveConversationToStorage();\n\n    try {\n      const response = await this.core.sendMessage(message);\n      console.log(\"MainChatbot: Response from sendMessage:\", response);\n      await this.handleAgentResponse(response);\n    } catch (error) {\n      console.error(\"MainChatbot: Error in send message:\", error);\n    } finally {\n      this.core.scrollToBottom();\n    }\n  }\n\n  /**\n   * Loads the conversation history from local storage.\n   */\n  loadConversationFromStorage() {\n    const savedConversation = localStorage.getItem(\"chatConversation\");\n    this.conversationHistory = savedConversation\n      ? JSON.parse(savedConversation)\n      : [];\n    console.log(\n      \"MainChatbot: Loaded conversation from storage:\",\n      this.conversationHistory\n    );\n  }\n\n  /**\n   * Saves the current conversation history to local storage.\n   */\n  saveConversationToStorage() {\n    localStorage.setItem(\n      \"chatConversation\",\n      JSON.stringify(this.conversationHistory)\n    );\n    console.log(\"MainChatbot: Saved conversation to storage\");\n  }\n\n  /**\n   * Displays the saved conversation in the chat interface.\n   */\n  displaySavedConversation() {\n    console.log(\"MainChatbot: Displaying saved conversation\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      messageContainer.innerHTML = \"\"; // Clear existing messages\n      this.conversationHistory.forEach((turn, index) => {\n        if (turn.type === \"user\" || turn.type === \"assistant\") {\n          this.core.addMessage(turn.type, turn.message);\n        } else if (turn.type === \"choice\") {\n          // Check if next turn is 'user' type\n          const nextTurn = this.conversationHistory[index + 1];\n          if (!nextTurn || nextTurn.type !== \"user\") {\n            this.core.addButtons(turn.buttons);\n          }\n        } else if (turn.type === \"carousel\") {\n          // Check if next turn is 'user' type\n          const nextTurn = this.conversationHistory[index + 1];\n          if (!nextTurn || nextTurn.type !== \"user\") {\n            this.addCarousel(turn.data);\n          }\n        } else if (turn.type === \"visual\" && turn.data.visualType === \"image\") {\n          this.addVisualImage(turn.data);\n        }\n      });\n      this.core.scrollToBottom();\n    } else {\n      console.error(\"MainChatbot: Message container not found\");\n    }\n  }\n\n  /**\n   * Handles navigating back to the main menu.\n   */\n  async jumpToMainMenu() {\n    console.log(\"MainChatbot: jumpToMainMenu called\");\n    const mainMenuMessage = \"Main menu\"; // The message content to trigger the intent\n\n    // Add the \"Main menu\" message to the UI\n    this.core.addMessage(\"user\", mainMenuMessage);\n\n    // Update the conversation history\n    this.conversationHistory.push({\n      type: \"user\",\n      message: mainMenuMessage,\n    });\n    this.saveConversationToStorage();\n\n    try {\n      // Send the message to Voiceflow\n      const response = await this.core.gadgetInteract({\n        userID: this.core.userID,\n        userAction: {\n          type: \"text\",\n          payload: mainMenuMessage, // Directly set payload to the string \"Main menu\"\n        },\n      });\n\n      // Handle the response from Voiceflow\n      await this.handleAgentResponse(response);\n    } catch (error) {\n      console.error(\"MainChatbot: Error in jumpToMainMenu:\", error);\n      // Optionally, notify the user about the error\n      this.core.addMessage(\n        \"assistant\",\n        \"Sorry, I couldn't navigate to the main menu. Please try again.\"\n      );\n    }\n  }\n\n  /**\n   * Handles the response traces from Voiceflow and updates the chat interface accordingly.\n   * @param {Array} response - The array of response traces.\n   */\n  async handleAgentResponse(response) {\n    console.log(\"MainChatbot: Handling agent response:\", response);\n    for (const trace of response) {\n      if (trace.type === \"RedirectToProduct\") {\n        const productHandle = trace.payload?.body?.productHandle;\n        if (productHandle) {\n          this.handleProductRedirect(productHandle);\n          return;\n        }\n      } else if (trace.type === \"text\") {\n        this.core.addMessage(\"assistant\", trace.payload.message);\n        this.conversationHistory.push({\n          type: \"assistant\",\n          message: trace.payload.message,\n        });\n      } else if (trace.type === \"choice\") {\n        this.core.addButtons(trace.payload.buttons);\n        this.conversationHistory.push({\n          type: \"choice\",\n          buttons: trace.payload.buttons,\n        });\n      } else if (trace.type === \"carousel\") {\n        this.addCarousel(trace.payload);\n        this.conversationHistory.push({\n          type: \"carousel\",\n          data: trace.payload,\n        });\n      } else if (\n        trace.type === \"visual\" &&\n        trace.payload.visualType === \"image\"\n      ) {\n        this.addVisualImage(trace.payload);\n        this.conversationHistory.push({\n          type: \"visual\",\n          data: trace.payload,\n        });\n      } else {\n        console.log(\"MainChatbot: Unknown trace type:\", trace.type);\n      }\n    }\n    this.saveConversationToStorage();\n    this.core.scrollToBottom();\n  }\n\n  /**\n   * Handles redirection to a product page.\n   * @param {string} productHandle - The handle of the product to redirect to.\n   */\n  handleProductRedirect(productHandle) {\n    if (!productHandle) {\n      console.error(\n        \"MainChatbot: Cannot redirect - Product handle is undefined or empty\"\n      );\n      return;\n    }\n\n    const baseUrl = \"https://www.sherpapower.co.uk/products/\";\n    const productUrl = `${baseUrl}${encodeURIComponent(productHandle)}`;\n    console.log(`MainChatbot: Redirecting to product page: ${productUrl}`);\n    window.location.href = productUrl;\n  }\n\n  /**\n   * Adds a visual image to the chat interface.\n   * @param {Object} payload - The payload containing image data.\n   */\n  addVisualImage(payload) {\n    console.log(\"MainChatbot: Adding visual image:\", payload);\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      const imageWrapper = document.createElement(\"div\");\n      imageWrapper.classList.add(\n        \"message-wrapper\",\n        \"message-wrapper--assistant\"\n      );\n\n      const imageElement = document.createElement(\"img\");\n      imageElement.src = payload.image;\n      imageElement.alt = \"Visual content\";\n      imageElement.classList.add(\"chat-image\");\n\n      // Set dimensions if available\n      if (payload.dimensions) {\n        imageElement.width = payload.dimensions.width;\n        imageElement.height = payload.dimensions.height;\n      }\n\n      // Add loading and error handling\n      imageElement.loading = \"lazy\";\n      imageElement.onerror = () => {\n        console.error(\"MainChatbot: Failed to load image:\", payload.image);\n        imageElement.alt = \"Failed to load image\";\n      };\n\n      imageWrapper.appendChild(imageElement);\n      messageContainer.appendChild(imageWrapper);\n      this.core.scrollToBottom();\n    } else {\n      console.error(\n        \"MainChatbot: Message container not found when adding visual image\"\n      );\n    }\n  }\n\n  /**\n   * Adds a carousel to the chat interface.\n   * @param {Object} carouselData - The data for the carousel.\n   */\n  addCarousel(carouselData) {\n    console.log(\"MainChatbot: Adding carousel:\", carouselData);\n    const carouselElement = document.createElement(\"div\");\n    carouselElement.className = \"carousel\";\n    carouselElement.innerHTML = `\n      <div class=\"carousel__container\">\n        <!-- Carousel items will be dynamically added here -->\n      </div>\n      <button class=\"carousel__button carousel__button--left\" aria-label=\"Previous slide\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </button>\n      <button class=\"carousel__button carousel__button--right\" aria-label=\"Next slide\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M9 18L15 12L9 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </button>\n    `;\n\n    const carousel = new Carousel(carouselElement);\n\n    carouselData.cards.forEach((card, index) => {\n      const itemContent = `\n        <div class=\"carousel__item-wrapper\">\n          <div class=\"carousel__item-content\">\n            <img src=\"${card.imageUrl}\" alt=\"${\n        card.title\n      }\" class=\"carousel__item-image\">\n            <h6 class=\"carousel__item-title\">${card.title}</h6>\n            <p class=\"carousel__item-description\">${card.description.text}</p>\n            <button class=\"button carousel__item-button\" data-button-data='${JSON.stringify(\n              card.buttons[0]\n            )}'>${card.buttons[0].name}</button>\n          </div>\n        </div>\n      `;\n\n      carousel.addItem(itemContent);\n    });\n\n    const buttons = carouselElement.querySelectorAll(\".carousel__item-button\");\n    buttons.forEach((button, index) => {\n      button.addEventListener(\"click\", async () => {\n        const buttonData = JSON.parse(button.dataset.buttonData);\n        try {\n          // Remove the carousel element\n          carouselElement.remove();\n\n          // Save button click as a message\n          this.conversationHistory.push({\n            type: \"user\",\n            message: buttonData.name,\n          });\n          this.saveConversationToStorage();\n\n          const response = await this.core.handleButtonClick(buttonData);\n          await this.handleAgentResponse(response);\n        } catch (error) {\n          console.error(\n            \"MainChatbot: Error handling carousel button click:\",\n            error\n          );\n        }\n      });\n    });\n\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      messageContainer.appendChild(carouselElement);\n      this.core.scrollToBottom();\n    } else {\n      console.error(\n        \"MainChatbot: Message container not found when adding carousel\"\n      );\n    }\n  }\n}\n\n/**\n * Carousel class to handle carousel functionalities.\n * Note: Ensure that this class does not interfere with the typing indicator.\n */\nclass Carousel {\n  constructor(element) {\n    this.element = element;\n    this.container = element.querySelector(\".carousel__container\");\n    this.leftButton = element.querySelector(\".carousel__button--left\");\n    this.rightButton = element.querySelector(\".carousel__button--right\");\n    this.items = [];\n    this.currentIndex = 0;\n\n    this.mediaQuery = window.matchMedia(\"(min-width: 1000px)\");\n    this.isDesktop = this.mediaQuery.matches;\n\n    this.leftButton.addEventListener(\"click\", () => this.move(\"left\"));\n    this.rightButton.addEventListener(\"click\", () => this.move(\"right\"));\n\n    this.mediaQuery.addListener(this.handleMediaQueryChange.bind(this));\n  }\n\n  handleMediaQueryChange(e) {\n    this.isDesktop = e.matches;\n    this.currentIndex = 0;\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  addItem(content) {\n    const item = document.createElement(\"div\");\n    item.className = \"carousel__item\";\n    item.innerHTML = content;\n    this.container.appendChild(item);\n    this.items.push(item);\n    this.updateVisibility();\n  }\n\n  move(direction) {\n    const itemsPerSlide = this.isDesktop ? 2 : 1;\n    if (direction === \"left\") {\n      this.currentIndex = Math.max(0, this.currentIndex - itemsPerSlide);\n    } else {\n      this.currentIndex = Math.min(\n        this.items.length - itemsPerSlide,\n        this.currentIndex + itemsPerSlide\n      );\n    }\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  updatePosition() {\n    const itemsPerSlide = this.isDesktop ? 2 : 1;\n    const offset = -(this.currentIndex / itemsPerSlide) * 100;\n    this.container.style.transform = `translateX(${offset}%)`;\n  }\n\n  updateVisibility() {\n    const itemsPerSlide = this.isDesktop ? 2 : 1;\n    this.leftButton.style.display = this.currentIndex === 0 ? \"none\" : \"flex\";\n    this.rightButton.style.display =\n      this.currentIndex >= this.items.length - itemsPerSlide ? \"none\" : \"flex\";\n  }\n}\n\nconsole.log(\"MainChatbot module loaded\");\n\nexport default MainChatbot;\n"],"names":["MainChatbot","element","config","ChatbotCore","messageContainer","typingIndicator","drawer","drawerBody","form","input","e","message","buttonData","response","error","jumpToMainButton","savedConversation","turn","index","nextTurn","mainMenuMessage","trace","productHandle","_b","_a","productUrl","payload","imageWrapper","imageElement","carouselData","carouselElement","carousel","Carousel","card","itemContent","button","content","item","direction","itemsPerSlide","offset"],"mappings":"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"}