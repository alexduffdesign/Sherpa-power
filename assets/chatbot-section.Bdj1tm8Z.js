import{C as a}from"./chatbot-core-file.2vV7cJav.js";class r extends HTMLElement{constructor(){super(),this.chatInitialized=!1,this.core=null,this.messageContainer=null,this.typingIndicator=null,this.applicationsGrid=null}connectedCallback(){this.initialize()}initialize(){console.log("SectionChatbot initializing"),this.initializeElements(),this.setupEventListeners(),this.loadSavedDevices(),this.setupViewMoreButton()}initializeElements(){console.log("SectionChatbot initializeElements called"),this.messageContainer=this.querySelector("#messageContainer"),this.typingIndicator=this.querySelector(".chat-typing"),this.applicationsGrid=this.querySelector(".applications-grid"),(!this.messageContainer||!this.typingIndicator)&&console.error("Required DOM elements not found")}setupEventListeners(){if(this.eventListenersAttached)return;console.log("SectionChatbot setupEventListeners called");const e=this.querySelector("#chatForm"),t=this.querySelector("#userInput");if(!e||!t){console.error("Chat form or input not found");return}t.addEventListener("focus",async()=>{console.log("Input focused, initializing chat if needed"),await this.initializeChatIfNeeded()}),e.addEventListener("submit",async i=>{i.preventDefault();const s=t.value.trim();s&&(console.log("Form submitted with message:",s),t.value="",await this.initializeChatIfNeeded(),await this.handleUserMessage(s))}),this.eventListenersAttached=!0}async initializeChatIfNeeded(){if(!this.chatInitialized){console.log("Initializing section chatbot");const e={proxyEndpoint:"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming",userIDPrefix:"sectionChatbot"};this.core=new a(e),this.core.setDOMElements(this.messageContainer,this.typingIndicator,this),this.core.on("message",this.handleMessage.bind(this)),this.core.on("typing",this.handleTyping.bind(this)),this.core.on("updateMessage",this.handleUpdateMessage.bind(this)),await this.sendLaunch(),this.chatInitialized=!0}}async handleUserMessage(e){this.core.addMessage("user",e),this.core.conversationHistory.push({type:"user",message:e}),this.core.saveConversationToStorage(),this.core.showTypingIndicator();try{await this.core.sendMessage(e)}catch(t){console.error("Error in send message:",t)}finally{this.core.hideTypingIndicator(),this.core.scrollToBottom()}}async handleAgentResponse(e){}handleMessage({sender:e,content:t}){this.core.addMessage(e,t)}handleTyping(e){e?this.core.showTypingIndicator():this.core.hideTypingIndicator()}handleUpdateMessage(e){this.core.updateLatestMessage(e)}handleDeviceAnswer(e){console.log("Handling device answer:",e);let t=Array.isArray(e)?e:e.devices;if(!Array.isArray(t)){console.error("Invalid devices data:",t);return}t.forEach(i=>{console.log("Processing device:",i);const{name:s,estimatedRuntime:o}=i;this.saveDeviceEstimate({name:s,estimatedRuntime:o});const n=this.createDeviceCard(i);this.insertCard(n)});try{this.updateDevicesView()}catch(i){console.error("Error in updateDevicesView:",i)}}formatRuntime(e){const t=parseFloat(e.value);if(t>=1){const i=Math.floor(t),s=Math.round((t-i)*60),o=`${i} ${i===1?"hour":"hours"}`;return s===0?o:`${o} ${s} minutes`}else return`${Math.round(t*60)} minutes`}createDeviceCard(e){const t=this.formatRuntime(e.estimatedRuntime),i=document.createElement("div");return i.className="application-card chatbot-card",i.innerHTML=`
      <div class="application-card__image">
        ðŸš€ <!-- SVG Placeholder -->
      </div>
      <div class="application-card__content">
        <div class="application-card__title">${e.name}</div>
        <div class="application-card__runtime">
          ${t}
        </div>
      </div>
    `,i}insertCard(e){if(this.applicationsGrid=this.querySelector(".applications-grid"),!this.applicationsGrid){console.error("Applications grid not found when inserting card");return}const t=this.applicationsGrid.querySelector(".application-card.chatbot-card");t?this.applicationsGrid.insertBefore(e,t):this.applicationsGrid.appendChild(e)}saveDeviceEstimate(e){const t=`${this.getAttribute("product-title")}_devices`;let i=JSON.parse(localStorage.getItem(t)||"[]");const s=i.findIndex(o=>o.name===e.name);s!==-1&&i.splice(s,1),i.unshift(e),localStorage.setItem(t,JSON.stringify(i))}setupViewMoreButton(){this.viewMoreButton=this.querySelector(".view-more-button"),this.viewMoreButton?this.viewMoreButton.addEventListener("click",()=>this.toggleDevicesView()):console.warn("View more button not found")}toggleDevicesView(){const e=this.applicationsGrid.querySelectorAll(".application-card.chatbot-card"),t=Array.from(e).filter(i=>i.style.display==="none");t.length>0?(t.forEach(i=>i.style.display="flex"),this.viewMoreButton.textContent="Hide"):(Array.from(e).slice(2).forEach(i=>i.style.display="none"),this.viewMoreButton.textContent="View More")}updateDevicesView(){if(console.log("Updating devices view"),this.applicationsGrid=this.querySelector(".applications-grid"),!this.applicationsGrid){console.error("Applications grid not found");return}console.log("Applications grid found:",this.applicationsGrid);const e=this.applicationsGrid.querySelectorAll(".application-card.chatbot-card");console.log("Number of cards found:",e.length),this.viewMoreButton=this.querySelector(".view-more-button");const t=2;e.length>t?(this.viewMoreButton?(this.viewMoreButton.style.display="block",this.viewMoreButton.textContent="View More",console.log("View more button displayed")):console.warn("View more button not found"),e.forEach((i,s)=>{i.style.display=s<t?"flex":"none"})):this.viewMoreButton?(this.viewMoreButton.style.display="none",console.log("View more button hidden")):console.warn("View more button not found")}}customElements.define("section-chatbot",r);console.log("SectionChatbot module loaded");
//# sourceMappingURL=chatbot-section.Bdj1tm8Z.js.map
