{"version":3,"file":"chatbot-main.BCDVJj09.js","sources":["../frontend/mainChatbot/chatbot-main.js"],"sourcesContent":["// /assets/scripts/chatbot/chatbot-main.js\n\nimport { BaseChatbot } from \"../baseChatbot/base-chatbot.js\";\nimport { MainChatbotUI } from \"./chatbot-main-ui.js\";\nimport { MAIN_CHATBOT } from \"../utils/event-constants.js\";\nimport eventBus from \"../utils/event-bus.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * MainChatbot Class\n * Extends BaseChatbot with drawer-specific functionality\n * Manages the Main Chatbot's conversation history and UI updates\n */\nexport class MainChatbot extends BaseChatbot {\n  constructor() {\n    super();\n    this.historyKey = \"mainChatbotHistory\";\n    this.launchKey = \"chatHasLaunched\";\n    this.isLaunched = this.hasLaunched();\n  }\n\n  /**\n   * Initialize the chatbot UI\n   * @protected\n   * @override\n   */\n  initializeUI() {\n    this.ui = new MainChatbotUI(this.shadowRoot, this.eventBus);\n    this.setupMainChatbotEventListeners();\n    this.loadHistory(); // Changed from restoreHistory to loadHistory to maintain interactive elements\n  }\n\n  /**\n   * Set up event listeners specific to the main chatbot\n   * @private\n   */\n  setupMainChatbotEventListeners() {\n    // Handle button clicks\n    this.eventBus.on(MAIN_CHATBOT.BUTTON_CLICK, (payload) => {\n      this.sendAction(payload);\n    });\n\n    // Handle carousel button clicks\n    this.eventBus.on(MAIN_CHATBOT.CAROUSEL_BUTTON_CLICK, (payload) => {\n      this.sendAction(payload);\n    });\n\n    // Handle user messages with history saving\n    this.eventBus.on(\"userMessage\", (message) => {\n      this.saveToHistory(\"user\", message);\n      this.sendMessage(message);\n    });\n\n    // Handle bot messages with history saving\n    this.eventBus.on(\"messageReceived\", ({ content, metadata }) => {\n      this.saveToHistory(\"assistant\", content, metadata);\n    });\n  }\n\n  /**\n   * Check if the chatbot has been launched before\n   * @private\n   */\n  hasLaunched() {\n    return localStorage.getItem(this.launchKey) === \"true\";\n  }\n\n  /**\n   * Set the launched state in localStorage\n   * @private\n   */\n  setLaunched() {\n    localStorage.setItem(this.launchKey, \"true\");\n    this.isLaunched = true;\n  }\n\n  /**\n   * Save a message to the conversation history\n   * Preserves interactive element data for choices and carousels\n   * @private\n   */\n  saveToHistory(sender, message, metadata = null) {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n\n    // Create history entry with additional trace data for interactive elements\n    const historyEntry = {\n      sender,\n      message,\n      timestamp: Date.now(),\n      isInteractive: false,\n    };\n\n    // If this is an assistant message with choice or carousel, store the trace\n    if (sender === \"assistant\" && metadata) {\n      if (metadata.type === \"choice\") {\n        historyEntry.isInteractive = true;\n        historyEntry.traceType = \"choice\";\n        historyEntry.traceData = { buttons: metadata.buttons };\n      } else if (metadata.type === \"carousel\") {\n        historyEntry.isInteractive = true;\n        historyEntry.traceType = \"carousel\";\n        historyEntry.traceData = { cards: metadata.carouselItems };\n      }\n    }\n\n    history.push(historyEntry);\n    localStorage.setItem(this.historyKey, JSON.stringify(history));\n  }\n\n  /**\n   * Load conversation history from localStorage\n   * Handles interactive elements specially\n   * @private\n   */\n  loadHistory() {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n\n    // Process all messages\n    history.forEach((entry, index) => {\n      // If it's an interactive element\n      if (entry.isInteractive) {\n        // Only restore interactive element if it's the last entry\n        if (index === history.length - 1) {\n          this.restoreInteractiveElement(entry);\n        }\n        // Skip adding message for interactive elements since they should have empty messages\n        return;\n      }\n\n      // For non-interactive messages, display them normally\n      if (entry.message) {\n        this.ui.addMessage(entry.sender, entry.message);\n      }\n    });\n  }\n\n  /**\n   * Restore an interactive element (choice or carousel)\n   * @private\n   */\n  restoreInteractiveElement(historyEntry) {\n    if (historyEntry.traceType === \"choice\") {\n      this.ui.addButtons(historyEntry.traceData.buttons, true);\n    } else if (historyEntry.traceType === \"carousel\") {\n      this.ui.addCarousel(historyEntry.traceData.cards, true);\n    }\n  }\n\n  /**\n   * Clear the conversation history\n   * @public\n   */\n  clearHistory() {\n    localStorage.removeItem(this.historyKey);\n    localStorage.removeItem(this.launchKey);\n    this.isLaunched = false;\n  }\n\n  /**\n   * Sanitize user input\n   * @private\n   */\n  sanitizeInput(input) {\n    const div = document.createElement(\"div\");\n    div.textContent = input;\n    return div.innerHTML;\n  }\n}\n\n// Initialize Main Chatbot on DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const mainChatbotContainer = document.getElementById(\"main-chatbot-ui\");\n\n  if (!mainChatbotContainer) {\n    console.error(\"Main Chatbot UI container not found\");\n    return;\n  }\n\n  // Generate or retrieve existing userID for Main Chatbot\n  let mainUserId = localStorage.getItem(\"mainChatbotUserId\");\n  if (!mainUserId) {\n    mainUserId = generateUserId(\"mainChatbot\");\n    localStorage.setItem(\"mainChatbotUserId\", mainUserId);\n  }\n\n  // Initialize ChatbotCore with the generated userID\n  const mainChatbotCore = new ChatbotCore({\n    userID: mainUserId,\n    endpoint:\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\", // Update to your actual endpoint\n    chatbotType: \"main\",\n  });\n\n  // Initialize MainChatbotUI\n  const mainChatbotUI = new MainChatbotUI(mainChatbotContainer);\n\n  // Initialize MainChatbot\n  const mainChatbot = new MainChatbot(mainChatbotCore, mainChatbotUI);\n\n  // Load conversation history\n  mainChatbot.loadHistory();\n});\n\nconsole.log(\"Main chatbot script loading...\");\n// Register the web component\ncustomElements.define(\"main-chatbot\", MainChatbot);\nconsole.log(\"Main chatbot component registered\");\n"],"names":["MainChatbot","BaseChatbot","MainChatbotUI","MAIN_CHATBOT","payload","message","content","metadata","sender","history","historyEntry","entry","index","input","div","mainChatbotContainer","mainUserId","generateUserId","mainChatbotCore","mainChatbotUI"],"mappings":"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"}