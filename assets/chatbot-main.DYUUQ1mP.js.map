{"version":3,"file":"chatbot-main.DYUUQ1mP.js","sources":["../frontend/utils/user-id-generator.js","../frontend/mainChatbot/chatbot-main.js"],"sourcesContent":["/**\n * Generates a unique user ID with the specified prefix.\n * @param {string} prefix - The prefix indicating the chatbot type ('mainChatbot' or 'sectionChatbot').\n * @returns {string} - The generated unique user ID.\n */\nexport function generateUserId(prefix) {\n  const uniquePart =\n    Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n  return `${prefix}-${uniquePart}`;\n}\n","// /frontend/mainChatbot/chatbot-main.js\n\nimport ChatbotCore from \"../baseChatbot/base-chatbot.js\";\nimport MainChatbotUI from \"./chatbot-main-ui.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * MainChatbot Class\n * Handles main chatbot functionality including history management and drawer integration\n */\nclass MainChatbot {\n  /**\n   * @param {HTMLElement} container - The container element for the chatbot\n   */\n  constructor(container) {\n    this.container = container;\n    this.historyKey = \"mainChatbotHistory\";\n    this.launchKey = \"chatHasLaunched\";\n    this.isLaunched = this.hasLaunched();\n\n    // Initialize core and UI\n    this.initialize();\n  }\n\n  /**\n   * Initialize the chatbot components\n   * @private\n   */\n  initialize() {\n    // Set up user ID\n    let userId = localStorage.getItem(\"mainChatbotUserId\");\n    if (!userId) {\n      userId = generateUserId(\"mainChatbot\");\n      localStorage.setItem(\"mainChatbotUserId\", userId);\n    }\n\n    // Initialize core\n    this.core = new ChatbotCore({\n      type: \"main\",\n      endpoint:\n        \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\",\n      userID: userId,\n    });\n\n    // Initialize UI\n    this.ui = new MainChatbotUI({\n      container: this.container,\n      eventBus: this.core.eventBus,\n      type: \"main\",\n    });\n\n    this.setupEventListeners();\n    this.loadHistory();\n  }\n\n  /**\n   * Set up event listeners\n   * @private\n   */\n  setupEventListeners() {\n    // Handle user messages\n    this.core.eventBus.on(\"userMessage\", (message) => {\n      this.saveToHistory(\"user\", message);\n    });\n\n    // Handle bot messages\n    this.core.eventBus.on(\"messageReceived\", ({ content, metadata }) => {\n      this.saveToHistory(\"assistant\", content, metadata);\n    });\n\n    // Handle choice presentation (saves them to history)\n    this.core.eventBus.on(\"choicePresented\", ({ buttons }) => {\n      this.saveToHistory(\"assistant\", \"Choice presented\", {\n        type: \"choice\",\n        buttons: buttons,\n      });\n    });\n\n    this.core.eventBus.on(\"carouselPresented\", ({ items }) => {\n      this.saveToHistory(\"assistant\", \"Carousel presented\", {\n        type: \"carousel\",\n        carouselItems: items,\n      });\n    });\n\n    // Handle button clicks\n    this.core.eventBus.on(\"buttonClicked\", (payload) => {\n      // Save the user's choice and display it in the UI\n      const userMessage = payload.payload.label || \"Button clicked\";\n      this.saveToHistory(\"user\", userMessage);\n      this.ui.addMessage(\"user\", userMessage);\n\n      // Remove previous interactive elements\n      this.ui.removeInteractiveElements();\n\n      // Handle sending the request to Voiceflow based on payload.type\n      if (payload.type && payload.type.startsWith(\"path-\")) {\n        // If this is a path type request, build the action as per Voiceflow docs\n        const actionPayload = {\n          action: {\n            type: payload.type, // e.g. \"path-4ragy3i2y\"\n            payload: {\n              label: userMessage, // optional but recommended to set last_utterance\n            },\n          },\n        };\n\n        // Use sendAction with the constructed payload\n        this.core.sendAction(actionPayload);\n      } else if (payload.type === \"intent\") {\n        // If it were an intent, you'd do something like:\n        const actionPayload = {\n          action: {\n            type: \"intent\",\n            payload: {\n              intent: payload.payload.intent,\n              query: payload.payload.query || \"\",\n              entities: payload.payload.entities || [],\n              // label could be included here if desired\n            },\n          },\n        };\n        this.core.sendAction(actionPayload);\n      } else {\n        // If it's neither path nor intent, fall back to treating it as text input:\n        this.core.sendMessage(userMessage);\n      }\n    });\n\n    this.core.eventBus.on(\"carouselButtonClicked\", (payload) => {\n      const userMessage = payload.label || \"Button clicked\";\n\n      this.saveToHistory(\"user\", userMessage);\n      this.ui.addMessage(\"user\", userMessage);\n\n      const { type, payload: actionData } = payload.action;\n\n      const action = JSON.stringify(actionData);\n\n      if (type && type.startsWith(\"path-\")) {\n        // path request\n        const requestPayload = {\n          request: {\n            type: type,\n            payload: { label: userMessage },\n          },\n        };\n        this.core.sendAction(requestPayload);\n      } else if (type === \"intent\") {\n        // intent request\n        const requestPayload = {\n          request: {\n            type: \"intent\",\n            payload: {\n              intent: actionData.intent,\n              query: actionData.query || \"\",\n              entities: actionData.entities || [],\n            },\n          },\n        };\n        this.core.sendAction(requestPayload);\n      } else if (type === \"button\") {\n        const requestPayload = {\n          action: {\n            type: \"text\",\n            payload: action,\n          },\n        };\n        this.core.sendAction(requestPayload);\n      } else {\n        // Fallback to just sending userMessage as text if unknown\n        const requestPayload = {\n          request: {\n            type: \"text\",\n            payload: userMessage,\n          },\n        };\n        this.core.sendAction(requestPayload);\n      }\n    });\n\n    // Handle main menu\n    this.core.eventBus.on(\"mainMenu\", () => {\n      this.core.sendAction({\n        action: {\n          type: \"event\",\n          payload: {\n            event: {\n              name: \"main_menu\",\n            },\n          },\n        },\n      });\n    });\n  }\n\n  /**\n   * Check if chatbot has been launched before\n   * @private\n   * @returns {boolean}\n   */\n  hasLaunched() {\n    return localStorage.getItem(this.launchKey) === \"true\";\n  }\n\n  /**\n   * Set launched state\n   * @private\n   */\n  setLaunched() {\n    localStorage.setItem(this.launchKey, \"true\");\n    this.isLaunched = true;\n  }\n\n  /**\n   * Launch the chatbot\n   * @public\n   */\n  async launch() {\n    if (this.isLaunched) {\n      console.log(\"Chat already launched, skipping launch request\");\n      return;\n    }\n\n    try {\n      await this.core.sendLaunch();\n      this.setLaunched();\n    } catch (error) {\n      console.error(\"Error launching chatbot:\", error);\n      this.ui.displayError(\n        \"Failed to launch the chatbot. Please try again later.\"\n      );\n    }\n  }\n\n  /**\n   * Save message to history\n   * @private\n   * @param {string} sender - Message sender\n   * @param {string} message - Message content\n   * @param {Object} metadata - Optional metadata\n   */\n  saveToHistory(sender, message, metadata = null) {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n\n    const historyEntry = {\n      sender,\n      message,\n      timestamp: Date.now(),\n      isInteractive: false,\n    };\n\n    if (sender === \"assistant\" && metadata) {\n      if (metadata.type === \"choice\") {\n        historyEntry.isInteractive = true;\n        historyEntry.traceType = \"choice\";\n        historyEntry.traceData = { buttons: metadata.buttons };\n      } else if (metadata.type === \"carousel\") {\n        historyEntry.isInteractive = true;\n        historyEntry.traceType = \"carousel\";\n        historyEntry.traceData = { cards: metadata.carouselItems };\n      }\n    }\n\n    history.push(historyEntry);\n    localStorage.setItem(this.historyKey, JSON.stringify(history));\n  }\n\n  /**\n   * Load conversation history\n   * @private\n   */\n  loadHistory() {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n    console.log(\"Loading history:\", history); // Log the entire history array\n\n    history.forEach((entry, index) => {\n      console.log(\"Processing history entry:\", entry);\n\n      if (entry.isInteractive) {\n        console.log(\"Entry is interactive:\", entry);\n\n        if (index === history.length - 1) {\n          console.log(\"Restoring interactive element from history\");\n\n          this.restoreInteractiveElement(entry);\n        }\n        return;\n      }\n\n      if (entry.message) {\n        console.log(\"Adding message from history:\", entry);\n\n        this.ui.addMessage(entry.sender, entry.message);\n      }\n    });\n  }\n\n  /**\n   * Restore interactive elements from history\n   * @private\n   * @param {Object} historyEntry - The history entry to restore\n   */\n  restoreInteractiveElement(historyEntry) {\n    if (historyEntry.traceType === \"choice\") {\n      this.ui.addButtons(historyEntry.traceData.buttons, true);\n    } else if (historyEntry.traceType === \"carousel\") {\n      this.ui.addCarousel(historyEntry.traceData.cards, true);\n    }\n  }\n\n  /**\n   * Clear chat history\n   * @public\n   */\n  clearHistory() {\n    localStorage.removeItem(this.historyKey);\n    localStorage.removeItem(this.launchKey);\n    this.isLaunched = false;\n    this.ui.clearChat();\n  }\n\n  /**\n   * Clean up resources\n   * @public\n   */\n  destroy() {\n    this.core.destroy();\n    this.ui.destroy();\n  }\n}\n\nexport default MainChatbot;\nwindow.MainChatbot = MainChatbot;\n"],"names":["generateUserId","prefix","uniquePart","MainChatbot","container","userId","ChatbotCore","MainChatbotUI","message","content","metadata","buttons","items","payload","userMessage","actionPayload","type","actionData","action","requestPayload","error","sender","history","historyEntry","entry","index"],"mappings":"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"}