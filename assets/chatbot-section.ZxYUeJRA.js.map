{"version":3,"file":"chatbot-section.ZxYUeJRA.js","sources":["../frontend/sectionChatbot/chatbot-section.js"],"sourcesContent":["// /frontend/sectionChatbot/chatbot-section.js\n\nimport ChatbotCore from \"../baseChatbot/base-chatbot.js\";\nimport SectionChatbotUI from \"./chatbot-section-ui.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * SectionChatbot Class\n * Handles section-specific chatbot functionality including product context and device answers\n */\nclass SectionChatbot {\n  /**\n   * @param {HTMLElement} container - The container element\n   * @param {Object} productDetails - Product-specific information\n   */\n  constructor(container, productDetails) {\n    this.container = container;\n    this.productDetails = productDetails;\n    this.isLaunched = false;\n\n    this.initialize();\n    this.validateProductDetails();\n  }\n\n  /**\n   * Initialize the chatbot components\n   * @private\n   */\n  initialize() {\n    // Initialize core\n    this.core = new ChatbotCore({\n      type: \"section\",\n      endpoint:\n        \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\",\n      userID: this.generateSessionId(),\n    });\n\n    // Initialize UI\n    this.ui = new SectionChatbotUI({\n      container: this.container,\n      eventBus: this.core.eventBus,\n      type: \"section\",\n      productDetails: this.productDetails,\n    });\n\n    this.setupEventListeners();\n    this.loadStoredDeviceAnswers();\n  }\n\n  /**\n   * Generate a session ID for this instance\n   * @private\n   * @returns {string}\n   */\n  generateSessionId() {\n    return `section_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate required product details\n   * @private\n   */\n  validateProductDetails() {\n    const requiredFields = [\"title\", \"capacity\"];\n    const missingFields = requiredFields.filter(\n      (field) => !this.productDetails[field]\n    );\n\n    if (missingFields.length > 0) {\n      console.error(\n        \"Missing required product details:\",\n        missingFields.join(\", \")\n      );\n      this.ui.displayError(\n        \"Some product information is missing. Chat functionality may be limited.\"\n      );\n    }\n  }\n\n  /**\n   * Set up event listeners\n   * @private\n   */\n  setupEventListeners() {\n    // Handle user messages\n    this.core.eventBus.on(\"userMessage\", (message) => {\n      this.ui.addMessage(\"user\", message);\n      this.core.sendMessage(message);\n    });\n\n    // Handle device answers\n    this.core.eventBus.on(\"deviceAnswer\", (payload) => {\n      this.handleDeviceAnswer(payload);\n    });\n\n    // Handle button clicks\n    this.core.eventBus.on(\"buttonClicked\", (payload) => {\n      this.handleButtonClicked(payload);\n    });\n\n    // Handle carousel button clicks\n    this.core.eventBus.on(\"carouselButtonClicked\", (payload) => {\n      this.handleCarouselButtonClicked(payload);\n    });\n\n    // Handle input focus for launch\n    const input = this.container.querySelector(\".chatbot-input\");\n    if (input) {\n      input.addEventListener(\"focus\", () => {\n        if (!this.isLaunched) {\n          this.launch();\n        }\n      });\n    }\n  }\n\n  /**\n   * Launch the chatbot with product context\n   * @public\n   */\n  async launch() {\n    if (this.isLaunched) {\n      console.log(\"Section chatbot already launched\");\n      return;\n    }\n\n    try {\n      const sanitizedDetails = this.sanitizeProductDetails();\n      await this.core.sendLaunch({\n        action: {\n          type: \"launch\",\n          payload: {\n            startBlock: \"shopifySection\",\n            powerStationDetails: sanitizedDetails,\n          },\n        },\n      });\n      this.isLaunched = true;\n    } catch (error) {\n      console.error(\"Error launching section chatbot:\", error);\n      this.ui.displayError(\"Failed to start the chat. Please try again.\");\n    }\n  }\n\n  /**\n   * Handle device answer traces\n   * @private\n   * @param {Object} payload - Device answer payload\n   */\n  handleDeviceAnswer(payload) {\n    console.log(\"Received device answer:\", payload);\n    if (!payload || !payload.devices) {\n      // Updated condition\n      console.warn(\"Invalid device answer payload:\", payload);\n      return;\n    }\n\n    // Process device answer data\n    const processedData = this.processDeviceAnswerData(payload); // Pass payload directly\n    this.ui.updateDeviceAnswers(processedData);\n    this.saveDeviceAnswerToStorage(payload); // Save the entire deviceAnswer object\n  }\n\n  /**\n   * Process device answer data for UI\n   * @private\n   * @param {Object} data - Raw device answer data\n   * @returns {Array} Processed data for UI\n   */\n  processDeviceAnswerData(data) {\n    // Assuming data has the structure:\n    // { devices: [ { deviceName: \"...\", runtime: \"...\" }, ... ] }\n    return data.devices || [];\n  }\n\n  /**\n   * Sanitize product details for API\n   * @private\n   * @returns {Object}\n   */\n  sanitizeProductDetails() {\n    return Object.entries(this.productDetails).reduce((acc, [key, value]) => {\n      acc[key] = value ? String(value).trim() : \"\";\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Handle button clicks\n   * @private\n   * @param {Object} payload - Button click payload\n   */\n  handleButtonClicked(payload) {\n    this.processButtonOrCarouselClick(payload);\n  }\n\n  /**\n   * Handle carousel button clicks\n   * @private\n   * @param {Object} payload - Carousel button click payload\n   */\n  handleCarouselButtonClicked(payload) {\n    this.processButtonOrCarouselClick(payload);\n  }\n\n  /**\n   * Process button or carousel button click payload\n   * @private\n   * @param {Object} payload - Button or carousel button click payload\n   */\n  processButtonOrCarouselClick(payload) {\n    // Extract relevant data from payload\n    const userMessage = payload.payload.label || \"Button clicked\";\n\n    // Display user message in UI\n    this.ui.addMessage(\"user\", userMessage);\n\n    // Remove previous interactive elements\n    this.ui.removeInteractiveElements();\n\n    // Handle sending the request to Voiceflow based on payload.type\n    if (payload.type && payload.type.startsWith(\"path-\")) {\n      // If this is a path type request, build the action as per Voiceflow docs\n      const actionPayload = {\n        action: {\n          type: payload.type, // e.g. \"path-4ragy3i2y\"\n          payload: {\n            label: userMessage, // optional but recommended to set last_utterance\n          },\n        },\n      };\n\n      // Use sendAction with the constructed payload\n      this.core.sendAction(actionPayload);\n    } else if (payload.type === \"intent\") {\n      // Intent request\n      const actionPayload = {\n        action: {\n          type: \"intent\",\n          payload: {\n            intent: payload.payload.intent,\n            query: payload.payload.query || \"\",\n            entities: payload.payload.entities || [],\n            // label could be included here if desired\n          },\n        },\n      };\n      this.core.sendAction(actionPayload);\n    } else {\n      // Fallback to treating it as text input\n      this.core.sendMessage(userMessage);\n    }\n  }\n\n  /**\n   * Save device answer to local storage\n   * @private\n   * @param {Object} deviceAnswer - Processed device answer data\n   */\n  saveDeviceAnswerToStorage(deviceAnswer) {\n    const key = `sectionChatbot_${this.productDetails.title}_answers`;\n    let answers = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n    // Optionally, ensure no duplicates or manage ordering\n    answers.unshift(deviceAnswer); // Add to beginning\n\n    localStorage.setItem(key, JSON.stringify(answers));\n  }\n\n  /**\n   * Load stored device answers from local storage and display them\n   * @private\n   */\n  loadStoredDeviceAnswers() {\n    const key = `sectionChatbot_${this.productDetails.title}_answers`;\n    const storedAnswers = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n    storedAnswers.forEach((answer) => {\n      this.ui.updateDeviceAnswers(answer.devices); // Pass the devices array\n    });\n  }\n\n  /**\n   * Clean up resources\n   * @public\n   */\n  destroy() {\n    this.core.destroy();\n    this.ui.destroy();\n  }\n}\n\nexport default SectionChatbot;\nwindow.SectionChatbot = SectionChatbot;\n"],"names":["SectionChatbot","container","productDetails","ChatbotCore","SectionChatbotUI","missingFields","field","message","payload","input","sanitizedDetails","error","processedData","data","acc","key","value","userMessage","actionPayload","deviceAnswer","answers","answer"],"mappings":"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"}