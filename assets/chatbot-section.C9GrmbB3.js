import{C as a}from"./base-chatbot.grsVqGnb.js";import{S as c}from"./chatbot-section-ui.DvAl7v87.js";import"./vendor.DqvJXvYX.js";import"./streaming-markdown-parser.Bd3zPGns.js";import"./markdown-util.DadijVe3.js";import"./base-chatbot-ui.DjunU3Fi.js";class d{constructor(e,t){this.container=e,this.productDetails=t,this.isLaunched=!1,this.initialize(),this.validateProductDetails()}initialize(){this.core=new a({type:"section",endpoint:"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming",userID:this.generateSessionId()}),this.ui=new c({container:this.container,eventBus:this.core.eventBus,type:"section",productDetails:this.productDetails}),this.setupEventListeners(),this.loadStoredDeviceAnswers()}generateSessionId(){return`section_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}validateProductDetails(){const t=["title","capacity"].filter(i=>!this.productDetails[i]);t.length>0&&(console.error("Missing required product details:",t.join(", ")),this.ui.displayError("Some product information is missing. Chat functionality may be limited."))}setupEventListeners(){this.core.eventBus.on("deviceAnswer",t=>{this.handleDeviceAnswer(t)});const e=this.container.querySelector(".chatbot-input");e&&e.addEventListener("focus",()=>{this.isLaunched||this.launch()})}async launch(){if(this.isLaunched){console.log("Section chatbot already launched");return}try{const e=this.sanitizeProductDetails();await this.core.sendLaunch({action:{type:"launch",payload:{startBlock:"shopifySection",powerStationDetails:e}}}),this.isLaunched=!0}catch(e){console.error("Error launching section chatbot:",e),this.ui.displayError("Failed to start the chat. Please try again.")}}handleDeviceAnswer(e){if(console.log("Received device answer:",e),!e||!e.devices){console.warn("Invalid device answer payload:",e);return}const t=this.processDeviceAnswerData(e);this.ui.updateDeviceAnswers(t),this.saveDeviceAnswerToStorage(e)}processDeviceAnswerData(e){return e.devices||[]}sanitizeProductDetails(){return Object.entries(this.productDetails).reduce((e,[t,i])=>(e[t]=i?String(i).trim():"",e),{})}saveDeviceAnswerToStorage(e){const t=`sectionChatbot_${this.productDetails.title}_answers`;let i=JSON.parse(localStorage.getItem(t)||"[]");e.devices.forEach(r=>{const o=i.findIndex(s=>s.devices.some(n=>n.deviceName===r.deviceName));o>=0?i[o].devices=i[o].devices.map(s=>s.deviceName===r.deviceName?r:s):i.unshift({devices:[r]})}),localStorage.setItem(t,JSON.stringify(i))}loadStoredDeviceAnswers(){const e=`sectionChatbot_${this.productDetails.title}_answers`,t=JSON.parse(localStorage.getItem(e)||"[]"),i=[],r=new Set;t.forEach(o=>{o.devices.forEach(s=>{r.has(s.deviceName)||(r.add(s.deviceName),i.push(s))})}),i.length>0&&this.ui.updateDeviceAnswers(i)}destroy(){this.core.destroy(),this.ui.destroy()}}window.SectionChatbot=d;
//# sourceMappingURL=chatbot-section.C9GrmbB3.js.map
