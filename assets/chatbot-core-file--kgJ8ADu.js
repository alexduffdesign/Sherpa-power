console.log("Recent changes check : 3");class i{constructor(e){console.log("ChatbotCore constructor called with config:",e),this.apiEndpoint=e.apiEndpoint,this.userIDPrefix=e.userIDPrefix||"chatbot",this.userID=this.loadUserID(),this.messageContainer=null,this.typingIndicator=null,this.drawerBody=null,this.sendMessage=this.sendMessage.bind(this),this.gadgetInteract=this.gadgetInteract.bind(this),this.addMessage=this.addMessage.bind(this),console.log("ChatbotCore instance created:",this)}loadUserID(){if(this.userIDPrefix==="sectionChatbot")return`${this.userIDPrefix}_${Math.floor(Math.random()*1e15)}`;{const e=`${this.userIDPrefix}UserID`;let t=localStorage.getItem(e);return t||(t=`${this.userIDPrefix}_${Math.floor(Math.random()*1e15)}`,localStorage.setItem(e,t)),console.log(`${this.userIDPrefix} userID loaded:`,t),t}}setDOMElements(e,t,s){console.log("setDOMElements called:",{messageContainer:e,typingIndicator:t,drawerBody:s}),this.messageContainer=e,this.typingIndicator=t,this.drawerBody=s,console.log("DOM elements set:",this)}scrollToBottom(){this.drawerBody?setTimeout(()=>{this.drawerBody.scrollTop=this.drawerBody.scrollHeight},100):console.error("Drawer body element not found for scrolling")}async sendMessage(e){console.log("sendMessage called with:",e),console.log("this in sendMessage:",this);try{const t=await this.gadgetInteract({userAction:{type:"text",payload:e}});return console.log("gadgetInteract response:",t),this.hideTypingIndicator(),t}catch(t){throw console.error("Error sending message:",t),this.hideTypingIndicator(),t}}async sendLaunch(e={}){console.log("ChatbotCore sendLaunch called with payload:",e),this.showTypingIndicator();try{const t=await this.gadgetInteract(e);return console.log("Launch response:",t),t}catch(t){throw console.error("Error launching conversation:",t),t}finally{this.hideTypingIndicator()}}async gadgetInteract(e){console.log("Sending payload to Gadget:",e);const t={userID:this.userID,userAction:e.userAction||e},s=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok)throw new Error(`Gadget API error: ${s.status}`);return await s.json()}showTypingIndicator(){console.log("Showing typing indicator"),this.typingIndicator&&(this.typingIndicator.style.display="flex",this.typingIndicator.classList.add("active"),this.scrollToBottom())}hideTypingIndicator(){console.log("Hiding typing indicator"),this.typingIndicator&&(this.typingIndicator.style.display="none",this.typingIndicator.classList.remove("active"))}addMessage(e,t){if(console.log(`Adding message from ${e}: ${t}`),this.messageContainer){const s=document.createElement("div");s.classList.add("message",`message--${e}`),s.innerHTML=this.markdownToHtml(t),this.messageContainer.appendChild(s),this.scrollToBottom()}}markdownToHtml(e){return e.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/\[(.*?)\]\((.*?)\)/g,'<a href="$2" target="_blank">$1</a>').replace(/\n/g,"<br>")}addButtons(e){console.log("Adding buttons:",e);const t=document.createElement("div");t.classList.add("button-container"),e.forEach(s=>{const o=document.createElement("button");o.classList.add("button"),o.textContent=s.name,o.dataset.buttonData=JSON.stringify(s),t.appendChild(o)}),this.messageContainer?(this.messageContainer.appendChild(t),this.scrollToBottom()):console.error("Message container not found when adding buttons")}removeButtons(){this.messageContainer.querySelectorAll(".button-container").forEach(t=>t.remove())}async handleButtonClick(e){console.log("Button clicked:",e),this.removeButtons(),this.addMessage("user",e.name),this.showTypingIndicator();try{const t=await this.gadgetInteract({userID:this.userID,userAction:e.request});return this.hideTypingIndicator(),t}catch(t){throw console.error("Error handling button click:",t),this.hideTypingIndicator(),t}}}console.log("ChatbotCore module loaded");export{i as C};
//# sourceMappingURL=chatbot-core-file--kgJ8ADu.js.map
