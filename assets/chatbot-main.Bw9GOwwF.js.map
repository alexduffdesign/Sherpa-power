{"version":3,"file":"chatbot-main.Bw9GOwwF.js","sources":["../frontend/ui/chatbot-main-ui.js","../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// /assets/scripts/chatbot/main/main-chatbot-ui.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * MainChatbotUI Class\n * Handles UI-specific functionalities for the Main Chatbot.\n */\nclass MainChatbotUI {\n  /**\n   * Constructor initializes UI elements and sets up event listeners.\n   * @param {HTMLElement} container - The main chatbot UI container.\n   */\n  constructor(container) {\n    this.container = container;\n    this.form = this.container.querySelector(\".chat-form\");\n    this.input = this.container.querySelector(\"input[type='text']\");\n    this.messageContainer = this.container.querySelector(\".message-container\");\n\n    if (!this.container) {\n      console.error(\"Main Chatbot UI container not found\");\n      return;\n    }\n\n    if (!this.form || !this.input) {\n      console.error(\"Main Chatbot form or input not found\");\n      return;\n    }\n\n    this.setupEventListeners();\n    this.setupUIEventListeners(); // New method for UI-specific event listeners\n  }\n\n  /**\n   * Sets up event listeners for user interactions within the UI.\n   */\n  setupEventListeners() {\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        eventBus.emit(\"userMessage\", message);\n        this.input.value = \"\";\n        this.saveToHistory(\"user\", message);\n      }\n    });\n  }\n\n  /**\n   * Sets up event listeners for UI components like buttons.\n   */\n  setupUIEventListeners() {\n    // Set up event delegation for button clicks once\n    this.container\n      .querySelector(\".chatbot-container\")\n      .addEventListener(\"click\", (e) => {\n        if (e.target.closest(\"button-component\")) {\n          const button = e.target.closest(\"button-component\");\n          const payload = JSON.parse(button.getAttribute(\"payload\"));\n          eventBus.emit(\"buttonClicked\", payload);\n          this.removeInteractiveElements();\n        }\n      });\n  }\n\n  /**\n   * Registers a callback for user message submissions.\n   * @param {Function} callback - Function to handle user messages.\n   */\n  onUserMessage(callback) {\n    eventBus.on(\"userMessage\", callback);\n  }\n\n  /**\n   * Registers a callback for button click interactions.\n   * @param {Function} callback - Function to handle button clicks.\n   */\n  onButtonClick(callback) {\n    eventBus.on(\"buttonClicked\", callback);\n  }\n\n  /**\n   * Adds a message to the chatbot UI.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} content - The message content.\n   */\n  addMessage(sender, content) {\n    const message = document.createElement(\"message-component\");\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n    this.container.querySelector(\".chatbot-container\").appendChild(message);\n    this.scrollToBottom();\n    this.saveToHistory(sender, content);\n  }\n\n  /**\n   * Adds interactive buttons to the chatbot UI.\n   * @param {Array} buttons - Array of button data.\n   */\n  addButtons(buttons) {\n    console.log(\"addButtons called with:\", buttons); // Debug log\n\n    if (!Array.isArray(buttons)) {\n      console.error(\"addButtons expected an array but received:\", buttons);\n      return;\n    }\n\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      this.container.querySelector(\".chatbot-container\").appendChild(button);\n    });\n    this.scrollToBottom();\n  }\n\n  /**\n   * Adds a carousel to the chatbot UI.\n   * @param {Array} items - Array of carousel items.\n   */\n  addCarousel(items) {\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.setAttribute(\"items\", JSON.stringify(items));\n    this.container.querySelector(\".chatbot-container\").appendChild(carousel);\n    this.scrollToBottom();\n\n    // Handle carousel interactions if necessary\n  }\n\n  /**\n   * Displays a typing indicator in the chatbot UI.\n   */\n  showTypingIndicator() {\n    const typing = document.createElement(\"div\");\n    typing.classList.add(\"typing-indicator\");\n    typing.innerText = \"Assistant is typing...\";\n    this.container.querySelector(\".chatbot-container\").appendChild(typing);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Hides the typing indicator from the chatbot UI.\n   */\n  hideTypingIndicator() {\n    const typing = this.container.querySelector(\".typing-indicator\");\n    if (typing) {\n      typing.remove();\n    }\n  }\n\n  /**\n   * Displays an error message in the chatbot UI.\n   * @param {string} message - The error message.\n   */\n  displayError(message) {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.innerText = message;\n    this.container.querySelector(\".chatbot-container\").appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Scrolls the chatbot container to the bottom.\n   */\n  scrollToBottom() {\n    this.container.scrollTop = this.container.scrollHeight;\n  }\n\n  /**\n   * Saves a message to conversation history in localStorage.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} message - The message content.\n   */\n  saveToHistory(sender, message) {\n    const history =\n      JSON.parse(localStorage.getItem(\"mainChatbotHistory\")) || [];\n    history.push({ sender, message });\n    localStorage.setItem(\"mainChatbotHistory\", JSON.stringify(history));\n  }\n\n  /**\n   * Removes interactive elements (buttons, carousels) from the UI.\n   */\n  removeInteractiveElements() {\n    const interactiveElements = this.container.querySelectorAll(\n      \"button-component, carousel-component\"\n    );\n    interactiveElements.forEach((element) => element.remove());\n  }\n}\n\nexport default MainChatbotUI;\n","// /assets/scripts/chatbot/chatbot-main.js\n\nimport ChatbotCore from \"../core/chatbot-core.js\";\nimport MainChatbotUI from \"../ui/chatbot-main-ui.js\";\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * MainChatbot Class\n * Manages the Main Chatbot's interactions, conversation history, and UI updates.\n */\nclass MainChatbot {\n  /**\n   * Constructor initializes ChatbotCore and MainChatbotUI, sets up event listeners.\n   * @param {ChatbotCore} core - Instance of ChatbotCore handling API communications.\n   * @param {MainChatbotUI} ui - Instance of MainChatbotUI handling UI updates.\n   */\n  constructor(core, ui) {\n    this.core = core;\n    this.ui = ui;\n    this.historyKey = \"mainChatbotHistory\";\n    this.isLaunched = false;\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for ChatbotCore events.\n   */\n  setupEventListeners() {\n    // Listen to events emitted by ChatbotCore via EventBus\n    eventBus.on(EVENTS.MAIN_CHATBOT.MESSAGE_RECEIVED, (data) => {\n      this.ui.addMessage(\"assistant\", data.content);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.CHOICE_PRESENTED, (data) => {\n      this.ui.addButtons(data.choices);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.CAROUSEL_PRESENTED, (data) => {\n      this.ui.addCarousel(data.carouselItems);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.ERROR, (error) => {\n      this.ui.displayError(error.message);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.TYPING, (data) => {\n      if (data.isTyping) {\n        this.ui.showTypingIndicator();\n      } else {\n        this.ui.hideTypingIndicator();\n      }\n    });\n\n    // Listen for chatbot launch event\n    document.addEventListener(\"chatbotLaunch\", () => {\n      this.launch();\n    });\n  }\n\n  /**\n   * Launches the chatbot by sending a launch request.\n   */\n  launch() {\n    if (this.isLaunched) return;\n\n    this.core.sendLaunch();\n    this.isLaunched = true;\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    // Sanitize user input to prevent XSS attacks\n    const sanitizedMessage = this.sanitizeInput(message);\n    this.core.sendMessage(sanitizedMessage);\n    this.ui.addMessage(\"user\", sanitizedMessage);\n    this.saveToHistory(\"user\", sanitizedMessage);\n  }\n\n  /**\n   * Loads conversation history from localStorage and renders it in the UI.\n   */\n  loadHistory() {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n    history.forEach((entry) => {\n      this.ui.addMessage(entry.sender, entry.message);\n    });\n\n    // Check if the last message was from the assistant to retain interactive elements\n    if (history.length > 0) {\n      const lastEntry = history[history.length - 1];\n      if (lastEntry.sender === \"assistant\") {\n        // Optional: Implement logic to re-render interactive elements based on the last entry\n        // For example, if the last message included choices or a carousel, re-add them\n        // This requires storing additional metadata in the history\n      }\n    }\n  }\n\n  /**\n   * Saves a message to conversation history in localStorage.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} message - The message content.\n   */\n  saveToHistory(sender, message) {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n    history.push({ sender, message });\n    localStorage.setItem(this.historyKey, JSON.stringify(history));\n  }\n\n  /**\n   * Sanitizes user input to prevent XSS attacks.\n   * @param {string} input - The user-provided input.\n   * @returns {string} - The sanitized input.\n   */\n  sanitizeInput(input) {\n    const div = document.createElement(\"div\");\n    div.textContent = input;\n    return div.innerHTML;\n  }\n}\n\n// Initialize Main Chatbot on DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const mainChatbotContainer = document.getElementById(\"main-chatbot-ui\");\n\n  if (!mainChatbotContainer) {\n    console.error(\"Main Chatbot UI container not found\");\n    return;\n  }\n\n  // Generate or retrieve existing userID for Main Chatbot\n  let mainUserId = localStorage.getItem(\"mainChatbotUserId\");\n  if (!mainUserId) {\n    mainUserId = generateUserId(\"mainChatbot\");\n    localStorage.setItem(\"mainChatbotUserId\", mainUserId);\n  }\n\n  // Initialize ChatbotCore with the generated userID\n  const mainChatbotCore = new ChatbotCore({\n    userID: mainUserId,\n    endpoint:\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\", // Update to your actual endpoint\n    chatbotType: \"main\",\n  });\n\n  // Initialize MainChatbotUI\n  const mainChatbotUI = new MainChatbotUI(mainChatbotContainer);\n\n  // Initialize MainChatbot\n  const mainChatbot = new MainChatbot(mainChatbotCore, mainChatbotUI);\n\n  // Load conversation history\n  mainChatbot.loadHistory();\n\n  // Listen for user message submissions\n  mainChatbotUI.onUserMessage((message) => {\n    mainChatbot.sendMessage(message);\n  });\n\n  // Listen for button clicks from UI components\n  mainChatbotUI.onButtonClick((payload) => {\n    mainChatbot.sendMessage(JSON.stringify(payload));\n  });\n});\n\nexport default MainChatbot;\n"],"names":["MainChatbotUI","container","e","message","eventBus","button","payload","callback","sender","content","buttons","buttonData","items","carousel","typing","errorDiv","history","element","MainChatbot","core","ui","EVENTS","data","error","sanitizedMessage","entry","input","div","mainChatbotContainer","mainUserId","generateUserId","mainChatbotCore","ChatbotCore","mainChatbotUI","mainChatbot"],"mappings":"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"}