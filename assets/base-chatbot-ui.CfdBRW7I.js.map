{"version":3,"file":"base-chatbot-ui.CfdBRW7I.js","sources":["../frontend/baseChatbot/base-chatbot-ui.js"],"sourcesContent":["// /assets/scripts/chatbot/core/base-chatbot-ui.js\n\nimport EventEmitter from \"eventemitter3\";\nimport { parseMarkdown } from \"../utils/markdown-util.js\";\n\n/**\n * ChatbotUI Class\n * Handles base UI functionality for chatbots with markdown and streaming support\n */\nclass ChatbotUI {\n  /**\n   * @param {Object} config - Configuration object\n   * @param {HTMLElement} config.container - The container element for the chatbot\n   * @param {EventEmitter} config.eventBus - Event bus instance\n   * @param {string} config.type - Type of chatbot ('main' or 'section')\n   */\n  constructor(config) {\n    if (!config.container) {\n      throw new Error(\"ChatbotUI requires a container element\");\n    }\n    if (!config.eventBus) {\n      throw new Error(\"ChatbotUI requires an event bus\");\n    }\n\n    this.container = config.container;\n    this.eventBus = config.eventBus;\n    this.type = config.type;\n\n    this.currentAssistantMessage = null; // Track the current assistant message\n    this.accumulatedContent = \"\"; // For accumulating partial messages\n\n    this.setupUIElements();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Set up references to UI elements\n   * @private\n   */\n  setupUIElements() {\n    const messageContainers =\n      this.container.querySelectorAll(\".message-container\");\n    this.messageContainer = messageContainers[0];\n    console.log(\"Message container found:\", !!this.messageContainer);\n\n    const forms = this.container.querySelectorAll(\".chat-form\");\n    this.form = forms[0];\n    console.log(\"Chat form found:\", !!this.form);\n\n    const inputs = this.container.querySelectorAll(\".chatbot-input\");\n    this.input = inputs[0];\n    console.log(\"Chat input found:\", !!this.input);\n\n    const typingIndicators = this.container.querySelectorAll(\".chat-typing\");\n    this.typingIndicator = typingIndicators[0];\n    console.log(\"Typing indicator found:\", !!this.typingIndicator);\n\n    this.typingText = this.typingIndicator?.querySelector(\".typing-text\");\n    console.log(\"Typing text found:\", !!this.typingText);\n\n    console.log(\"Container HTML:\", this.container.innerHTML);\n\n    if (!this.messageContainer || !this.form || !this.input) {\n      const missing = [];\n      if (!this.messageContainer) missing.push(\"message-container\");\n      if (!this.form) missing.push(\"chat-form\");\n      if (!this.input) missing.push(\"chatbot-input\");\n      throw new Error(`Required UI elements not found: ${missing.join(\", \")}`);\n    }\n  }\n\n  /**\n   * Set up event listeners for UI interactions\n   * @private\n   */\n  setupEventListeners() {\n    // Handle form submissions\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        // Emit a 'userMessage' event. The ChatbotCore will handle the logic and respond.\n        this.eventBus.emit(\"userMessage\", message);\n        this.input.value = \"\";\n      }\n    });\n\n    // Listen for chatbot events and update the UI accordingly\n    this.eventBus.on(\"messageReceived\", ({ content, metadata }) => {\n      console.log(\"UI received messageReceived event:\", content, metadata);\n      this.handleAssistantMessage(content, metadata);\n    });\n\n    // Listen for partial and final messages\n    this.eventBus.on(\"partialMessage\", (content) => {\n      this.handlePartialMessage(content);\n    });\n\n    this.eventBus.on(\"finalMessage\", (fullContent) => {\n      this.handleFinalMessage(fullContent);\n    });\n\n    this.eventBus.on(\"typing\", ({ isTyping }) => {\n      if (isTyping) {\n        this.showTypingIndicator();\n      } else {\n        this.hideTypingIndicator();\n      }\n    });\n\n    this.eventBus.on(\"error\", ({ message }) => {\n      this.displayError(message);\n    });\n\n    this.eventBus.on(\"choicePresented\", ({ buttons }) => {\n      this.addButtons(buttons);\n    });\n\n    this.eventBus.on(\"carouselPresented\", ({ items }) => {\n      this.addCarousel(items);\n    });\n\n    // Reset current assistant message on end\n    this.eventBus.on(\"end\", () => {\n      this.currentAssistantMessage = null;\n      this.accumulatedContent = \"\";\n    });\n  }\n\n  /**\n   * Handle assistant messages with markdown support\n   * @private\n   * @param {string} content - The message content\n   * @param {Object} metadata - Optional metadata\n   */\n  handleAssistantMessage(content, metadata) {\n    // Determine if the message is deterministic or streamed\n    const isDeterministic = !metadata || !metadata.streamed;\n    const animate = isDeterministic ? true : true; // Change to false if needed\n    const animationSpeed = isDeterministic ? 10 : undefined; // Faster for deterministic messages\n\n    // For deterministic messages (complete), pass metadata indicating non-streamed\n    const messageMetadata = isDeterministic\n      ? { ...metadata, fromHistory: metadata?.fromHistory || false }\n      : metadata;\n\n    const htmlContent = parseMarkdown(content);\n    const message = this.createMessage(\n      \"assistant\",\n      htmlContent,\n      messageMetadata,\n      animate,\n      animationSpeed\n    );\n    this.messageContainer.appendChild(message);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Handle partial assistant messages (streamed content)\n   * @private\n   * @param {string} content - Partial message content\n   */\n  handlePartialMessage(content) {\n    this.accumulatedContent += content;\n\n    // Check for sentence-ending punctuation\n    const sentenceEndRegex = /([.!?;]\\s)|(\\n)/;\n    const match = this.accumulatedContent.match(sentenceEndRegex);\n\n    if (match) {\n      const sentenceEndIndex = match.index + match[0].length;\n      const completeSentence = this.accumulatedContent\n        .slice(0, sentenceEndIndex)\n        .trim();\n      const remaining = this.accumulatedContent.slice(sentenceEndIndex).trim();\n\n      if (this.currentAssistantMessage) {\n        // Append complete sentence to the current message\n        this.currentAssistantMessage.appendContent(\n          parseMarkdown(completeSentence)\n        );\n      } else {\n        // Create a new assistant message component\n        this.currentAssistantMessage = this.createMessage(\n          \"assistant\",\n          parseMarkdown(completeSentence),\n          null,\n          true, // animate\n          undefined // default animation speed\n        );\n        this.messageContainer.appendChild(this.currentAssistantMessage);\n      }\n\n      this.accumulatedContent = remaining;\n      this.scrollToBottom();\n    } else {\n      // No sentence boundary yet, append as is\n      if (this.currentAssistantMessage) {\n        this.currentAssistantMessage.appendContent(parseMarkdown(content));\n      } else {\n        this.currentAssistantMessage = this.createMessage(\n          \"assistant\",\n          parseMarkdown(content),\n          null,\n          true, // animate\n          undefined // default animation speed\n        );\n        this.messageContainer.appendChild(this.currentAssistantMessage);\n      }\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Handle final assistant message (complete message)\n   * @private\n   * @param {string} fullContent - The complete message content\n   */\n  handleFinalMessage(fullContent) {\n    if (this.currentAssistantMessage) {\n      // Append the remaining content\n      this.currentAssistantMessage.appendContent(parseMarkdown(fullContent));\n      this.currentAssistantMessage = null;\n      this.accumulatedContent = \"\";\n      this.scrollToBottom();\n    } else {\n      // In case finalMessage is received without a partial message\n      const htmlContent = parseMarkdown(fullContent);\n      const message = this.createMessage(\n        \"assistant\",\n        htmlContent,\n        null,\n        true,\n        undefined\n      );\n      this.messageContainer.appendChild(message);\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Create a message component\n   * @private\n   * @param {string} sender - The sender of the message ('user' or 'assistant')\n   * @param {string} content - The message content\n   * @param {Object} metadata - Optional metadata for the message\n   * @param {boolean} animate - Whether to animate the message\n   * @param {number} [animationSpeed] - Optional animation speed in ms per character\n   * @returns {MessageComponent} The created message component\n   */\n  createMessage(\n    sender,\n    content,\n    metadata = null,\n    animate = true,\n    animationSpeed\n  ) {\n    const message = document.createElement(\"message-component\");\n    message.eventBus = this.eventBus;\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n\n    if (metadata) {\n      message.setAttribute(\"metadata\", JSON.stringify(metadata));\n    }\n\n    // Set data attributes for animation\n    if (!animate) {\n      message.setAttribute(\"data-animate\", \"false\");\n    }\n\n    if (animationSpeed) {\n      message.setAttribute(\"data-animation-speed\", animationSpeed.toString());\n    }\n\n    return message;\n  }\n\n  /**\n   * Add a message to the chat using the message-component\n   * @public\n   * @param {string} sender - The sender of the message ('user' or 'assistant')\n   * @param {string} content - The message content\n   * @param {Object} metadata - Optional metadata for the message\n   * @param {boolean} fromHistory - Indicates if the message is loaded from history\n   * @param {number} [animationSpeed] - Optional animation speed in ms per character\n   */\n  addMessage(\n    sender,\n    content,\n    metadata = null,\n    fromHistory = false,\n    animationSpeed = undefined\n  ) {\n    console.log(\n      `addMessage called with sender=${sender}, content=${content}, metadata=`,\n      metadata\n    );\n\n    if (sender === \"assistant\") {\n      this.handleAssistantMessage(content, { ...metadata, fromHistory });\n    } else {\n      // For user messages, determine if it's from history or a new message\n      const animate = !fromHistory;\n      const speed = animationSpeed || (fromHistory ? 10 : undefined);\n\n      const message = this.createMessage(\n        sender,\n        content,\n        metadata,\n        animate,\n        speed\n      );\n      this.messageContainer.appendChild(message);\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Add interactive buttons to the chat using button-component\n   * @public\n   * @param {Array} buttons - Array of button data\n   * @param {boolean} fromHistory - Indicates if the buttons are loaded from history\n   */\n  addButtons(buttons, fromHistory = false) {\n    if (!Array.isArray(buttons)) {\n      console.error(\"Invalid buttons data:\", buttons);\n      return;\n    }\n\n    // Use <button-component> for each button\n    const buttonGroup = document.createElement(\"div\");\n    buttonGroup.className = \"button-group\";\n\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.eventBus = this.eventBus;\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      buttonGroup.appendChild(button);\n    });\n\n    this.messageContainer.appendChild(buttonGroup);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Add a carousel to the chat using carousel-component\n   * @public\n   * @param {Array} items - Array of carousel items\n   * @param {boolean} fromHistory - Indicates if the carousel is loaded from history\n   */\n  addCarousel(items, fromHistory = false) {\n    if (!Array.isArray(items)) {\n      console.error(\"Invalid carousel items:\", items);\n      return;\n    }\n\n    // Use <carousel-component> with a data-carousel attribute\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.eventBus = this.eventBus;\n    carousel.setAttribute(\"data-carousel\", JSON.stringify({ cards: items }));\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Show the typing indicator\n   * @public\n   */\n  showTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Hide the typing indicator\n   * @public\n   */\n  hideTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Display an error message\n   * @public\n   * @param {string} message - The error message to display\n   */\n  displayError(message) {\n    // For errors, create a div with the error message\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.textContent = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Remove all interactive elements\n   * @public\n   */\n  removeInteractiveElements() {\n    // Remove all custom components and groups of interactive elements\n    const elements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component, .button-group\"\n    );\n    elements.forEach((element) => element.remove());\n  }\n\n  /**\n   * Scroll the message container to the bottom\n   * @private\n   */\n  scrollToBottom() {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n\n  /**\n   * Clean up resources\n   * @public\n   */\n  destroy() {\n    this.eventBus.removeAllListeners();\n  }\n}\n\nexport default ChatbotUI;\n"],"names":["ChatbotUI","config","messageContainers","forms","inputs","typingIndicators","_a","missing","message","content","metadata","fullContent","isTyping","buttons","items","isDeterministic","animate","animationSpeed","messageMetadata","htmlContent","parseMarkdown","sentenceEndRegex","match","sentenceEndIndex","completeSentence","remaining","sender","fromHistory","speed","buttonGroup","buttonData","button","carousel","errorDiv","element"],"mappings":"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"}