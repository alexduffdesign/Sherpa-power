{"version":3,"file":"chatbot-main.CYk7H6hj.js","sources":["../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// /assets/scripts/chatbot/chatbot-main.js\n\nimport ChatbotCore from \"../core/chatbot-core.js\";\nimport MainChatbotUI from \"../ui/chatbot-main-ui.js\";\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * MainChatbot Class\n * Manages the Main Chatbot's interactions, conversation history, and UI updates.\n */\nclass MainChatbot {\n  /**\n   * Constructor initializes ChatbotCore and MainChatbotUI, sets up event listeners.\n   * @param {ChatbotCore} core - Instance of ChatbotCore handling API communications.\n   * @param {MainChatbotUI} ui - Instance of MainChatbotUI handling UI updates.\n   */\n  constructor(core, ui) {\n    this.core = core;\n    this.ui = ui;\n    this.historyKey = \"mainChatbotHistory\";\n    this.isLaunched = false;\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for ChatbotCore events.\n   */\n  setupEventListeners() {\n    // Listen to events emitted by ChatbotCore via EventBus\n    eventBus.on(EVENTS.MAIN_CHATBOT.MESSAGE_RECEIVED, (data) => {\n      this.ui.addMessage(\"assistant\", data.content);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.CHOICE_PRESENTED, (data) => {\n      this.ui.addButtons(data.choices);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.CAROUSEL_PRESENTED, (data) => {\n      this.ui.addCarousel(data.carouselItems);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.ERROR, (error) => {\n      this.ui.displayError(error.message);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.TYPING, (data) => {\n      if (data.isTyping) {\n        this.ui.showTypingIndicator();\n      } else {\n        this.ui.hideTypingIndicator();\n      }\n    });\n\n    // Listen for chatbot launch event\n    document.addEventListener(\"chatbotLaunch\", () => {\n      this.launch();\n    });\n  }\n\n  /**\n   * Launches the chatbot by sending a launch request.\n   */\n  launch() {\n    if (this.isLaunched) return;\n\n    this.core.sendLaunch();\n    this.isLaunched = true;\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    // Sanitize user input to prevent XSS attacks\n    const sanitizedMessage = this.sanitizeInput(message);\n    this.core.sendMessage(sanitizedMessage);\n    this.ui.addMessage(\"user\", sanitizedMessage);\n    this.saveToHistory(\"user\", sanitizedMessage);\n  }\n\n  /**\n   * Loads conversation history from localStorage and renders it in the UI.\n   */\n  loadHistory() {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n    history.forEach((entry) => {\n      this.ui.addMessage(entry.sender, entry.message);\n    });\n\n    // Check if the last message was from the assistant to retain interactive elements\n    if (history.length > 0) {\n      const lastEntry = history[history.length - 1];\n      if (lastEntry.sender === \"assistant\") {\n        // Optional: Implement logic to re-render interactive elements based on the last entry\n        // For example, if the last message included choices or a carousel, re-add them\n        // This requires storing additional metadata in the history\n      }\n    }\n  }\n\n  /**\n   * Saves a message to conversation history in localStorage.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} message - The message content.\n   */\n  saveToHistory(sender, message) {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n    history.push({ sender, message });\n    localStorage.setItem(this.historyKey, JSON.stringify(history));\n  }\n\n  /**\n   * Sanitizes user input to prevent XSS attacks.\n   * @param {string} input - The user-provided input.\n   * @returns {string} - The sanitized input.\n   */\n  sanitizeInput(input) {\n    const div = document.createElement(\"div\");\n    div.textContent = input;\n    return div.innerHTML;\n  }\n}\n\n// Initialize Main Chatbot on DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const mainChatbotContainer = document.getElementById(\"main-chatbot-ui\");\n\n  if (!mainChatbotContainer) {\n    console.error(\"Main Chatbot UI container not found\");\n    return;\n  }\n\n  // Generate or retrieve existing userID for Main Chatbot\n  let mainUserId = localStorage.getItem(\"mainChatbotUserId\");\n  if (!mainUserId) {\n    mainUserId = generateUserId(\"mainChatbot\");\n    localStorage.setItem(\"mainChatbotUserId\", mainUserId);\n  }\n\n  // Initialize ChatbotCore with the generated userID\n  const mainChatbotCore = new ChatbotCore({\n    userID: mainUserId,\n    endpoint:\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\", // Update to your actual endpoint\n    chatbotType: \"main\",\n  });\n\n  // Initialize MainChatbotUI\n  const mainChatbotUI = new MainChatbotUI(mainChatbotContainer);\n\n  // Initialize MainChatbot\n  const mainChatbot = new MainChatbot(mainChatbotCore, mainChatbotUI);\n\n  // Load conversation history\n  mainChatbot.loadHistory();\n\n  // Listen for user message submissions\n  mainChatbotUI.onUserMessage((message) => {\n    mainChatbot.sendMessage(message);\n  });\n\n  // Listen for button clicks from UI components\n  mainChatbotUI.onButtonClick((payload) => {\n    mainChatbot.sendMessage(JSON.stringify(payload));\n  });\n});\n\nexport default MainChatbot;\n"],"names":["MainChatbot","core","ui","eventBus","EVENTS","data","error","message","sanitizedMessage","history","entry","sender","input","div","mainChatbotContainer","mainUserId","generateUserId","mainChatbotCore","ChatbotCore","mainChatbotUI","MainChatbotUI","mainChatbot","payload"],"mappings":"gJAYA,MAAMA,CAAY,CAMhB,YAAYC,EAAMC,EAAI,CACpB,KAAK,KAAOD,EACZ,KAAK,GAAKC,EACV,KAAK,WAAa,qBAClB,KAAK,WAAa,GAClB,KAAK,oBAAmB,CACzB,CAKD,qBAAsB,CAEpBC,EAAS,GAAGC,EAAO,aAAa,iBAAmBC,GAAS,CAC1D,KAAK,GAAG,WAAW,YAAaA,EAAK,OAAO,CAClD,CAAK,EAEDF,EAAS,GAAGC,EAAO,aAAa,iBAAmBC,GAAS,CAC1D,KAAK,GAAG,WAAWA,EAAK,OAAO,CACrC,CAAK,EAEDF,EAAS,GAAGC,EAAO,aAAa,mBAAqBC,GAAS,CAC5D,KAAK,GAAG,YAAYA,EAAK,aAAa,CAC5C,CAAK,EAEDF,EAAS,GAAGC,EAAO,aAAa,MAAQE,GAAU,CAChD,KAAK,GAAG,aAAaA,EAAM,OAAO,CACxC,CAAK,EAEDH,EAAS,GAAGC,EAAO,aAAa,OAASC,GAAS,CAC5CA,EAAK,SACP,KAAK,GAAG,sBAER,KAAK,GAAG,qBAEhB,CAAK,EAGD,SAAS,iBAAiB,gBAAiB,IAAM,CAC/C,KAAK,OAAM,CACjB,CAAK,CACF,CAKD,QAAS,CACH,KAAK,aAET,KAAK,KAAK,aACV,KAAK,WAAa,GACnB,CAMD,YAAYE,EAAS,CAEnB,MAAMC,EAAmB,KAAK,cAAcD,CAAO,EACnD,KAAK,KAAK,YAAYC,CAAgB,EACtC,KAAK,GAAG,WAAW,OAAQA,CAAgB,EAC3C,KAAK,cAAc,OAAQA,CAAgB,CAC5C,CAKD,aAAc,CACZ,MAAMC,EAAU,KAAK,MAAM,aAAa,QAAQ,KAAK,UAAU,CAAC,GAAK,GACrEA,EAAQ,QAASC,GAAU,CACzB,KAAK,GAAG,WAAWA,EAAM,OAAQA,EAAM,OAAO,CACpD,CAAK,EAGGD,EAAQ,OAAS,GACDA,EAAQA,EAAQ,OAAS,CAAC,EAC9B,MAMjB,CAOD,cAAcE,EAAQJ,EAAS,CAC7B,MAAME,EAAU,KAAK,MAAM,aAAa,QAAQ,KAAK,UAAU,CAAC,GAAK,GACrEA,EAAQ,KAAK,CAAE,OAAAE,EAAQ,QAAAJ,CAAS,CAAA,EAChC,aAAa,QAAQ,KAAK,WAAY,KAAK,UAAUE,CAAO,CAAC,CAC9D,CAOD,cAAcG,EAAO,CACnB,MAAMC,EAAM,SAAS,cAAc,KAAK,EACxC,OAAAA,EAAI,YAAcD,EACXC,EAAI,SACZ,CACH,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMC,EAAuB,SAAS,eAAe,iBAAiB,EAEtE,GAAI,CAACA,EAAsB,CACzB,QAAQ,MAAM,qCAAqC,EACnD,MACD,CAGD,IAAIC,EAAa,aAAa,QAAQ,mBAAmB,EACpDA,IACHA,EAAaC,EAAe,aAAa,EACzC,aAAa,QAAQ,oBAAqBD,CAAU,GAItD,MAAME,EAAkB,IAAIC,EAAY,CACtC,OAAQH,EACR,SACE,gFACF,YAAa,MACjB,CAAG,EAGKI,EAAgB,IAAIC,EAAcN,CAAoB,EAGtDO,EAAc,IAAIrB,EAAYiB,EAAiBE,CAAa,EAGlEE,EAAY,YAAW,EAGvBF,EAAc,cAAeZ,GAAY,CACvCc,EAAY,YAAYd,CAAO,CACnC,CAAG,EAGDY,EAAc,cAAeG,GAAY,CACvCD,EAAY,YAAY,KAAK,UAAUC,CAAO,CAAC,CACnD,CAAG,CACH,CAAC"}