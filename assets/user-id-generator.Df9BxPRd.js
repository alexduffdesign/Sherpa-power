import{E as o}from"./chatbot-core-file.DqvJXvYX.js";class r extends o{}const s=new r,c={MAIN_CHATBOT:{MESSAGE_RECEIVED:"mainChatbot:messageReceived",TYPING:"mainChatbot:typing",CHOICE_PRESENTED:"mainChatbot:choicePresented",CAROUSEL_PRESENTED:"mainChatbot:carouselPresented",ERROR:"mainChatbot:error"},SECTION_CHATBOT:{MESSAGE_RECEIVED:"sectionChatbot:messageReceived",DEVICE_ANSWER:"sectionChatbot:deviceAnswer",CHOICE_PRESENTED:"sectionChatbot:choicePresented",CAROUSEL_PRESENTED:"sectionChatbot:carouselPresented",ERROR:"sectionChatbot:error"}};class h{constructor({userID:e,endpoint:t,chatbotType:n}){if(!e)throw new Error("ChatbotCore requires a userID.");if(!t)throw new Error("ChatbotCore requires an endpoint URL.");if(!n)throw new Error('ChatbotCore requires a chatbotType ("main" or "section").');this.userID=e,this.endpoint=t,this.chatbotType=n,this.eventNamespace=n==="main"?"MAIN_CHATBOT":"SECTION_CHATBOT",this.eventPrefix=n==="main"?"mainChatbot":"sectionChatbot",this.eventHandlers={},this.initialize()}initialize(){this.setupSSE()}setupSSE(){const e={userID:this.userID,action:{},config:{}};fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(t=>{if(!t.ok)throw new Error(`Gadget API responded with status ${t.status}`);if(typeof EventSource>"u")throw new Error("EventSource is not supported in this browser.");const n=`${this.endpoint}?userID=${encodeURIComponent(this.userID)}`;this.eventSource=new EventSource(n,{withCredentials:!0}),this.eventSource.onmessage=this.handleIncomingMessage.bind(this),this.eventSource.onerror=this.handleError.bind(this)}).catch(t=>{console.error("Failed to establish SSE connection:",t),s.emit(`${this.eventPrefix}:error`,{message:t.message})})}handleIncomingMessage(e){try{const t=JSON.parse(e.data);if(!t.type||!t.payload)throw new Error("Invalid data format received from Gadget API.");switch(t.type){case"trace":this.processTrace(t.payload);break;case"end":this.closeConnection();break;case"error":s.emit(`${this.eventPrefix}:error`,{message:t.payload.message}),this.closeConnection();break;default:console.warn(`Unknown data type received: ${t.type}`)}}catch(t){console.error("Error processing incoming message:",t),s.emit(`${this.eventPrefix}:error`,{message:t.message})}}processTrace(e){if(!e.type){console.warn("Trace without type received:",e);return}switch(e.type){case"message":s.emit(`${this.eventPrefix}:messageReceived`,{content:e.payload.message});break;case"choice":s.emit(`${this.eventPrefix}:choicePresented`,{choices:e.payload.choices});break;case"carousel":s.emit(`${this.eventPrefix}:carouselPresented`,{carouselItems:e.payload.items});break;case"device_answer":s.emit(`${this.eventPrefix}:deviceAnswer`,{devices:e.payload.devices});break;case"typing":e.payload.isTyping?s.emit(`${this.eventPrefix}:typing`,{isTyping:!0}):s.emit(`${this.eventPrefix}:typing`,{isTyping:!1});break;default:console.warn(`Unhandled trace type: ${e.type}`)}}handleError(e){console.error("SSE connection error:",e),s.emit(`${this.eventPrefix}:error`,{message:"Connection error with Voiceflow API."}),this.closeConnection()}sendLaunch(e={}){const t={action:{type:"launch",payload:e},config:{}};this.sendAction(t)}sendMessage(e){const t={action:{type:"text",payload:{message:e}},config:{}};this.sendAction(t)}sendAction(e){const t={userID:this.userID,action:e.action,config:e.config};fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"}).then(n=>{if(!n.ok)throw new Error(`Gadget API responded with status ${n.status}`)}).catch(n=>{console.error("Failed to send action to Gadget API:",n),s.emit(`${this.eventPrefix}:error`,{message:n.message})})}closeConnection(){this.eventSource&&(this.eventSource.close(),console.log("SSE connection closed."))}destroy(){this.closeConnection(),s.removeAllListeners(`${this.eventPrefix}:messageReceived`),s.removeAllListeners(`${this.eventPrefix}:choicePresented`),s.removeAllListeners(`${this.eventPrefix}:carouselPresented`),s.removeAllListeners(`${this.eventPrefix}:deviceAnswer`),s.removeAllListeners(`${this.eventPrefix}:error`),s.removeAllListeners(`${this.eventPrefix}:typing`)}}function d(i){const e=Date.now().toString(36)+Math.random().toString(36).substr(2,9);return`${i}-${e}`}export{h as C,c as E,s as e,d as g};
//# sourceMappingURL=user-id-generator.Df9BxPRd.js.map
