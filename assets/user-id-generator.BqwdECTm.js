import{E as u}from"./chatbot-core-file.DqvJXvYX.js";class b extends u{}const t=new b,y={MAIN_CHATBOT:{MESSAGE_RECEIVED:"mainChatbot:messageReceived",TYPING:"mainChatbot:typing",CHOICE_PRESENTED:"mainChatbot:choicePresented",CAROUSEL_PRESENTED:"mainChatbot:carouselPresented",ERROR:"mainChatbot:error"},SECTION_CHATBOT:{MESSAGE_RECEIVED:"sectionChatbot:messageReceived",DEVICE_ANSWER:"sectionChatbot:deviceAnswer",CHOICE_PRESENTED:"sectionChatbot:choicePresented",CAROUSEL_PRESENTED:"sectionChatbot:carouselPresented",ERROR:"sectionChatbot:error"}};class P{constructor({userID:e,endpoint:s,chatbotType:n}){if(!e)throw new Error("ChatbotCore requires a userID.");if(!s)throw new Error("ChatbotCore requires an endpoint URL.");if(!n)throw new Error('ChatbotCore requires a chatbotType ("main" or "section").');this.userID=e,this.endpoint=s,this.chatbotType=n,this.eventPrefix=n==="main"?"mainChatbot":"sectionChatbot",this.abortController=null,this.initialize()}initialize(){}sendLaunch(e={}){const s={action:{type:"launch",payload:e},config:{}};this.sendAction(s)}sendMessage(e){const s={action:{type:"text",payload:{message:e}},config:{}};this.sendAction(s)}async sendAction(e){this.abortController=new AbortController;const{signal:s}=this.abortController;try{const n=await fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,action:e.action,config:e.config}),credentials:"include",signal:s});if(!n.ok)throw new Error(`Gadget API responded with status ${n.status}`);const E=n.body.getReader(),f=new TextDecoder("utf-8");let a="";for(;;){const{done:m,value:p}=await E.read();if(m){t.emit(`${this.eventPrefix}:end`,{});break}a+=f.decode(p,{stream:!0});const l=a.split(`

`);a=l.pop(),l.forEach(i=>{if(i.trim()!=="")try{const r=i.split(`
`),h=r.find(c=>c.startsWith("event:")),v=r.find(c=>c.startsWith("data:")),d=h?h.split(":")[1].trim():"trace",C=v?JSON.parse(i.substring(i.indexOf("data:")+5).trim()):null;d==="trace"?this.processTrace(C):d==="end"&&t.emit(`${this.eventPrefix}:end`,{})}catch(r){console.error("Error parsing SSE event:",r)}})}}catch(n){n.name==="AbortError"?console.warn("SSE connection aborted"):(console.error("SSE connection error:",n),t.emit(`${this.eventPrefix}:error`,{message:n.message}))}finally{this.abortController=null,t.emit(`${this.eventPrefix}:end`,{})}}processTrace(e){if(!e.type){console.warn("Trace without type received:",e);return}switch(e.type){case"text":console.log("Text received choice trace:",e),t.emit(`${this.eventPrefix}:messageReceived`,{content:e.payload.message});break;case"choice":console.log("Choice received choice trace:",e),t.emit(`${this.eventPrefix}:choicePresented`,{buttons:e.payload.buttons});break;case"carousel":t.emit(`${this.eventPrefix}:carouselPresented`,{carouselItems:e.payload.items});break;case"device_answer":t.emit(`${this.eventPrefix}:deviceAnswer`,{devices:e.payload.devices});break;case"typing":e.payload.isTyping?t.emit(`${this.eventPrefix}:typing`,{isTyping:!0}):t.emit(`${this.eventPrefix}:typing`,{isTyping:!1});break;default:console.warn(`Unhandled trace type: ${e.type}`)}}closeConnection(){this.abortController&&(this.abortController.abort(),console.log("SSE connection closed."))}destroy(){this.closeConnection(),t.removeAllListeners(`${this.eventPrefix}:messageReceived`),t.removeAllListeners(`${this.eventPrefix}:choicePresented`),t.removeAllListeners(`${this.eventPrefix}:carouselPresented`),t.removeAllListeners(`${this.eventPrefix}:deviceAnswer`),t.removeAllListeners(`${this.eventPrefix}:error`),t.removeAllListeners(`${this.eventPrefix}:typing`),t.removeAllListeners(`${this.eventPrefix}:end`)}}function w(o){const e=Date.now().toString(36)+Math.random().toString(36).substr(2,9);return`${o}-${e}`}export{P as C,y as E,t as e,w as g};
//# sourceMappingURL=user-id-generator.BqwdECTm.js.map
