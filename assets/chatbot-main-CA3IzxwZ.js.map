{"version":3,"file":"chatbot-main-CA3IzxwZ.js","sources":["../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// chatbot-main.js\n\nimport { ChatbotCore } from \"./chatbot-core-file.js\";\n\nconsole.log(\"MainChatbot module loading\");\n\nclass MainChatbot {\n  constructor(element, config) {\n    console.log(\"MainChatbot constructor called with config:\", config);\n    this.element = element;\n    this.voiceflowEndpoint = config.voiceflowEndpoint;\n\n    this.core = new ChatbotCore({ apiEndpoint: this.voiceflowEndpoint });\n    console.log(\"ChatbotCore instance created:\", this.core);\n\n    this.conversationHistory = [];\n    this.hasLaunched = localStorage.getItem(\"chatHasLaunched\") === \"true\";\n\n    // Make sure eventListenersAttached starts as false\n    this.eventListenersAttached = false;\n\n    this.initializeElements();\n    this.setupEventListeners();\n\n    if (this.hasLaunched) {\n      this.loadConversationFromStorage();\n      this.displaySavedConversation();\n    }\n  }\n\n  initializeElements() {\n    console.log(\"MainChatbot initializeElements called\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    const typingIndicator = this.element.querySelector(\".chat-typing\");\n\n    if (!messageContainer || !typingIndicator) {\n      console.error(\"Required DOM elements not found\");\n      return;\n    }\n\n    this.core.setDOMElements(messageContainer, typingIndicator);\n    console.log(\"DOM elements set in ChatbotCore:\", this.core);\n  }\n\n  setupEventListeners() {\n    if (this.eventListenersAttached) return;\n\n    console.log(\"MainChatbot setupEventListeners called\");\n    const form = this.element.querySelector(\"#chatForm\");\n    const input = this.element.querySelector(\"#userInput\");\n\n    if (!form || !input) {\n      console.error(\"Chat form or input not found\");\n      return;\n    }\n\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const message = input.value.trim();\n      if (message) {\n        console.log(\"Form submitted with message:\", message);\n        await this.handleUserMessage(message);\n        input.value = \"\";\n      }\n    });\n\n    this.eventListenersAttached = true;\n  }\n\n  async handleUserMessage(message) {\n    this.core.addMessage(\"user\", message);\n    this.conversationHistory.push({ type: \"user\", message: message });\n    this.saveConversationToStorage();\n\n    this.core.showTypingIndicator();\n    try {\n      const response = await this.core.sendMessage(message);\n      console.log(\"Response from sendMessage:\", response);\n      await this.handleAgentResponse(response);\n    } catch (error) {\n      console.error(\"Error in send message:\", error);\n    } finally {\n      this.core.hideTypingIndicator();\n    }\n  }\n\n  loadConversationFromStorage() {\n    const savedConversation = localStorage.getItem(\"chatConversation\");\n    this.conversationHistory = savedConversation\n      ? JSON.parse(savedConversation)\n      : [];\n    console.log(\"Loaded conversation from storage:\", this.conversationHistory);\n  }\n\n  saveConversationToStorage() {\n    localStorage.setItem(\n      \"chatConversation\",\n      JSON.stringify(this.conversationHistory)\n    );\n    console.log(\"Saved conversation to storage\");\n  }\n\n  displaySavedConversation() {\n    console.log(\"Displaying saved conversation\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      messageContainer.innerHTML = \"\"; // Clear existing messages\n      this.conversationHistory.forEach((turn) => {\n        this.core.addMessage(turn.type, turn.message);\n      });\n      this.core.scrollToBottom();\n    } else {\n      console.error(\"Message container not found\");\n    }\n  }\n\n  async initializeChat() {\n    console.log(\"Initializing chat\");\n    if (!this.hasLaunched) {\n      console.log(\"Initializing chat for the first time\");\n      await this.sendLaunch();\n    }\n    console.log(\"Chat initialized\");\n  }\n\n  async sendLaunch() {\n    console.log(\"Sending launch request\");\n    this.core.showTypingIndicator();\n    try {\n      const response = await this.core.sendLaunch();\n      await this.handleAgentResponse(response);\n      this.hasLaunched = true;\n      localStorage.setItem(\"chatHasLaunched\", \"true\");\n    } catch (error) {\n      console.error(\"Error in send launch:\", error);\n    } finally {\n      this.core.hideTypingIndicator();\n    }\n  }\n\n  async handleAgentResponse(response) {\n    console.log(\"Handling agent response:\", response);\n    for (const trace of response) {\n      if (trace.type === \"text\") {\n        this.core.addMessage(\"assistant\", trace.payload.message);\n        this.conversationHistory.push({\n          type: \"assistant\",\n          message: trace.payload.message,\n        });\n      } else if (trace.type === \"choice\") {\n        this.core.addButtons(trace.payload.buttons);\n      } else if (trace.type === \"carousel\") {\n        this.addCarousel(trace.payload);\n      } else {\n        console.log(\"Unknown trace type:\", trace.type);\n      }\n    }\n    this.saveConversationToStorage();\n  }\n\n  // < Carousel JS > //\n\n  addCarousel(carouselData) {\n    console.log(\"Adding carousel:\", carouselData);\n    const carouselElement = document.createElement(\"div\");\n    carouselElement.className = \"carousel\";\n    carouselElement.innerHTML = `\n    <div class=\"carousel__container\">\n      <!-- Carousel items will be dynamically added here -->\n    </div>\n    <button class=\"carousel__button carousel__button--left\" aria-label=\"Previous slide\">\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    </button>\n    <button class=\"carousel__button carousel__button--right\" aria-label=\"Next slide\">\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M9 18L15 12L9 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    </button>\n  `;\n\n    const carousel = new Carousel(carouselElement);\n\n    for (let i = 0; i < carouselData.cards.length; i += 2) {\n      const itemContent = carouselData.cards\n        .slice(i, i + 2)\n        .map(\n          (card) => `\n      <div class=\"carousel__item-wrapper\">\n        <div class=\"carousel__item-content\">\n          <img src=\"${card.imageUrl}\" alt=\"${card.title}\" class=\"carousel__item-image\">\n          <h6 class=\"carousel__item-title\">${card.title}</h6>\n          <p class=\"carousel__item-description\">${card.description.text}</p>\n          <button class=\"button carousel__item-button\" data-button-index=\"0\">${card.buttons[0].name}</button>\n        </div>\n      </div>\n    `\n        )\n        .join(\"\");\n\n      carousel.addItem(itemContent);\n    }\n\n    const buttons = carouselElement.querySelectorAll(\".carousel__item-button\");\n    buttons.forEach((button, index) => {\n      button.addEventListener(\"click\", async () => {\n        const cardIndex = Math.floor(\n          index / carouselData.cards[0].buttons.length\n        );\n        const buttonIndex = index % carouselData.cards[0].buttons.length;\n        const buttonData = carouselData.cards[cardIndex].buttons[buttonIndex];\n        try {\n          const response = await this.core.handleButtonClick(buttonData);\n          await this.handleAgentResponse(response);\n        } catch (error) {\n          console.error(\"Error handling carousel button click:\", error);\n        }\n      });\n    });\n\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      messageContainer.appendChild(carouselElement);\n      this.core.scrollToBottom();\n    } else {\n      console.error(\"Message container not found when adding carousel\");\n    }\n  }\n}\n\nclass Carousel {\n  constructor(element) {\n    this.element = element;\n    this.container = element.querySelector(\".carousel__container\");\n    this.leftButton = element.querySelector(\".carousel__button--left\");\n    this.rightButton = element.querySelector(\".carousel__button--right\");\n    this.items = [];\n    this.currentIndex = 0;\n\n    this.leftButton.addEventListener(\"click\", () => this.move(\"left\"));\n    this.rightButton.addEventListener(\"click\", () => this.move(\"right\"));\n  }\n\n  addItem(content) {\n    const item = document.createElement(\"div\");\n    item.className = \"carousel__item\";\n    item.innerHTML = content;\n    this.container.appendChild(item);\n    this.items.push(item);\n    this.updateVisibility();\n  }\n\n  move(direction) {\n    if (direction === \"left\") {\n      this.currentIndex = Math.max(0, this.currentIndex - 1);\n    } else {\n      this.currentIndex = Math.min(\n        this.items.length - 1,\n        this.currentIndex + 1\n      );\n    }\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  updatePosition() {\n    const offset = -this.currentIndex * 100;\n    this.container.style.transform = `translateX(${offset}%)`;\n  }\n\n  updateVisibility() {\n    this.leftButton.style.display = this.currentIndex === 0 ? \"none\" : \"flex\";\n    this.rightButton.style.display =\n      this.currentIndex === this.items.length - 1 ? \"none\" : \"flex\";\n  }\n}\nconsole.log(\"MainChatbot module loaded\");\n\nexport default MainChatbot;\n"],"names":[],"mappings":"wCAIA,QAAQ,IAAI,4BAA4B,EAiRxC,QAAQ,IAAI,2BAA2B"}