import{C as i}from"./chatbot-core-file.2vV7cJav.js";console.log("MainChatbot module loading");class l{constructor(e,t){console.log("MainChatbot constructor called with config:",t),this.element=e,this.voiceflowEndpoint=t.voiceflowEndpoint,this.core=new i({proxyEndpoint:"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming",userIDPrefix:"mainChatbot"}),console.log("ChatbotCore instance created:",this.core),this.conversationHistory=[],this.hasLaunched=localStorage.getItem("chatHasLaunched")==="true",this.eventListenersAttached=!1,this.initializeElements(),this.setupEventListeners(),this.hasLaunched&&(this.loadConversationFromStorage(),this.displaySavedConversation())}initializeElements(){console.log("MainChatbot initializeElements called");const e=this.element.querySelector("#messageContainer"),t=this.element.querySelector(".chat-typing"),s=this.element.closest("x-drawer");let o=null;if(s&&s.shadowRoot&&(o=s.shadowRoot.querySelector('[part="body"]')),!e||!t||!o){console.error("Required DOM elements not found");return}this.core.setDOMElements(e,t,o),console.log("DOM elements set in ChatbotCore:",this.core)}setupEventListeners(){if(this.eventListenersAttached)return;console.log("MainChatbot setupEventListeners called");const e=this.element.querySelector("#chatForm"),t=this.element.querySelector("#userInput");if(!e||!t){console.error("Chat form or input not found");return}e.addEventListener("submit",async o=>{o.preventDefault();const n=t.value.trim();n&&(console.log("Form submitted with message:",n),t.value="",await this.handleUserMessage(n))}),this.element.addEventListener("click",async o=>{if(o.target.matches(".button-container button")){const n=JSON.parse(o.target.dataset.buttonData);try{const a=await this.core.handleButtonClick(n);this.conversationHistory.push({type:"user",message:n.name}),this.saveConversationToStorage()}catch(a){console.error("Error handling button click:",a)}}});const s=this.element.querySelector(".back-to-start");s?s.addEventListener("click",()=>this.jumpToMainMenu()):console.error("Jump to start button not found"),this.core.on("message",this.handleMessage.bind(this)),this.core.on("typing",this.handleTyping.bind(this)),this.core.on("updateMessage",this.handleUpdateMessage.bind(this)),this.core.on("error",this.handleError.bind(this)),this.eventListenersAttached=!0}async initializeChat(){if(console.log("Initializing chat"),this.hasLaunched)this.loadConversationFromStorage(),this.displaySavedConversation();else try{console.log("Initializing chat for the first time"),await this.sendLaunch(),this.hasLaunched=!0,localStorage.setItem("chatHasLaunched","true")}catch(e){console.error("Error during chat initialization:",e)}this.core.scrollToBottom(),console.log("Chat initialized")}async sendLaunch(e={}){console.log("Sending main chatbot launch request");try{await this.core.handleStreaming({action:{type:"launch"},config:{completion_events:!0}})}catch(t){console.error("Error in main chatbot send launch:",t),this.core.addMessage("assistant","Failed to initialize the chatbot. Please try again later.")}}async handleUserMessage(e){this.core.addMessage("user",e),this.conversationHistory.push({type:"user",message:e}),this.saveConversationToStorage(),this.core.showTypingIndicator();try{await this.core.sendMessage(e)}catch(t){console.error("Error in send message:",t)}finally{this.core.hideTypingIndicator(),this.core.scrollToBottom()}}loadConversationFromStorage(){const e=localStorage.getItem("chatConversation");this.conversationHistory=e?JSON.parse(e):[],console.log("Loaded conversation from storage:",this.conversationHistory)}saveConversationToStorage(){localStorage.setItem("chatConversation",JSON.stringify(this.conversationHistory)),console.log("Saved conversation to storage")}displaySavedConversation(){console.log("Displaying saved conversation");const e=this.element.querySelector("#messageContainer");e?(e.innerHTML="",this.conversationHistory.forEach((t,s)=>{if(t.type==="user"||t.type==="assistant")this.core.addMessage(t.type,t.message);else if(t.type==="choice"){const o=this.conversationHistory[s+1];(!o||o.type!=="user")&&this.core.addButtons(t.buttons)}else if(t.type==="carousel"){const o=this.conversationHistory[s+1];(!o||o.type!=="user")&&this.core.addCarousel(t.data)}else t.type==="visual"&&t.data.visualType==="image"&&this.core.addVisualImage(t.data)}),this.core.scrollToBottom()):console.error("Message container not found")}async jumpToMainMenu(){console.log("MainChatbot jumpToMainMenu called"),this.core.showTypingIndicator();try{await this.core.handleStreaming({action:{type:"event",payload:{event:{name:"main_menu"}}},config:{completion_events:!0}})}catch(e){console.error("Error in jumpToMainMenu:",e),this.core.addMessage("assistant","Sorry, I couldn't navigate to the main menu. Please try again.")}finally{this.core.hideTypingIndicator(),this.core.scrollToBottom()}}handleMessage({sender:e,content:t}){this.core.addMessage(e,t)}handleTyping(e){e?this.core.showTypingIndicator():this.core.hideTypingIndicator()}handleUpdateMessage(e){this.core.updateLatestMessage(e)}handleError(e){this.core.addMessage("assistant",e)}handleProductRedirect(e){if(!e){console.error("Cannot redirect: Product handle is undefined or empty");return}const s=`https://www.sherpapower.co.uk/products/${encodeURIComponent(e)}`;console.log(`Redirecting to product page: ${s}`),window.location.href=s}}export{l as M};
//# sourceMappingURL=chatbot-main.2Krul-qb.js.map
