{"version":3,"file":"streaming-markdown-parser.DIrdmlP7.js","sources":["../frontend/utils/streaming-markdown-parser.js"],"sourcesContent":["// /assets/scripts/chatbot/utils/streaming-markdown-parser.js\n\nexport class StreamingMarkdownParser {\n  constructor(onStableSegment) {\n    this.buffer = \"\";\n    this.onStableSegment = onStableSegment;\n    this.state = \"NORMAL\";\n    this.currentLine = \"\";\n    this.listType = null; // 'ul' or 'ol'\n    this.listItems = [];\n  }\n\n  appendText(text) {\n    this.buffer += text;\n    this.processBuffer();\n  }\n\n  end() {\n    this.processBuffer(true);\n    this.flush();\n  }\n\n  processBuffer(isEnd = false) {\n    while (this.buffer.length > 0) {\n      const char = this.buffer[0];\n      this.buffer = this.buffer.slice(1);\n      this.currentLine += char;\n\n      if (char === \"\\n\") {\n        const line = this.currentLine.trim();\n        this.currentLine = \"\";\n        this.handleLine(line);\n      }\n\n      if (isEnd && this.currentLine.trim() !== \"\") {\n        const line = this.currentLine.trim();\n        this.currentLine = \"\";\n        this.handleLine(line);\n      }\n    }\n  }\n\n  handleLine(line) {\n    if (line.startsWith(\"#\")) {\n      const match = line.match(/^(#{1,6})\\s+(.*)$/);\n      if (match) {\n        const level = match[1].length;\n        const content = match[2];\n        const html = `<h${level}>${this.parseInlineMarkdown(\n          content\n        )}</h${level}>`;\n        this.onStableSegment(html);\n        return;\n      }\n    }\n\n    if (line.startsWith(\"- \") || line.startsWith(\"* \")) {\n      if (this.listType !== \"ul\") {\n        this.flushList();\n        this.listType = \"ul\";\n      }\n      const item = line.slice(2).trim();\n      this.listItems.push(`<li>${this.parseInlineMarkdown(item)}</li>`);\n      return;\n    }\n\n    const orderedListMatch = line.match(/^(\\d+)\\.\\s+(.*)$/);\n    if (orderedListMatch) {\n      if (this.listType !== \"ol\") {\n        this.flushList();\n        this.listType = \"ol\";\n      }\n      const item = orderedListMatch[2].trim();\n      this.listItems.push(`<li>${this.parseInlineMarkdown(item)}</li>`);\n      return;\n    }\n\n    if (line === \"\") {\n      this.flush();\n      return;\n    }\n\n    if (this.listType) {\n      this.flushList();\n    }\n\n    // Handle paragraphs\n    const html = `<p>${this.parseInlineMarkdown(line)}</p>`;\n    this.onStableSegment(html);\n  }\n\n  flushList() {\n    if (this.listItems.length > 0 && this.listType) {\n      const html = `<${this.listType}>${this.listItems.join(\"\")}</${\n        this.listType\n      }>`;\n      this.onStableSegment(html);\n      this.listItems = [];\n      this.listType = null;\n    }\n  }\n\n  flush() {\n    this.flushList();\n    if (this.currentLine.trim() !== \"\") {\n      const html = `<p>${this.parseInlineMarkdown(\n        this.currentLine.trim()\n      )}</p>`;\n      this.onStableSegment(html);\n      this.currentLine = \"\";\n    }\n  }\n\n  parseInlineMarkdown(text) {\n    // Handle bold (** or __)\n    text = text.replace(/(\\*\\*|__)(.*?)\\1/g, \"<strong>$2</strong>\");\n\n    // Handle italics (* or _)\n    text = text.replace(/(\\*|_)(.*?)\\1/g, \"<em>$2</em>\");\n\n    // Handle URLs [text](url)\n    text = text.replace(\n      /\\[([^\\]]+)\\]\\(([^)]+)\\)/g,\n      '<a href=\"$2\" target=\"_blank\">$1</a>'\n    );\n\n    return text;\n  }\n}\n"],"names":["StreamingMarkdownParser","onStableSegment","text","isEnd","char","line","match","level","content","html","item","orderedListMatch"],"mappings":"AAEO,MAAMA,CAAwB,CACnC,YAAYC,EAAiB,CAC3B,KAAK,OAAS,GACd,KAAK,gBAAkBA,EACvB,KAAK,MAAQ,SACb,KAAK,YAAc,GACnB,KAAK,SAAW,KAChB,KAAK,UAAY,EAClB,CAED,WAAWC,EAAM,CACf,KAAK,QAAUA,EACf,KAAK,cAAa,CACnB,CAED,KAAM,CACJ,KAAK,cAAc,EAAI,EACvB,KAAK,MAAK,CACX,CAED,cAAcC,EAAQ,GAAO,CAC3B,KAAO,KAAK,OAAO,OAAS,GAAG,CAC7B,MAAMC,EAAO,KAAK,OAAO,CAAC,EAI1B,GAHA,KAAK,OAAS,KAAK,OAAO,MAAM,CAAC,EACjC,KAAK,aAAeA,EAEhBA,IAAS;AAAA,EAAM,CACjB,MAAMC,EAAO,KAAK,YAAY,KAAI,EAClC,KAAK,YAAc,GACnB,KAAK,WAAWA,CAAI,CACrB,CAED,GAAIF,GAAS,KAAK,YAAY,KAAI,IAAO,GAAI,CAC3C,MAAME,EAAO,KAAK,YAAY,KAAI,EAClC,KAAK,YAAc,GACnB,KAAK,WAAWA,CAAI,CACrB,CACF,CACF,CAED,WAAWA,EAAM,CACf,GAAIA,EAAK,WAAW,GAAG,EAAG,CACxB,MAAMC,EAAQD,EAAK,MAAM,mBAAmB,EAC5C,GAAIC,EAAO,CACT,MAAMC,EAAQD,EAAM,CAAC,EAAE,OACjBE,EAAUF,EAAM,CAAC,EACjBG,EAAO,KAAKF,CAAK,IAAI,KAAK,oBAC9BC,CACV,CAAS,MAAMD,CAAK,IACZ,KAAK,gBAAgBE,CAAI,EACzB,MACD,CACF,CAED,GAAIJ,EAAK,WAAW,IAAI,GAAKA,EAAK,WAAW,IAAI,EAAG,CAC9C,KAAK,WAAa,OACpB,KAAK,UAAS,EACd,KAAK,SAAW,MAElB,MAAMK,EAAOL,EAAK,MAAM,CAAC,EAAE,KAAI,EAC/B,KAAK,UAAU,KAAK,OAAO,KAAK,oBAAoBK,CAAI,CAAC,OAAO,EAChE,MACD,CAED,MAAMC,EAAmBN,EAAK,MAAM,kBAAkB,EACtD,GAAIM,EAAkB,CAChB,KAAK,WAAa,OACpB,KAAK,UAAS,EACd,KAAK,SAAW,MAElB,MAAMD,EAAOC,EAAiB,CAAC,EAAE,KAAI,EACrC,KAAK,UAAU,KAAK,OAAO,KAAK,oBAAoBD,CAAI,CAAC,OAAO,EAChE,MACD,CAED,GAAIL,IAAS,GAAI,CACf,KAAK,MAAK,EACV,MACD,CAEG,KAAK,UACP,KAAK,UAAS,EAIhB,MAAMI,EAAO,MAAM,KAAK,oBAAoBJ,CAAI,CAAC,OACjD,KAAK,gBAAgBI,CAAI,CAC1B,CAED,WAAY,CACV,GAAI,KAAK,UAAU,OAAS,GAAK,KAAK,SAAU,CAC9C,MAAMA,EAAO,IAAI,KAAK,QAAQ,IAAI,KAAK,UAAU,KAAK,EAAE,CAAC,KACvD,KAAK,QACN,IACD,KAAK,gBAAgBA,CAAI,EACzB,KAAK,UAAY,GACjB,KAAK,SAAW,IACjB,CACF,CAED,OAAQ,CAEN,GADA,KAAK,UAAS,EACV,KAAK,YAAY,KAAI,IAAO,GAAI,CAClC,MAAMA,EAAO,MAAM,KAAK,oBACtB,KAAK,YAAY,KAAM,CACxB,CAAA,OACD,KAAK,gBAAgBA,CAAI,EACzB,KAAK,YAAc,EACpB,CACF,CAED,oBAAoBP,EAAM,CAExB,OAAAA,EAAOA,EAAK,QAAQ,oBAAqB,qBAAqB,EAG9DA,EAAOA,EAAK,QAAQ,iBAAkB,aAAa,EAGnDA,EAAOA,EAAK,QACV,2BACA,qCACN,EAEWA,CACR,CACH"}