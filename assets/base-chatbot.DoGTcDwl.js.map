{"version":3,"file":"base-chatbot.DoGTcDwl.js","sources":["../frontend/utils/user-id-generator.js","../frontend/baseChatbot/base-chatbot.js","../frontend/baseChatbot/base-chatbot-ui.js","../frontend/utils/event-constants.js","../frontend/utils/event-bus.js","../frontend/mainChatbot/chatbot-main-ui.js","../frontend/mainChatbot/chatbot-main.js","../frontend/sectionChatbot/chatbot-section-ui.js","../frontend/sectionChatbot/chatbot-section.js","../frontend/components/ui/button-component.js","../frontend/components/ui/message-component.js","../frontend/components/ui/carousel-component.js","../frontend/components/ui/chatbot-components.js"],"sourcesContent":["/**\n * Generates a unique user ID with the specified prefix.\n * @param {string} prefix - The prefix indicating the chatbot type ('mainChatbot' or 'sectionChatbot').\n * @returns {string} - The generated unique user ID.\n */\nexport function generateUserId(prefix) {\n  const uniquePart =\n    Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n  return `${prefix}-${uniquePart}`;\n}\n","import EventEmitter from \"eventemitter3\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * Gadget API endpoint for Voiceflow streaming\n * @constant\n * @type {string}\n */\nconst GADGET_API_ENDPOINT =\n  \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\";\n\n/**\n * BaseChatbot Web Component\n * Base class for all chatbot implementations\n * Handles core functionality and communication with Voiceflow API\n */\nexport class BaseChatbot extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n\n    // Create local event bus\n    this.eventBus = new EventEmitter();\n\n    // Initialize state\n    this.userID = generateUserId();\n    this.abortController = null;\n  }\n\n  /**\n   * Define observed attributes for the web component\n   */\n  static get observedAttributes() {\n    return [\"endpoint\"];\n  }\n\n  /**\n   * Called when the element is added to the document\n   */\n  connectedCallback() {\n    this.initialize();\n  }\n\n  /**\n   * Called when the element is removed from the document\n   */\n  disconnectedCallback() {\n    this.cleanup();\n  }\n\n  /**\n   * Initialize the chatbot\n   * @private\n   */\n  initialize() {\n    this.setupEventListeners();\n  }\n\n  /**\n   * Launch the chatbot\n   * @public\n   */\n  launch() {\n    this.sendLaunch();\n  }\n\n  /**\n   * Set up core event listeners\n   * @private\n   */\n  setupEventListeners() {\n    // Message handling\n    this.eventBus.on(\"userMessage\", (message) => this.sendMessage(message));\n    this.eventBus.on(\"buttonClicked\", (payload) => this.sendMessage(payload));\n  }\n\n  /**\n   * Sends a launch request to initiate the conversation\n   */\n  async sendLaunch(interactPayload = {}) {\n    console.log(\"Constructing launch payload:\", interactPayload);\n    const payload = interactPayload.action\n      ? interactPayload\n      : {\n          action: {\n            type: \"launch\",\n          },\n        };\n\n    return this.sendAction(payload);\n  }\n\n  /**\n   * Sends a user message to the chatbot\n   * @param {string | Object} message - The user's message or button payload\n   */\n  async sendMessage(message) {\n    console.log(\"Sending message:\", message);\n    const payload = {\n      action: {\n        type: \"text\",\n        payload: typeof message === \"object\" ? message : message,\n      },\n    };\n\n    return this.sendAction(payload);\n  }\n\n  /**\n   * Sends an action to the Voiceflow API via Gadget\n   * @param {Object} actionPayload - The action payload to send\n   */\n  async sendAction(actionPayload) {\n    try {\n      const endpoint = this.getAttribute(\"endpoint\") || GADGET_API_ENDPOINT;\n      if (!endpoint) {\n        throw new Error(\"Endpoint attribute is required\");\n      }\n\n      // Abort any existing request\n      if (this.abortController) {\n        this.abortController.abort();\n      }\n\n      this.abortController = new AbortController();\n      const { signal } = this.abortController;\n\n      // Show typing indicator\n      this.eventBus.emit(\"typing\", { isTyping: true });\n\n      const response = await fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userID: this.userID,\n          action: actionPayload.action,\n        }),\n        credentials: \"include\",\n        signal,\n      });\n\n      if (!response.ok) {\n        throw new Error(`API responded with status ${response.status}`);\n      }\n\n      await this.handleSSEResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  /**\n   * Handles the SSE response from the API\n   * @private\n   */\n  async handleSSEResponse(response) {\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder(\"utf-8\");\n    let buffer = \"\";\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          this.eventBus.emit(\"end\", {});\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const events = buffer.split(\"\\n\\n\");\n        buffer = events.pop();\n\n        for (const eventStr of events) {\n          if (eventStr.trim() === \"\") continue;\n          this.processEventString(eventStr);\n        }\n      }\n    } catch (error) {\n      this.handleError(error);\n    } finally {\n      this.eventBus.emit(\"typing\", { isTyping: false });\n    }\n  }\n\n  /**\n   * Process an individual SSE event string\n   * @private\n   */\n  processEventString(eventStr) {\n    try {\n      const lines = eventStr.split(\"\\n\");\n      const eventTypeLine = lines.find((line) => line.startsWith(\"event:\"));\n      const dataLine = lines.find((line) => line.startsWith(\"data:\"));\n\n      const eventType = eventTypeLine\n        ? eventTypeLine.split(\":\")[1].trim()\n        : \"trace\";\n      const data = dataLine\n        ? JSON.parse(eventStr.substring(eventStr.indexOf(\"data:\") + 5).trim())\n        : null;\n\n      if (eventType === \"trace\") {\n        this.processTrace(data);\n      }\n    } catch (error) {\n      console.error(\"Error processing SSE event:\", error);\n    }\n  }\n\n  /**\n   * Process a trace event from Voiceflow\n   * @protected - Can be extended by child classes\n   */\n  processTrace(trace) {\n    if (!trace.type) {\n      console.warn(\"Trace without type received:\", trace);\n      return;\n    }\n\n    // Hide typing indicator when we receive any trace\n    this.eventBus.emit(\"typing\", { isTyping: false });\n\n    switch (trace.type) {\n      case \"text\":\n        this.eventBus.emit(\"messageReceived\", {\n          content: trace.payload.message,\n          metadata: trace.payload.metadata || null,\n        });\n        break;\n\n      case \"choice\":\n        this.eventBus.emit(\"choicePresented\", {\n          type: \"choice\",\n          buttons: trace.payload.buttons,\n        });\n        break;\n\n      case \"carousel\":\n        this.eventBus.emit(\"carouselPresented\", {\n          type: \"carousel\",\n          items: trace.payload.cards,\n        });\n        break;\n\n      case \"waiting_text\":\n        this.eventBus.emit(\"typingText\", {\n          text: trace.payload.text,\n        });\n        this.eventBus.emit(\"typing\", { isTyping: true });\n        break;\n\n      default:\n        console.warn(`Unhandled trace type: ${trace.type}`, trace);\n    }\n  }\n\n  /**\n   * Handle errors in the chatbot\n   * @protected - Can be extended by child classes\n   */\n  handleError(error) {\n    console.error(\"Chatbot error:\", error);\n    this.eventBus.emit(\"error\", { message: error.message });\n    this.eventBus.emit(\"typing\", { isTyping: false });\n  }\n\n  /**\n   * Clean up resources when the component is destroyed\n   */\n  cleanup() {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n    this.eventBus.removeAllListeners();\n  }\n}\n","/**\n * BaseChatbotUI Class\n * Handles common UI functionality for chatbots\n */\nexport class BaseChatbotUI {\n  /**\n   * @param {ShadowRoot} shadowRoot - The shadow root of the chatbot component\n   * @param {EventEmitter} eventBus - The event bus for this chatbot instance\n   */\n  constructor(shadowRoot, eventBus) {\n    this.shadowRoot = shadowRoot;\n    this.eventBus = eventBus;\n    this.setupUIElements();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Set up references to UI elements\n   * @protected\n   */\n  setupUIElements() {\n    this.container = this.shadowRoot.querySelector(\".chatbot-container\");\n    this.messageContainer = this.shadowRoot.querySelector(\".message-container\");\n    this.typingIndicator = this.shadowRoot.querySelector(\".chat-typing\");\n    this.typingText = this.shadowRoot.querySelector(\".typing-text\");\n    this.form = this.shadowRoot.querySelector(\".chat-form\");\n    this.input = this.shadowRoot.querySelector(\".chat-input\");\n  }\n\n  /**\n   * Set up event listeners for UI interactions\n   * @protected - Can be extended by child classes\n   */\n  setupEventListeners() {\n    // Handle form submissions\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        this.addMessage(\"user\", message);\n        this.eventBus.emit(\"userMessage\", message);\n        this.input.value = \"\";\n      }\n    });\n\n    // Listen for chatbot events\n    this.eventBus.on(\"messageReceived\", ({ content, metadata }) => {\n      this.addMessage(\"assistant\", content, metadata);\n    });\n\n    this.eventBus.on(\"typing\", ({ isTyping }) => {\n      if (isTyping) {\n        this.showTypingIndicator();\n      } else {\n        this.hideTypingIndicator();\n      }\n    });\n\n    this.eventBus.on(\"typingText\", ({ text }) => {\n      this.updateTypingText(text);\n    });\n\n    this.eventBus.on(\"error\", ({ message }) => {\n      this.displayError(message);\n    });\n  }\n\n  /**\n   * Add a message to the chat\n   * @public\n   */\n  addMessage(sender, content, metadata = null) {\n    const message = document.createElement(\"message-component\");\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n\n    if (metadata) {\n      message.setAttribute(\"metadata\", JSON.stringify(metadata));\n    }\n\n    this.messageContainer.appendChild(message);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Add interactive buttons to the chat\n   * @public\n   */\n  addButtons(buttons) {\n    const buttonsContainer = document.createElement(\"div\");\n    buttonsContainer.className = \"buttons-container\";\n\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      buttonsContainer.appendChild(button);\n    });\n\n    this.messageContainer.appendChild(buttonsContainer);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Show the typing indicator\n   * @public\n   */\n  showTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Hide the typing indicator\n   * @public\n   */\n  hideTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Update the typing indicator text\n   * @public\n   */\n  updateTypingText(text) {\n    if (this.typingText) {\n      this.typingText.textContent = text;\n    }\n  }\n\n  /**\n   * Display an error message\n   * @public\n   */\n  displayError(message) {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.textContent = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Remove all interactive elements\n   * @public\n   */\n  removeInteractiveElements() {\n    const elements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component, .buttons-container\"\n    );\n    elements.forEach((element) => element.remove());\n  }\n\n  /**\n   * Scroll the message container to the bottom\n   * @protected\n   */\n  scrollToBottom() {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n}\n","// /assets/scripts/chatbot/utils/event-constants.js\n\n/**\n * Event Constants\n * Defines all event names used across the chatbot system.\n * Events are namespaced to prevent conflicts between different components.\n */\n\n/**\n * Base events shared by all chatbot instances\n * @const {Object}\n */\nexport const BASE_EVENTS = {\n  MESSAGE_RECEIVED: \"messageReceived\",\n  TYPING: \"typing\",\n  TYPING_TEXT: \"typingText\",\n  CHOICE_PRESENTED: \"choicePresented\",\n  CAROUSEL_PRESENTED: \"carouselPresented\",\n  ERROR: \"error\",\n  END: \"end\",\n  USER_MESSAGE: \"userMessage\",\n};\n\n/**\n * Main chatbot specific events\n * @const {Object}\n */\nexport const MAIN_CHATBOT = {\n  ...Object.entries(BASE_EVENTS).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: `mainChatbot:${value}`,\n    }),\n    {}\n  ),\n  MAIN_MENU_CLICKED: \"mainChatbot:mainMenuClicked\",\n  HISTORY_LOADED: \"mainChatbot:historyLoaded\",\n  BUTTON_CLICK: \"mainChatbot:buttonClick\",\n  CAROUSEL_BUTTON_CLICK: \"mainChatbot:carouselButtonClick\",\n  CLEAR_HISTORY: \"mainChatbot:clearHistory\",\n  MINIMIZE: \"mainChatbot:minimize\",\n};\n\n/**\n * Section chatbot specific events\n * @const {Object}\n */\nexport const SECTION_CHATBOT = {\n  ...Object.entries(BASE_EVENTS).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: `sectionChatbot:${value}`,\n    }),\n    {}\n  ),\n  DEVICE_ANSWER: \"sectionChatbot:deviceAnswer\",\n  PRODUCT_CONTEXT_UPDATED: \"sectionChatbot:productContextUpdated\",\n};\n\n/**\n * Combined events object for backward compatibility\n * @deprecated Use specific event constants instead\n */\nexport const EVENTS = {\n  MAIN_CHATBOT,\n  SECTION_CHATBOT,\n};\n","// /assets/scripts/chatbot/utils/event-bus.js\n\nimport EventEmitter from \"eventemitter3\";\nimport {\n  BASE_EVENTS,\n  MAIN_CHATBOT,\n  SECTION_CHATBOT,\n} from \"./event-constants.js\";\n\n/**\n * EventBus Class\n * Extends EventEmitter to provide a centralized event hub with helper methods\n * for common chatbot event patterns.\n */\nclass EventBus extends EventEmitter {\n  /**\n   * Emit a typing event for a specific chatbot\n   * @param {string} prefix - The chatbot prefix ('mainChatbot' or 'sectionChatbot')\n   * @param {boolean} isTyping - Whether the chatbot is typing\n   */\n  emitTyping(prefix, isTyping) {\n    this.emit(`${prefix}:${BASE_EVENTS.TYPING}`, { isTyping });\n  }\n\n  /**\n   * Emit an error event for a specific chatbot\n   * @param {string} prefix - The chatbot prefix\n   * @param {string} message - The error message\n   */\n  emitError(prefix, message) {\n    this.emit(`${prefix}:${BASE_EVENTS.ERROR}`, { message });\n  }\n\n  /**\n   * Emit an end event for a specific chatbot\n   * @param {string} prefix - The chatbot prefix\n   */\n  emitEnd(prefix) {\n    this.emit(`${prefix}:${BASE_EVENTS.END}`, {});\n  }\n\n  /**\n   * Get the event name with prefix\n   * @param {string} prefix - The chatbot prefix\n   * @param {string} eventName - The base event name\n   * @returns {string} The prefixed event name\n   */\n  getEventName(prefix, eventName) {\n    return `${prefix}:${eventName}`;\n  }\n}\n\n/**\n * Singleton instance of EventBus\n */\nconst eventBus = new EventBus();\n\nexport default eventBus;\n","// /assets/scripts/chatbot/main/main-chatbot-ui.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { MAIN_CHATBOT } from \"../utils/event-constants.js\";\nimport { BaseChatbotUI } from \"../baseChatbot/base-chatbot-ui.js\";\n\n/**\n * MainChatbotUI Class\n * Extends BaseChatbotUI with drawer-specific functionality\n */\nexport class MainChatbotUI extends BaseChatbotUI {\n  /**\n   * @param {ShadowRoot} shadowRoot - The shadow root of the chatbot component\n   * @param {EventEmitter} eventBus - The event bus for this chatbot instance\n   */\n  constructor(shadowRoot, eventBus) {\n    super(shadowRoot, eventBus);\n    this.setupMainChatbotUI();\n  }\n\n  /**\n   * Set up main chatbot specific UI elements and functionality\n   * @private\n   */\n  setupMainChatbotUI() {\n    // Set up footer elements\n    this.footer = this.shadowRoot.querySelector(\".chatbot-footer\");\n    this.setupFooterEventListeners();\n  }\n\n  /**\n   * Set up event listeners specific to the main chatbot\n   * @protected\n   * @override\n   */\n  setupEventListeners() {\n    super.setupEventListeners();\n\n    // Handle button clicks with main chatbot namespace\n    this.messageContainer.addEventListener(\"click\", (e) => {\n      const button = e.target.closest(\"button-component\");\n      if (button) {\n        const payload = JSON.parse(button.getAttribute(\"payload\"));\n        const label = button.getAttribute(\"label\");\n\n        this.eventBus.emit(MAIN_CHATBOT.BUTTON_CLICK, {\n          ...payload,\n          label,\n          type: \"choice\",\n        });\n\n        // Add the button text as a user message\n        this.addMessage(\"user\", label);\n        this.removeInteractiveElements();\n      }\n    });\n\n    // Handle carousel button clicks with main chatbot namespace\n    this.messageContainer.addEventListener(\"click\", (e) => {\n      const carouselButton = e.target.closest(\"carousel-button\");\n      if (carouselButton) {\n        const payload = JSON.parse(carouselButton.getAttribute(\"payload\"));\n        const label = carouselButton.getAttribute(\"label\");\n\n        this.eventBus.emit(MAIN_CHATBOT.CAROUSEL_BUTTON_CLICK, {\n          ...payload,\n          label,\n          type: \"carousel_click\",\n        });\n\n        // Add the button text as a user message\n        this.addMessage(\"user\", label);\n      }\n    });\n  }\n\n  /**\n   * Add buttons to the chat\n   * @param {Array} buttons - Array of button data\n   * @param {boolean} isRestored - Whether these buttons are being restored from history\n   * @override\n   */\n  addButtons(buttons, isRestored = false) {\n    const buttonsContainer = document.createElement(\"div\");\n    buttonsContainer.className = \"buttons-container\";\n\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n\n      // Add any additional attributes needed for restored buttons\n      if (isRestored) {\n        button.setAttribute(\"data-restored\", \"true\");\n      }\n\n      buttonsContainer.appendChild(button);\n    });\n\n    this.messageContainer.appendChild(buttonsContainer);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Add a carousel to the chat\n   * @param {Array} items - Array of carousel items\n   * @param {boolean} isRestored - Whether this carousel is being restored from history\n   * @override\n   */\n  addCarousel(items, isRestored = false) {\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.setAttribute(\"items\", JSON.stringify(items));\n\n    // Add any additional attributes needed for restored carousels\n    if (isRestored) {\n      carousel.setAttribute(\"data-restored\", \"true\");\n    }\n\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Set up event listeners for footer elements\n   * @private\n   */\n  setupFooterEventListeners() {\n    if (!this.footer) return;\n\n    // Handle clear history button\n    const clearButton = this.footer.querySelector(\".clear-history\");\n    if (clearButton) {\n      clearButton.addEventListener(\"click\", () => {\n        this.clearChat();\n        this.eventBus.emit(MAIN_CHATBOT.CLEAR_HISTORY);\n      });\n    }\n\n    // Handle minimize button\n    const minimizeButton = this.footer.querySelector(\".minimize-chatbot\");\n    if (minimizeButton) {\n      minimizeButton.addEventListener(\"click\", () => {\n        this.eventBus.emit(MAIN_CHATBOT.MINIMIZE);\n      });\n    }\n  }\n\n  /**\n   * Clear the chat\n   * @private\n   */\n  clearChat() {\n    while (this.messageContainer.firstChild) {\n      this.messageContainer.removeChild(this.messageContainer.firstChild);\n    }\n  }\n\n  /**\n   * Update the footer visibility\n   * @public\n   */\n  updateFooterVisibility(visible) {\n    if (this.footer) {\n      this.footer.style.display = visible ? \"flex\" : \"none\";\n    }\n  }\n}\n","// /assets/scripts/chatbot/chatbot-main.js\n\nimport { BaseChatbot } from \"../baseChatbot/base-chatbot.js\";\nimport { MainChatbotUI } from \"./chatbot-main-ui.js\";\nimport { MAIN_CHATBOT } from \"../utils/event-constants.js\";\nimport eventBus from \"../utils/event-bus.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * MainChatbot Class\n * Extends BaseChatbot with drawer-specific functionality\n * Manages the Main Chatbot's conversation history and UI updates\n */\nexport class MainChatbot extends BaseChatbot {\n  constructor() {\n    super();\n    this.historyKey = \"mainChatbotHistory\";\n    this.launchKey = \"chatHasLaunched\";\n    this.isLaunched = this.hasLaunched();\n  }\n\n  /**\n   * Initialize the chatbot UI\n   * @protected\n   * @override\n   */\n  initializeUI() {\n    this.ui = new MainChatbotUI(this.shadowRoot, this.eventBus);\n    this.setupMainChatbotEventListeners();\n    this.loadHistory(); // Changed from restoreHistory to loadHistory to maintain interactive elements\n  }\n\n  /**\n   * Set up event listeners specific to the main chatbot\n   * @private\n   */\n  setupMainChatbotEventListeners() {\n    // Handle button clicks\n    this.eventBus.on(MAIN_CHATBOT.BUTTON_CLICK, (payload) => {\n      this.sendAction(payload);\n    });\n\n    // Handle carousel button clicks\n    this.eventBus.on(MAIN_CHATBOT.CAROUSEL_BUTTON_CLICK, (payload) => {\n      this.sendAction(payload);\n    });\n\n    // Handle user messages with history saving\n    this.eventBus.on(\"userMessage\", (message) => {\n      this.saveToHistory(\"user\", message);\n      this.sendMessage(message);\n    });\n\n    // Handle bot messages with history saving\n    this.eventBus.on(\"messageReceived\", ({ content, metadata }) => {\n      this.saveToHistory(\"assistant\", content, metadata);\n    });\n  }\n\n  /**\n   * Check if the chatbot has been launched before\n   * @private\n   */\n  hasLaunched() {\n    return localStorage.getItem(this.launchKey) === \"true\";\n  }\n\n  /**\n   * Set the launched state in localStorage\n   * @private\n   */\n  setLaunched() {\n    localStorage.setItem(this.launchKey, \"true\");\n    this.isLaunched = true;\n  }\n\n  /**\n   * Save a message to the conversation history\n   * Preserves interactive element data for choices and carousels\n   * @private\n   */\n  saveToHistory(sender, message, metadata = null) {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n\n    // Create history entry with additional trace data for interactive elements\n    const historyEntry = {\n      sender,\n      message,\n      timestamp: Date.now(),\n      isInteractive: false,\n    };\n\n    // If this is an assistant message with choice or carousel, store the trace\n    if (sender === \"assistant\" && metadata) {\n      if (metadata.type === \"choice\") {\n        historyEntry.isInteractive = true;\n        historyEntry.traceType = \"choice\";\n        historyEntry.traceData = { buttons: metadata.buttons };\n      } else if (metadata.type === \"carousel\") {\n        historyEntry.isInteractive = true;\n        historyEntry.traceType = \"carousel\";\n        historyEntry.traceData = { cards: metadata.carouselItems };\n      }\n    }\n\n    history.push(historyEntry);\n    localStorage.setItem(this.historyKey, JSON.stringify(history));\n  }\n\n  /**\n   * Load conversation history from localStorage\n   * Handles interactive elements specially\n   * @private\n   */\n  loadHistory() {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n\n    // Process all messages\n    history.forEach((entry, index) => {\n      // If it's an interactive element\n      if (entry.isInteractive) {\n        // Only restore interactive element if it's the last entry\n        if (index === history.length - 1) {\n          this.restoreInteractiveElement(entry);\n        }\n        // Skip adding message for interactive elements since they should have empty messages\n        return;\n      }\n\n      // For non-interactive messages, display them normally\n      if (entry.message) {\n        this.ui.addMessage(entry.sender, entry.message);\n      }\n    });\n  }\n\n  /**\n   * Restore an interactive element (choice or carousel)\n   * @private\n   */\n  restoreInteractiveElement(historyEntry) {\n    if (historyEntry.traceType === \"choice\") {\n      this.ui.addButtons(historyEntry.traceData.buttons, true);\n    } else if (historyEntry.traceType === \"carousel\") {\n      this.ui.addCarousel(historyEntry.traceData.cards, true);\n    }\n  }\n\n  /**\n   * Clear the conversation history\n   * @public\n   */\n  clearHistory() {\n    localStorage.removeItem(this.historyKey);\n    localStorage.removeItem(this.launchKey);\n    this.isLaunched = false;\n  }\n\n  /**\n   * Sanitize user input\n   * @private\n   */\n  sanitizeInput(input) {\n    const div = document.createElement(\"div\");\n    div.textContent = input;\n    return div.innerHTML;\n  }\n}\n\n// Initialize Main Chatbot on DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const mainChatbotContainer = document.getElementById(\"main-chatbot-ui\");\n\n  if (!mainChatbotContainer) {\n    console.error(\"Main Chatbot UI container not found\");\n    return;\n  }\n\n  // Generate or retrieve existing userID for Main Chatbot\n  let mainUserId = localStorage.getItem(\"mainChatbotUserId\");\n  if (!mainUserId) {\n    mainUserId = generateUserId(\"mainChatbot\");\n    localStorage.setItem(\"mainChatbotUserId\", mainUserId);\n  }\n\n  // Initialize ChatbotCore with the generated userID\n  const mainChatbotCore = new ChatbotCore({\n    userID: mainUserId,\n    endpoint:\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\", // Update to your actual endpoint\n    chatbotType: \"main\",\n  });\n\n  // Initialize MainChatbotUI\n  const mainChatbotUI = new MainChatbotUI(mainChatbotContainer);\n\n  // Initialize MainChatbot\n  const mainChatbot = new MainChatbot(mainChatbotCore, mainChatbotUI);\n\n  // Load conversation history\n  mainChatbot.loadHistory();\n});\n\nconsole.log(\"Main chatbot script loading...\");\n// Register the web component\ncustomElements.define(\"main-chatbot\", MainChatbot);\nconsole.log(\"Main chatbot component registered\");\n","// /assets/scripts/chatbot/section/section-chatbot-ui.js\n\nimport { BaseChatbotUI } from \"../baseChatbot/base-chatbot-ui.js\";\n\n/**\n * SectionChatbotUI Class\n * Extends BaseChatbotUI with specific UI logic for the Section Chatbot\n * Handles product-specific UI elements and device_answer displays\n * @extends BaseChatbotUI\n */\nexport class SectionChatbotUI extends BaseChatbotUI {\n  /**\n   * @param {ShadowRoot} shadowRoot - The shadow root of the chatbot component\n   * @param {EventEmitter} eventBus - The event bus for this chatbot instance\n   */\n  constructor(shadowRoot, eventBus) {\n    super(shadowRoot, eventBus);\n    this.setupSectionSpecificEventListeners();\n  }\n\n  /**\n   * Set up section-specific event listeners\n   * @private\n   */\n  setupSectionSpecificEventListeners() {\n    // Handle device answer displays\n    this.eventBus.on(\"deviceAnswer\", ({ applications }) => {\n      this.displayDeviceAnswer(applications);\n    });\n  }\n\n  /**\n   * Display device answer in the applications grid\n   * @private\n   * @param {Array} applications - List of applications from device_answer\n   */\n  displayDeviceAnswer(applications) {\n    const applicationsGrid = document.querySelector(\".applications-grid\");\n    if (!applicationsGrid) return;\n\n    // Clear existing applications\n    applicationsGrid.innerHTML = \"\";\n\n    // Create and append application elements\n    applications.forEach((app) => {\n      const appElement = this.createApplicationElement(app);\n      applicationsGrid.appendChild(appElement);\n    });\n  }\n\n  /**\n   * Create an application element for the grid\n   * @private\n   * @param {Object} app - Application data\n   * @returns {HTMLElement} The created application element\n   */\n  createApplicationElement(app) {\n    const element = document.createElement(\"div\");\n    element.className = \"application-item\";\n\n    const icon = document.createElement(\"img\");\n    icon.src = app.iconUrl || \"\";\n    icon.alt = app.name || \"Application Icon\";\n    icon.className = \"application-icon\";\n\n    const name = document.createElement(\"span\");\n    name.textContent = app.name || \"Unknown Application\";\n    name.className = \"application-name\";\n\n    const power = document.createElement(\"span\");\n    power.className = \"power-requirement\";\n    power.textContent = app.powerRequirement\n      ? `${app.powerRequirement}W`\n      : \"N/A\";\n\n    element.appendChild(icon);\n    element.appendChild(name);\n    element.appendChild(power);\n\n    return element;\n  }\n\n  /**\n   * Override addMessage to handle section-specific message formatting\n   * @override\n   * @param {string} sender - Message sender (user/assistant)\n   * @param {string} content - Message content\n   * @param {Object} metadata - Additional message metadata\n   */\n  addMessage(sender, content, metadata = null) {\n    if (sender === \"assistant\" && metadata?.productContext) {\n      content = this.formatMessageWithProductContext(\n        content,\n        metadata.productContext\n      );\n    }\n    super.addMessage(sender, content, metadata);\n  }\n\n  /**\n   * Format message with product context\n   * @private\n   * @param {string} message - Original message\n   * @param {Object} context - Product context\n   * @returns {string} Formatted message\n   */\n  formatMessageWithProductContext(message, context) {\n    return message.replace(/\\{(\\w+)\\}/g, (match, key) => context[key] || match);\n  }\n}\n\nexport default SectionChatbotUI;\n","// /assets/scripts/chatbot/section/section-chatbot.js\n\nimport { BaseChatbot } from \"../baseChatbot/base-chatbot.js\";\nimport { SectionChatbotUI } from \"./chatbot-section-ui.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * SectionChatbot Web Component\n * Extends BaseChatbot with specific logic for the Section Chatbot\n * Handles product context, device answers, and focused interactions\n * @extends BaseChatbot\n */\nexport class SectionChatbot extends BaseChatbot {\n  constructor() {\n    super();\n    this.productDetails = {};\n  }\n\n  /**\n   * Initialize the chatbot UI\n   * @protected\n   * @override\n   */\n  initializeUI() {\n    this.ui = new SectionChatbotUI(this.shadowRoot, this.eventBus);\n    this.setupSectionChatbotEventListeners();\n  }\n\n  /**\n   * Initialize product details from element attributes\n   * @private\n   */\n  initializeProductDetails() {\n    this.productDetails = {\n      title: this.getAttribute(\"product-title\"),\n      capacity: this.getAttribute(\"product-capacity\"),\n      ac_output_continuous_power: this.getAttribute(\n        \"product-ac_output_continuous_power\"\n      ),\n      ac_output_peak_power: this.getAttribute(\"product-ac_output_peak_power\"),\n      dc_output_power: this.getAttribute(\"product-dc_output_power\"),\n    };\n    this.validateProductDetails();\n  }\n\n  /**\n   * Override initialize to add product context initialization\n   * @protected\n   * @override\n   */\n  initialize() {\n    this.initializeProductDetails();\n    super.initialize();\n  }\n\n  /**\n   * Validate required product details\n   * @private\n   */\n  validateProductDetails() {\n    const requiredFields = [\"title\", \"capacity\"];\n    const missingFields = requiredFields.filter(\n      (field) => !this.productDetails[field]\n    );\n\n    if (missingFields.length > 0) {\n      console.error(\n        `Missing required product details: ${missingFields.join(\", \")}`\n      );\n      this.eventBus.emit(\"error\", {\n        message:\n          \"Some product information is missing. Chat functionality may be limited.\",\n      });\n    }\n  }\n\n  /**\n   * Set up section-specific event listeners\n   * @private\n   */\n  setupSectionChatbotEventListeners() {\n    // Handle device_answer traces\n    this.eventBus.on(\"trace\", ({ type, payload }) => {\n      if (type === \"device_answer\") {\n        this.handleDeviceAnswer(payload);\n      }\n    });\n\n    // Handle input focus for launching\n    this.shadowRoot\n      .querySelector(\".chat-input\")\n      ?.addEventListener(\"focus\", () => {\n        if (!this.isLaunched) {\n          this.launch();\n        }\n      });\n  }\n\n  /**\n   * Handle device_answer traces by updating the applications grid\n   * @private\n   * @param {Object} payload - The device_answer payload\n   */\n  handleDeviceAnswer(payload) {\n    if (payload.applications) {\n      this.eventBus.emit(\"deviceAnswer\", {\n        applications: payload.applications,\n      });\n    }\n  }\n\n  /**\n   * Get product-specific launch payload\n   * @private\n   * @returns {Object} Launch payload with product details\n   */\n  getProductLaunchPayload() {\n    return {\n      action: {\n        type: \"launch\",\n        payload: {\n          context: {\n            startBlock: \"shopifySection\",\n            powerStationDetails: this.productDetails,\n          },\n        },\n      },\n    };\n  }\n\n  /**\n   * Override launch to include product details\n   * @public\n   * @override\n   */\n  launch() {\n    this.sendLaunch(this.getProductLaunchPayload());\n  }\n}\n\n// Register the web component\ncustomElements.define(\"section-chatbot\", SectionChatbot);\n","// /assets/scripts/chatbot/components/button-component.js\n\nimport eventBus from \"../../utils/event-bus.js\";\n\nexport class ButtonComponent extends HTMLElement {\n  constructor() {\n    super();\n    // Attach Shadow DOM to encapsulate styles\n    this.attachShadow({ mode: \"open\" });\n  }\n\n  connectedCallback() {\n    const label = this.getAttribute(\"label\");\n    const payload = this.getAttribute(\"payload\");\n\n    this.render(label, payload);\n  }\n\n  /**\n   * Renders the button with embedded styles.\n   * @param {string} label - The button label\n   * @param {string} payload - The button payload in JSON string format\n   */\n  render(label, payload) {\n    this.shadowRoot.innerHTML = `\n      <style>\n        .button-container {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 10px;\n          margin-bottom: var(--spacing-4);\n        }\n\n        .button {\n          padding: var(--spacing-3);\n          background-color: #FFFFFF;\n          border: none;\n          border-radius: var(--rounded);\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 14px;\n          transition: background-color 0.3s ease;\n        }\n\n        .button:hover {\n          background-color: #f0f0f0;\n        }\n\n        /* Additional styles as needed */\n      </style>\n      <div class=\"button-container\">\n        <button class=\"button\" data-button-data='${payload}' aria-label=\"${label}\">${label}</button>\n      </div>\n    `;\n\n    // Add event listener to the button\n    this.shadowRoot.querySelector(\".button\").addEventListener(\"click\", () => {\n      // Emit event via eventBus\n      try {\n        const parsedPayload = JSON.parse(payload);\n        eventBus.emit(\"buttonClicked\", parsedPayload);\n      } catch (error) {\n        console.error(\"Error parsing button payload:\", error);\n      }\n    });\n  }\n}\n","// /assets/scripts/chatbot/components/message-component.js\n\nexport class MessageComponent extends HTMLElement {\n  constructor() {\n    super();\n    // Attach Shadow DOM to encapsulate styles\n    this.attachShadow({ mode: \"open\" });\n  }\n\n  connectedCallback() {\n    const sender = this.getAttribute(\"sender\");\n    const content = this.getAttribute(\"content\");\n\n    this.render(sender, content);\n  }\n\n  /**\n   * Renders the message with appropriate styling based on the sender.\n   * @param {string} sender - 'user' or 'assistant'\n   * @param {string} content - The message content\n   */\n  render(sender, content) {\n    const isAssistant = sender === \"assistant\";\n    this.shadowRoot.innerHTML = `\n      <style>\n        message-component {\n          width: 100%;\n        }\n        .message-wrapper {\n          display: flex;\n          align-items: flex-end;\n          width: 100%;\n          margin-bottom: var(--spacing-6);\n          gap: var(--spacing-2);\n        }\n\n        .message-wrapper--assistant {\n          justify-content: flex-start;\n        }\n\n        .message-wrapper--user {\n          justify-content: flex-end;\n        }\n\n        .assistant-icon {\n          width: 30px;\n          height: 20px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-right: var(--spacing-2);\n        }\n\n        .message {\n          max-width: 80%;\n          padding: var(--spacing-4);\n          border-radius: 20px;\n          word-wrap: break-word;\n          background-color: ${\n            isAssistant ? \"#FFFFFF\" : \"rgba(255, 255, 255, 0.1)\"\n          };\n          color: ${isAssistant ? \"#231F25\" : \"#FFFFFF\"};\n          border: ${isAssistant ? \"none\" : \"1px solid #FFFFFF\"};\n        }\n\n        .message--assistant {\n          background-color: #FFFFFF;\n          color: #231F25 !important;\n          border-bottom-left-radius: 4px;\n        }\n\n        .message--user {\n          background-color: rgba(255, 255, 255, 0.1);\n          border: 1px solid #FFFFFF;\n          color: white;\n        }\n\n        .message__content {\n          display: flex;\n          flex-direction: column;\n          gap: 1em;\n          flex-grow: 1;\n          font-family: inherit;\n        }\n      </style>\n      <div class=\"message-wrapper message-wrapper--${sender}\">\n        ${isAssistant ? `<div class=\"assistant-icon\">🚀</div>` : \"\"}\n        <div class=\"message message--${sender}\">\n          <div class=\"message__content\">${this.markdownToHtml(content)}</div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Converts markdown to HTML.\n   * For simplicity, using basic line breaks. Integrate a markdown library if needed.\n   * @param {string} markdown - The markdown content\n   * @returns {string} - HTML content\n   */\n  markdownToHtml(markdown) {\n    if (!markdown) return \"\";\n    return markdown.replace(/\\n/g, \"<br>\");\n  }\n}\n","// /assets/scripts/chatbot/components/carousel-component.js\n\nimport eventBus from \"../../utils/event-bus.js\";\n\n/**\n * CarouselComponent Class\n * Renders a carousel of cards with images, titles, descriptions, and action buttons.\n */\nexport class CarouselComponent extends HTMLElement {\n  constructor() {\n    super();\n    // Attach Shadow DOM to encapsulate styles and markup\n    this.attachShadow({ mode: \"open\" });\n\n    // Initialize properties\n    this.items = []; // To store carousel items\n    this.currentIndex = 0; // Current slide index\n    this.isDesktop = window.matchMedia(\"(min-width: 1000px)\").matches;\n    this.itemsPerSlide = this.isDesktop ? 2 : 1;\n\n    // Bind methods to maintain context\n    this.moveLeft = this.moveLeft.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  /**\n   * Lifecycle method called when the component is added to the DOM.\n   */\n  connectedCallback() {\n    const dataAttr = this.getAttribute(\"data-carousel\");\n    if (!dataAttr) {\n      console.error(\n        \"No data-carousel attribute found. Cannot render carousel.\"\n      );\n      return;\n    }\n\n    let carouselData;\n    try {\n      carouselData = JSON.parse(dataAttr);\n    } catch (err) {\n      console.error(\"Failed to parse carousel data:\", err);\n      return;\n    }\n\n    // Ensure carouselData.cards is an array\n    if (!carouselData || !Array.isArray(carouselData.cards)) {\n      console.error(\"carouselData.cards is not defined or not an array\");\n      return;\n    }\n\n    this.renderCarousel(carouselData);\n  }\n\n  /**\n   * Renders the carousel with embedded styles and initializes functionality.\n   * @param {Object} carouselData - Data for the carousel containing a 'cards' array.\n   */\n  renderCarousel(carouselData) {\n    this.carouselData = carouselData;\n    this.shadowRoot.innerHTML = `\n      <style>\n        /* Custom Carousel Styling */\n\n        h6 {\n            font-family: var(--heading-font-family);\n            font-weight: var(--heading-font-weight);\n            font-style: var(--heading-font-style);\n            letter-spacing: var(--heading-letter-spacing);\n            text-transform: var(--heading-text-transform);\n            overflow-wrap: anywhere;\n            font-size: var(--text-sm);\n        }\n\n        .button {\n          --button-background: var(--button-background-primary) /\n            var(--button-background-opacity, 1);\n          --button-text-color: var(--button-text-primary);\n          --button-outline-color: white;\n          -webkit-appearance: none;\n          appearance: none;\n          border-color: white;\n          border-radius: 8px;\n          border-width: 1px;\n          background-color: rgb(var(--button-background));\n          color: rgb(var(--button-text-color));\n          text-align: center;\n          font-size: var(--text-h6);\n          letter-spacing: var(--text-letter-spacing);\n          padding-block-start: var(--spacing-2-5);\n          padding-block-end: var(--spacing-2-5);\n          padding-inline-start: var(--spacing-5);\n          padding-inline-end: var(--spacing-5);\n          font-weight: bold;\n          line-height: 1.6;\n          transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out,\n            box-shadow 0.15s ease-in-out;\n          display: inline-block;\n          position: relative;\n        }\n\n        .carousel {\n          position: relative;\n          width: 100%;\n          overflow: hidden;\n          margin-bottom: var(--spacing-4);\n          box-sizing: border-box;\n        }\n\n        .carousel__container {\n          display: flex;\n          transition: transform 0.3s ease-out;\n          max-width: 100%;\n        }\n\n        .carousel__item {\n          flex: 0 0 100%;\n          display: flex;\n          gap: var(--spacing-4);\n          box-sizing: border-box;\n          max-width: 100%;\n          align-items: flex-start;\n        }\n\n        .carousel__item-wrapper {\n          flex: 0 0 100%;\n          max-width: 100%;\n          min-width: 0;\n        }\n\n        .carousel__button {\n          position: absolute;\n          top: 50%;\n          transform: translateY(-50%);\n          background: rgba(255, 255, 255, 0.8);\n          border: solid 1px #403545;\n          width: 40px;\n          height: 40px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          z-index: 2;\n          margin-block-start: var(--spacing-0) !important;\n        }\n\n        .carousel__button--left {\n          left: 10px;\n        }\n\n        .carousel__button--right {\n          right: 10px;\n        }\n\n        .carousel__item-button {\n        font-size: var(--text-sm);\n        }\n\n        .carousel__item-content {\n          background: #FFFFFF;\n          border-radius: 8px;\n          padding: var(--spacing-4);\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .carousel__item-image {\n          width: 100%;\n          height: auto;\n          border-radius: 8px;\n          margin-bottom: var(--spacing-2);\n          object-fit: cover;\n        }\n\n        .carousel__item-title {\n          font-weight: bold;\n          margin-bottom: var(--spacing-0);\n          margin-top: var(--spacing-0);\n          font-size: var(--text-base);\n        }\n\n        .carousel__item-description {\n          margin-bottom: var(--spacing-4);\n          margin-top: var(--spacing-0);\n          font-size: var(--text-sm);\n          color: #403545 !important;\n          flex-grow: 1;\n        }\n\n        @media (min-width: 1000px) {\n          .carousel__item {\n            flex: 0 0 50%;\n            max-width: 50%;\n          }\n\n          .carousel__item-wrapper {\n            flex: 0 0 calc(100% - var(--spacing-2));\n            max-width: calc(100% - var(--spacing-2));\n          }\n        }\n      </style>\n      <div class=\"carousel\">\n        <div class=\"carousel__container\">\n          <!-- Carousel items will be dynamically added here -->\n        </div>\n        <button class=\"carousel__button carousel__button--left\" aria-label=\"Previous slide\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n               xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" stroke-width=\"2\"\n                  stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </button>\n        <button class=\"carousel__button carousel__button--right\" aria-label=\"Next slide\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n               xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M9 18L15 12L9 6\" stroke=\"currentColor\" stroke-width=\"2\"\n                  stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </button>\n      </div>\n    `;\n\n    // Reference to carousel container and navigation buttons\n    this.carouselContainer = this.shadowRoot.querySelector(\n      \".carousel__container\"\n    );\n    this.leftButton = this.shadowRoot.querySelector(\".carousel__button--left\");\n    this.rightButton = this.shadowRoot.querySelector(\n      \".carousel__button--right\"\n    );\n\n    // Add carousel items\n    this.carouselData.cards.forEach((card, index) => {\n      const item = document.createElement(\"div\");\n      item.classList.add(\"carousel__item\");\n\n      const itemWrapper = document.createElement(\"div\");\n      itemWrapper.classList.add(\"carousel__item-wrapper\");\n\n      const itemContent = document.createElement(\"div\");\n      itemContent.classList.add(\"carousel__item-content\");\n\n      // Image\n      if (card.imageUrl) {\n        const img = document.createElement(\"img\");\n        img.src = card.imageUrl;\n        img.alt = card.title || \"\";\n        img.classList.add(\"carousel__item-image\");\n        itemContent.appendChild(img);\n      }\n\n      // Title\n      if (card.title) {\n        const title = document.createElement(\"h6\");\n        title.classList.add(\"carousel__item-title\");\n        title.textContent = card.title;\n        itemContent.appendChild(title);\n      }\n\n      // Description\n      if (card.description && card.description.text) {\n        const description = document.createElement(\"p\");\n        description.classList.add(\"carousel__item-description\");\n        description.textContent = card.description.text;\n        itemContent.appendChild(description);\n      }\n\n      // Button\n      if (card.buttons && card.buttons.length > 0) {\n        const buttonData = card.buttons[0];\n        const button = document.createElement(\"button\");\n        button.classList.add(\"button\", \"carousel__item-button\");\n        button.setAttribute(\"data-button-index\", index);\n        button.setAttribute(\n          \"data-button-payload\",\n          JSON.stringify(buttonData.request)\n        );\n        button.setAttribute(\"data-button-text\", buttonData.name);\n        button.textContent = buttonData.name || \"Select\";\n        itemContent.appendChild(button);\n\n        // Add event listener for button click\n        button.addEventListener(\"click\", this.handleButtonClick);\n      }\n\n      // Assemble the item structure\n      itemWrapper.appendChild(itemContent);\n      item.appendChild(itemWrapper);\n      this.carouselContainer.appendChild(item);\n      this.items.push(item);\n    });\n\n    // Initialize Carousel Functionality\n    this.initCarousel();\n\n    // Add event listeners to navigation buttons\n    this.leftButton.addEventListener(\"click\", this.moveLeft);\n    this.rightButton.addEventListener(\"click\", this.moveRight);\n\n    // Add event listener for window resize to adjust carousel\n    window.addEventListener(\"resize\", this.handleResize);\n\n    this.updateVisibility();\n    this.updatePosition();\n  }\n\n  /**\n   * Initializes carousel settings based on screen size.\n   */\n  initCarousel() {\n    this.isDesktop = window.matchMedia(\"(min-width: 1000px)\").matches;\n    this.itemsPerSlide = this.isDesktop ? 2 : 1;\n    this.currentIndex = 0;\n    this.updateVisibility();\n    this.updatePosition();\n  }\n\n  /**\n   * Handles window resize events to adjust carousel settings.\n   */\n  handleResize() {\n    this.isDesktop = window.matchMedia(\"(min-width: 1000px)\").matches;\n    this.itemsPerSlide = this.isDesktop ? 2 : 1;\n    this.currentIndex = 0;\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  /**\n   * Moves the carousel to the left.\n   */\n  moveLeft() {\n    const itemsPerSlide = this.itemsPerSlide;\n    this.currentIndex = Math.max(0, this.currentIndex - itemsPerSlide);\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  /**\n   * Moves the carousel to the right.\n   */\n  moveRight() {\n    const itemsPerSlide = this.itemsPerSlide;\n    this.currentIndex = Math.min(\n      this.items.length - itemsPerSlide,\n      this.currentIndex + itemsPerSlide\n    );\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  /**\n   * Updates the carousel's position based on the current index.\n   */\n  updatePosition() {\n    const itemsPerSlide = this.itemsPerSlide;\n    const offset = -(this.currentIndex / itemsPerSlide) * 100;\n    this.carouselContainer.style.transform = `translateX(${offset}%)`;\n  }\n\n  /**\n   * Updates the visibility of navigation buttons based on the current index.\n   */\n  updateVisibility() {\n    const itemsPerSlide = this.itemsPerSlide;\n    this.leftButton.disabled = this.currentIndex === 0;\n    this.rightButton.disabled =\n      this.currentIndex >= this.items.length - itemsPerSlide;\n  }\n\n  /**\n   * Handles button clicks within carousel items.\n   * @param {Event} e - The click event\n   */\n  handleButtonClick(e) {\n    const button = e.target;\n    const buttonIndex = parseInt(button.getAttribute(\"data-button-index\"), 10);\n    const card = this.carouselData.cards[buttonIndex];\n\n    if (!card || !card.buttons || card.buttons.length === 0) {\n      console.warn(\"No button data found for this card.\");\n      return;\n    }\n\n    const buttonData = card.buttons[0];\n    console.log(\"Original button data:\", buttonData);\n\n    // Access the title from the payload\n    const productTitle = buttonData.request.payload.title;\n    const displayLabel = productTitle\n      ? `Selected ${productTitle}`\n      : \"Selected Power Station\";\n\n    eventBus.emit(\"carouselButtonClicked\", {\n      action: buttonData.request, // Keep the original request structure\n      label: displayLabel, // Use our new descriptive label with fallback\n    });\n\n    // Remove the carousel after interaction\n    this.remove();\n  }\n}\n","// frontend/components/ui/chatbot-components.js\nimport { ButtonComponent } from \"./button-component.js\";\nimport { MessageComponent } from \"./message-component.js\";\nimport { CarouselComponent } from \"./carousel-component.js\";\n\n// Register custom components\ncustomElements.define(\"button-component\", ButtonComponent);\ncustomElements.define(\"message-component\", MessageComponent);\ncustomElements.define(\"carousel-component\", CarouselComponent);\n"],"names":["generateUserId","prefix","uniquePart","GADGET_API_ENDPOINT","BaseChatbot","EventEmitter","message","payload","interactPayload","actionPayload","endpoint","signal","response","error","reader","decoder","buffer","done","value","events","eventStr","lines","eventTypeLine","line","dataLine","eventType","data","trace","BaseChatbotUI","shadowRoot","eventBus","e","content","metadata","isTyping","text","sender","buttons","buttonsContainer","buttonData","button","errorDiv","element","BASE_EVENTS","MAIN_CHATBOT","acc","key","EventBus","eventName","MainChatbotUI","label","carouselButton","isRestored","items","carousel","clearButton","minimizeButton","visible","MainChatbot","history","historyEntry","entry","index","input","div","mainChatbotContainer","mainUserId","mainChatbotCore","mainChatbotUI","SectionChatbotUI","applications","applicationsGrid","app","appElement","icon","name","power","context","match","SectionChatbot","missingFields","field","type","_a","ButtonComponent","parsedPayload","MessageComponent","isAssistant","markdown","CarouselComponent","dataAttr","carouselData","err","card","item","itemWrapper","itemContent","img","title","description","itemsPerSlide","offset","buttonIndex","productTitle","displayLabel"],"mappings":"yCAKO,SAASA,EAAeC,EAAQ,CACrC,MAAMC,EACJ,KAAK,IAAK,EAAC,SAAS,EAAE,EAAI,KAAK,SAAS,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,EAClE,MAAO,GAAGD,CAAM,IAAIC,CAAU,EAChC,CCDA,MAAMC,EACJ,gFAOK,MAAMC,UAAoB,WAAY,CAC3C,aAAc,CACZ,QACA,KAAK,aAAa,CAAE,KAAM,MAAQ,CAAA,EAGlC,KAAK,SAAW,IAAIC,EAGpB,KAAK,OAASL,IACd,KAAK,gBAAkB,IACxB,CAKD,WAAW,oBAAqB,CAC9B,MAAO,CAAC,UAAU,CACnB,CAKD,mBAAoB,CAClB,KAAK,WAAU,CAChB,CAKD,sBAAuB,CACrB,KAAK,QAAO,CACb,CAMD,YAAa,CACX,KAAK,oBAAmB,CACzB,CAMD,QAAS,CACP,KAAK,WAAU,CAChB,CAMD,qBAAsB,CAEpB,KAAK,SAAS,GAAG,cAAgBM,GAAY,KAAK,YAAYA,CAAO,CAAC,EACtE,KAAK,SAAS,GAAG,gBAAkBC,GAAY,KAAK,YAAYA,CAAO,CAAC,CACzE,CAKD,MAAM,WAAWC,EAAkB,GAAI,CACrC,QAAQ,IAAI,+BAAgCA,CAAe,EAC3D,MAAMD,EAAUC,EAAgB,OAC5BA,EACA,CACE,OAAQ,CACN,KAAM,QACP,CACX,EAEI,OAAO,KAAK,WAAWD,CAAO,CAC/B,CAMD,MAAM,YAAYD,EAAS,CACzB,QAAQ,IAAI,mBAAoBA,CAAO,EACvC,MAAMC,EAAU,CACd,OAAQ,CACN,KAAM,OACN,QAAuCD,CACxC,CACP,EAEI,OAAO,KAAK,WAAWC,CAAO,CAC/B,CAMD,MAAM,WAAWE,EAAe,CAC9B,GAAI,CACF,MAAMC,EAAW,KAAK,aAAa,UAAU,GAAKP,EAClD,GAAI,CAACO,EACH,MAAM,IAAI,MAAM,gCAAgC,EAI9C,KAAK,iBACP,KAAK,gBAAgB,QAGvB,KAAK,gBAAkB,IAAI,gBAC3B,KAAM,CAAE,OAAAC,CAAM,EAAK,KAAK,gBAGxB,KAAK,SAAS,KAAK,SAAU,CAAE,SAAU,EAAI,CAAE,EAE/C,MAAMC,EAAW,MAAM,MAAMF,EAAU,CACrC,OAAQ,OACR,QAAS,CACP,eAAgB,kBACjB,EACD,KAAM,KAAK,UAAU,CACnB,OAAQ,KAAK,OACb,OAAQD,EAAc,MAChC,CAAS,EACD,YAAa,UACb,OAAAE,CACR,CAAO,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,6BAA6BA,EAAS,MAAM,EAAE,EAGhE,MAAM,KAAK,kBAAkBA,CAAQ,CACtC,OAAQC,EAAO,CACd,KAAK,YAAYA,CAAK,CACvB,CACF,CAMD,MAAM,kBAAkBD,EAAU,CAChC,MAAME,EAASF,EAAS,KAAK,UAAS,EAChCG,EAAU,IAAI,YAAY,OAAO,EACvC,IAAIC,EAAS,GAEb,GAAI,CACF,OAAa,CACX,KAAM,CAAE,KAAAC,EAAM,MAAAC,CAAK,EAAK,MAAMJ,EAAO,KAAI,EACzC,GAAIG,EAAM,CACR,KAAK,SAAS,KAAK,MAAO,CAAE,CAAA,EAC5B,KACD,CAEDD,GAAUD,EAAQ,OAAOG,EAAO,CAAE,OAAQ,EAAI,CAAE,EAChD,MAAMC,EAASH,EAAO,MAAM;AAAA;AAAA,CAAM,EAClCA,EAASG,EAAO,MAEhB,UAAWC,KAAYD,EACjBC,EAAS,SAAW,IACxB,KAAK,mBAAmBA,CAAQ,CAEnC,CACF,OAAQP,EAAO,CACd,KAAK,YAAYA,CAAK,CAC5B,QAAc,CACR,KAAK,SAAS,KAAK,SAAU,CAAE,SAAU,EAAK,CAAE,CACjD,CACF,CAMD,mBAAmBO,EAAU,CAC3B,GAAI,CACF,MAAMC,EAAQD,EAAS,MAAM;AAAA,CAAI,EAC3BE,EAAgBD,EAAM,KAAME,GAASA,EAAK,WAAW,QAAQ,CAAC,EAC9DC,EAAWH,EAAM,KAAME,GAASA,EAAK,WAAW,OAAO,CAAC,EAExDE,EAAYH,EACdA,EAAc,MAAM,GAAG,EAAE,CAAC,EAAE,KAAM,EAClC,QACEI,EAAOF,EACT,KAAK,MAAMJ,EAAS,UAAUA,EAAS,QAAQ,OAAO,EAAI,CAAC,EAAE,MAAM,EACnE,KAEAK,IAAc,SAChB,KAAK,aAAaC,CAAI,CAEzB,OAAQb,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,CACnD,CACF,CAMD,aAAac,EAAO,CAClB,GAAI,CAACA,EAAM,KAAM,CACf,QAAQ,KAAK,+BAAgCA,CAAK,EAClD,MACD,CAKD,OAFA,KAAK,SAAS,KAAK,SAAU,CAAE,SAAU,EAAK,CAAE,EAExCA,EAAM,KAAI,CAChB,IAAK,OACH,KAAK,SAAS,KAAK,kBAAmB,CACpC,QAASA,EAAM,QAAQ,QACvB,SAAUA,EAAM,QAAQ,UAAY,IAC9C,CAAS,EACD,MAEF,IAAK,SACH,KAAK,SAAS,KAAK,kBAAmB,CACpC,KAAM,SACN,QAASA,EAAM,QAAQ,OACjC,CAAS,EACD,MAEF,IAAK,WACH,KAAK,SAAS,KAAK,oBAAqB,CACtC,KAAM,WACN,MAAOA,EAAM,QAAQ,KAC/B,CAAS,EACD,MAEF,IAAK,eACH,KAAK,SAAS,KAAK,aAAc,CAC/B,KAAMA,EAAM,QAAQ,IAC9B,CAAS,EACD,KAAK,SAAS,KAAK,SAAU,CAAE,SAAU,EAAI,CAAE,EAC/C,MAEF,QACE,QAAQ,KAAK,yBAAyBA,EAAM,IAAI,GAAIA,CAAK,CAC5D,CACF,CAMD,YAAYd,EAAO,CACjB,QAAQ,MAAM,iBAAkBA,CAAK,EACrC,KAAK,SAAS,KAAK,QAAS,CAAE,QAASA,EAAM,OAAO,CAAE,EACtD,KAAK,SAAS,KAAK,SAAU,CAAE,SAAU,EAAK,CAAE,CACjD,CAKD,SAAU,CACJ,KAAK,iBACP,KAAK,gBAAgB,QAEvB,KAAK,SAAS,oBACf,CACH,CCjRO,MAAMe,CAAc,CAKzB,YAAYC,EAAYC,EAAU,CAChC,KAAK,WAAaD,EAClB,KAAK,SAAWC,EAChB,KAAK,gBAAe,EACpB,KAAK,oBAAmB,CACzB,CAMD,iBAAkB,CAChB,KAAK,UAAY,KAAK,WAAW,cAAc,oBAAoB,EACnE,KAAK,iBAAmB,KAAK,WAAW,cAAc,oBAAoB,EAC1E,KAAK,gBAAkB,KAAK,WAAW,cAAc,cAAc,EACnE,KAAK,WAAa,KAAK,WAAW,cAAc,cAAc,EAC9D,KAAK,KAAO,KAAK,WAAW,cAAc,YAAY,EACtD,KAAK,MAAQ,KAAK,WAAW,cAAc,aAAa,CACzD,CAMD,qBAAsB,CAEpB,KAAK,KAAK,iBAAiB,SAAWC,GAAM,CAC1CA,EAAE,eAAc,EAChB,MAAMzB,EAAU,KAAK,MAAM,MAAM,KAAI,EACjCA,IACF,KAAK,WAAW,OAAQA,CAAO,EAC/B,KAAK,SAAS,KAAK,cAAeA,CAAO,EACzC,KAAK,MAAM,MAAQ,GAE3B,CAAK,EAGD,KAAK,SAAS,GAAG,kBAAmB,CAAC,CAAE,QAAA0B,EAAS,SAAAC,KAAe,CAC7D,KAAK,WAAW,YAAaD,EAASC,CAAQ,CACpD,CAAK,EAED,KAAK,SAAS,GAAG,SAAU,CAAC,CAAE,SAAAC,CAAQ,IAAO,CACvCA,EACF,KAAK,oBAAmB,EAExB,KAAK,oBAAmB,CAEhC,CAAK,EAED,KAAK,SAAS,GAAG,aAAc,CAAC,CAAE,KAAAC,CAAI,IAAO,CAC3C,KAAK,iBAAiBA,CAAI,CAChC,CAAK,EAED,KAAK,SAAS,GAAG,QAAS,CAAC,CAAE,QAAA7B,CAAO,IAAO,CACzC,KAAK,aAAaA,CAAO,CAC/B,CAAK,CACF,CAMD,WAAW8B,EAAQJ,EAASC,EAAW,KAAM,CAC3C,MAAM3B,EAAU,SAAS,cAAc,mBAAmB,EAC1DA,EAAQ,aAAa,SAAU8B,CAAM,EACrC9B,EAAQ,aAAa,UAAW0B,CAAO,EAEnCC,GACF3B,EAAQ,aAAa,WAAY,KAAK,UAAU2B,CAAQ,CAAC,EAG3D,KAAK,iBAAiB,YAAY3B,CAAO,EACzC,KAAK,eAAc,CACpB,CAMD,WAAW+B,EAAS,CAClB,MAAMC,EAAmB,SAAS,cAAc,KAAK,EACrDA,EAAiB,UAAY,oBAE7BD,EAAQ,QAASE,GAAe,CAC9B,MAAMC,EAAS,SAAS,cAAc,kBAAkB,EACxDA,EAAO,aAAa,QAASD,EAAW,IAAI,EAC5CC,EAAO,aAAa,UAAW,KAAK,UAAUD,EAAW,OAAO,CAAC,EACjED,EAAiB,YAAYE,CAAM,CACzC,CAAK,EAED,KAAK,iBAAiB,YAAYF,CAAgB,EAClD,KAAK,eAAc,CACpB,CAMD,qBAAsB,CAChB,KAAK,kBACP,KAAK,gBAAgB,MAAM,QAAU,OACrC,KAAK,eAAc,EAEtB,CAMD,qBAAsB,CAChB,KAAK,kBACP,KAAK,gBAAgB,MAAM,QAAU,OAExC,CAMD,iBAAiBH,EAAM,CACjB,KAAK,aACP,KAAK,WAAW,YAAcA,EAEjC,CAMD,aAAa7B,EAAS,CACpB,MAAMmC,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAU,IAAI,eAAe,EACtCA,EAAS,YAAcnC,EACvB,KAAK,iBAAiB,YAAYmC,CAAQ,EAC1C,KAAK,eAAc,CACpB,CAMD,2BAA4B,CACT,KAAK,iBAAiB,iBACrC,0DACN,EACa,QAASC,GAAYA,EAAQ,OAAQ,CAAA,CAC/C,CAMD,gBAAiB,CACf,KAAK,iBAAiB,UAAY,KAAK,iBAAiB,YACzD,CACH,CCxJO,MAAMC,EAAc,CACzB,iBAAkB,kBAClB,OAAQ,SACR,YAAa,aACb,iBAAkB,kBAClB,mBAAoB,oBACpB,MAAO,QACP,IAAK,MACL,aAAc,aAChB,EAMaC,EAAe,CAC1B,GAAG,OAAO,QAAQD,CAAW,EAAE,OAC7B,CAACE,EAAK,CAACC,EAAK5B,CAAK,KAAO,CACtB,GAAG2B,EACH,CAACC,CAAG,EAAG,eAAe5B,CAAK,EACjC,GACI,CAAE,CACH,EACD,kBAAmB,8BACnB,eAAgB,4BAChB,aAAc,0BACd,sBAAuB,kCACvB,cAAe,2BACf,SAAU,sBACZ,GAM+B,CAC7B,GAAG,OAAO,QAAQyB,CAAW,EAAE,OAC7B,CAACE,EAAK,CAACC,EAAK5B,CAAK,KAAO,CACtB,GAAG2B,EACH,CAACC,CAAG,EAAG,kBAAkB5B,CAAK,EACpC,GACI,CAAE,CACH,CAGH,GC3CA,MAAM6B,UAAiB1C,CAAa,CAMlC,WAAWJ,EAAQiC,EAAU,CAC3B,KAAK,KAAK,GAAGjC,CAAM,IAAI0C,EAAY,MAAM,GAAI,CAAE,SAAAT,CAAQ,CAAE,CAC1D,CAOD,UAAUjC,EAAQK,EAAS,CACzB,KAAK,KAAK,GAAGL,CAAM,IAAI0C,EAAY,KAAK,GAAI,CAAE,QAAArC,CAAO,CAAE,CACxD,CAMD,QAAQL,EAAQ,CACd,KAAK,KAAK,GAAGA,CAAM,IAAI0C,EAAY,GAAG,GAAI,CAAA,CAAE,CAC7C,CAQD,aAAa1C,EAAQ+C,EAAW,CAC9B,MAAO,GAAG/C,CAAM,IAAI+C,CAAS,EAC9B,CACH,CAKA,MAAMlB,EAAW,IAAIiB,EC7Cd,MAAME,UAAsBrB,CAAc,CAK/C,YAAYC,EAAYC,EAAU,CAChC,MAAMD,EAAYC,CAAQ,EAC1B,KAAK,mBAAkB,CACxB,CAMD,oBAAqB,CAEnB,KAAK,OAAS,KAAK,WAAW,cAAc,iBAAiB,EAC7D,KAAK,0BAAyB,CAC/B,CAOD,qBAAsB,CACpB,MAAM,oBAAmB,EAGzB,KAAK,iBAAiB,iBAAiB,QAAUC,GAAM,CACrD,MAAMS,EAAST,EAAE,OAAO,QAAQ,kBAAkB,EAClD,GAAIS,EAAQ,CACV,MAAMjC,EAAU,KAAK,MAAMiC,EAAO,aAAa,SAAS,CAAC,EACnDU,EAAQV,EAAO,aAAa,OAAO,EAEzC,KAAK,SAAS,KAAKI,EAAa,aAAc,CAC5C,GAAGrC,EACH,MAAA2C,EACA,KAAM,QAChB,CAAS,EAGD,KAAK,WAAW,OAAQA,CAAK,EAC7B,KAAK,0BAAyB,CAC/B,CACP,CAAK,EAGD,KAAK,iBAAiB,iBAAiB,QAAUnB,GAAM,CACrD,MAAMoB,EAAiBpB,EAAE,OAAO,QAAQ,iBAAiB,EACzD,GAAIoB,EAAgB,CAClB,MAAM5C,EAAU,KAAK,MAAM4C,EAAe,aAAa,SAAS,CAAC,EAC3DD,EAAQC,EAAe,aAAa,OAAO,EAEjD,KAAK,SAAS,KAAKP,EAAa,sBAAuB,CACrD,GAAGrC,EACH,MAAA2C,EACA,KAAM,gBAChB,CAAS,EAGD,KAAK,WAAW,OAAQA,CAAK,CAC9B,CACP,CAAK,CACF,CAQD,WAAWb,EAASe,EAAa,GAAO,CACtC,MAAMd,EAAmB,SAAS,cAAc,KAAK,EACrDA,EAAiB,UAAY,oBAE7BD,EAAQ,QAASE,GAAe,CAC9B,MAAMC,EAAS,SAAS,cAAc,kBAAkB,EACxDA,EAAO,aAAa,QAASD,EAAW,IAAI,EAC5CC,EAAO,aAAa,UAAW,KAAK,UAAUD,EAAW,OAAO,CAAC,EAG7Da,GACFZ,EAAO,aAAa,gBAAiB,MAAM,EAG7CF,EAAiB,YAAYE,CAAM,CACzC,CAAK,EAED,KAAK,iBAAiB,YAAYF,CAAgB,EAClD,KAAK,eAAc,CACpB,CAQD,YAAYe,EAAOD,EAAa,GAAO,CACrC,MAAME,EAAW,SAAS,cAAc,oBAAoB,EAC5DA,EAAS,aAAa,QAAS,KAAK,UAAUD,CAAK,CAAC,EAGhDD,GACFE,EAAS,aAAa,gBAAiB,MAAM,EAG/C,KAAK,iBAAiB,YAAYA,CAAQ,EAC1C,KAAK,eAAc,CACpB,CAMD,2BAA4B,CAC1B,GAAI,CAAC,KAAK,OAAQ,OAGlB,MAAMC,EAAc,KAAK,OAAO,cAAc,gBAAgB,EAC1DA,GACFA,EAAY,iBAAiB,QAAS,IAAM,CAC1C,KAAK,UAAS,EACd,KAAK,SAAS,KAAKX,EAAa,aAAa,CACrD,CAAO,EAIH,MAAMY,EAAiB,KAAK,OAAO,cAAc,mBAAmB,EAChEA,GACFA,EAAe,iBAAiB,QAAS,IAAM,CAC7C,KAAK,SAAS,KAAKZ,EAAa,QAAQ,CAChD,CAAO,CAEJ,CAMD,WAAY,CACV,KAAO,KAAK,iBAAiB,YAC3B,KAAK,iBAAiB,YAAY,KAAK,iBAAiB,UAAU,CAErE,CAMD,uBAAuBa,EAAS,CAC1B,KAAK,SACP,KAAK,OAAO,MAAM,QAAUA,EAAU,OAAS,OAElD,CACH,CCzJO,MAAMC,UAAoBtD,CAAY,CAC3C,aAAc,CACZ,QACA,KAAK,WAAa,qBAClB,KAAK,UAAY,kBACjB,KAAK,WAAa,KAAK,aACxB,CAOD,cAAe,CACb,KAAK,GAAK,IAAI6C,EAAc,KAAK,WAAY,KAAK,QAAQ,EAC1D,KAAK,+BAA8B,EACnC,KAAK,YAAW,CACjB,CAMD,gCAAiC,CAE/B,KAAK,SAAS,GAAGL,EAAa,aAAerC,GAAY,CACvD,KAAK,WAAWA,CAAO,CAC7B,CAAK,EAGD,KAAK,SAAS,GAAGqC,EAAa,sBAAwBrC,GAAY,CAChE,KAAK,WAAWA,CAAO,CAC7B,CAAK,EAGD,KAAK,SAAS,GAAG,cAAgBD,GAAY,CAC3C,KAAK,cAAc,OAAQA,CAAO,EAClC,KAAK,YAAYA,CAAO,CAC9B,CAAK,EAGD,KAAK,SAAS,GAAG,kBAAmB,CAAC,CAAE,QAAA0B,EAAS,SAAAC,KAAe,CAC7D,KAAK,cAAc,YAAaD,EAASC,CAAQ,CACvD,CAAK,CACF,CAMD,aAAc,CACZ,OAAO,aAAa,QAAQ,KAAK,SAAS,IAAM,MACjD,CAMD,aAAc,CACZ,aAAa,QAAQ,KAAK,UAAW,MAAM,EAC3C,KAAK,WAAa,EACnB,CAOD,cAAcG,EAAQ9B,EAAS2B,EAAW,KAAM,CAC9C,MAAM0B,EAAU,KAAK,MAAM,aAAa,QAAQ,KAAK,UAAU,CAAC,GAAK,GAG/DC,EAAe,CACnB,OAAAxB,EACA,QAAA9B,EACA,UAAW,KAAK,IAAK,EACrB,cAAe,EACrB,EAGQ8B,IAAW,aAAeH,IACxBA,EAAS,OAAS,UACpB2B,EAAa,cAAgB,GAC7BA,EAAa,UAAY,SACzBA,EAAa,UAAY,CAAE,QAAS3B,EAAS,OAAO,GAC3CA,EAAS,OAAS,aAC3B2B,EAAa,cAAgB,GAC7BA,EAAa,UAAY,WACzBA,EAAa,UAAY,CAAE,MAAO3B,EAAS,aAAa,IAI5D0B,EAAQ,KAAKC,CAAY,EACzB,aAAa,QAAQ,KAAK,WAAY,KAAK,UAAUD,CAAO,CAAC,CAC9D,CAOD,aAAc,CACZ,MAAMA,EAAU,KAAK,MAAM,aAAa,QAAQ,KAAK,UAAU,CAAC,GAAK,GAGrEA,EAAQ,QAAQ,CAACE,EAAOC,IAAU,CAEhC,GAAID,EAAM,cAAe,CAEnBC,IAAUH,EAAQ,OAAS,GAC7B,KAAK,0BAA0BE,CAAK,EAGtC,MACD,CAGGA,EAAM,SACR,KAAK,GAAG,WAAWA,EAAM,OAAQA,EAAM,OAAO,CAEtD,CAAK,CACF,CAMD,0BAA0BD,EAAc,CAClCA,EAAa,YAAc,SAC7B,KAAK,GAAG,WAAWA,EAAa,UAAU,QAAS,EAAI,EAC9CA,EAAa,YAAc,YACpC,KAAK,GAAG,YAAYA,EAAa,UAAU,MAAO,EAAI,CAEzD,CAMD,cAAe,CACb,aAAa,WAAW,KAAK,UAAU,EACvC,aAAa,WAAW,KAAK,SAAS,EACtC,KAAK,WAAa,EACnB,CAMD,cAAcG,EAAO,CACnB,MAAMC,EAAM,SAAS,cAAc,KAAK,EACxC,OAAAA,EAAI,YAAcD,EACXC,EAAI,SACZ,CACH,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMC,EAAuB,SAAS,eAAe,iBAAiB,EAEtE,GAAI,CAACA,EAAsB,CACzB,QAAQ,MAAM,qCAAqC,EACnD,MACD,CAGD,IAAIC,EAAa,aAAa,QAAQ,mBAAmB,EACpDA,IACHA,EAAalE,EAAe,aAAa,EACzC,aAAa,QAAQ,oBAAqBkE,CAAU,GAItD,MAAMC,EAAkB,IAAI,YAAY,CACtC,OAAQD,EACR,SACE,gFACF,YAAa,MACjB,CAAG,EAGKE,EAAgB,IAAInB,EAAcgB,CAAoB,EAGxC,IAAIP,EAAYS,EAAiBC,CAAa,EAGtD,YAAW,CACzB,CAAC,EAED,QAAQ,IAAI,gCAAgC,EAE5C,eAAe,OAAO,eAAgBV,CAAW,EACjD,QAAQ,IAAI,mCAAmC,ECpMxC,MAAMW,UAAyBzC,CAAc,CAKlD,YAAYC,EAAYC,EAAU,CAChC,MAAMD,EAAYC,CAAQ,EAC1B,KAAK,mCAAkC,CACxC,CAMD,oCAAqC,CAEnC,KAAK,SAAS,GAAG,eAAgB,CAAC,CAAE,aAAAwC,CAAY,IAAO,CACrD,KAAK,oBAAoBA,CAAY,CAC3C,CAAK,CACF,CAOD,oBAAoBA,EAAc,CAChC,MAAMC,EAAmB,SAAS,cAAc,oBAAoB,EAC/DA,IAGLA,EAAiB,UAAY,GAG7BD,EAAa,QAASE,GAAQ,CAC5B,MAAMC,EAAa,KAAK,yBAAyBD,CAAG,EACpDD,EAAiB,YAAYE,CAAU,CAC7C,CAAK,EACF,CAQD,yBAAyBD,EAAK,CAC5B,MAAM9B,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,mBAEpB,MAAMgC,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,IAAMF,EAAI,SAAW,GAC1BE,EAAK,IAAMF,EAAI,MAAQ,mBACvBE,EAAK,UAAY,mBAEjB,MAAMC,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,YAAcH,EAAI,MAAQ,sBAC/BG,EAAK,UAAY,mBAEjB,MAAMC,EAAQ,SAAS,cAAc,MAAM,EAC3C,OAAAA,EAAM,UAAY,oBAClBA,EAAM,YAAcJ,EAAI,iBACpB,GAAGA,EAAI,gBAAgB,IACvB,MAEJ9B,EAAQ,YAAYgC,CAAI,EACxBhC,EAAQ,YAAYiC,CAAI,EACxBjC,EAAQ,YAAYkC,CAAK,EAElBlC,CACR,CASD,WAAWN,EAAQJ,EAASC,EAAW,KAAM,CACvCG,IAAW,cAAeH,GAAA,MAAAA,EAAU,kBACtCD,EAAU,KAAK,gCACbA,EACAC,EAAS,cACjB,GAEI,MAAM,WAAWG,EAAQJ,EAASC,CAAQ,CAC3C,CASD,gCAAgC3B,EAASuE,EAAS,CAChD,OAAOvE,EAAQ,QAAQ,aAAc,CAACwE,EAAOhC,IAAQ+B,EAAQ/B,CAAG,GAAKgC,CAAK,CAC3E,CACH,CCjGO,MAAMC,UAAuB3E,CAAY,CAC9C,aAAc,CACZ,QACA,KAAK,eAAiB,EACvB,CAOD,cAAe,CACb,KAAK,GAAK,IAAIiE,EAAiB,KAAK,WAAY,KAAK,QAAQ,EAC7D,KAAK,kCAAiC,CACvC,CAMD,0BAA2B,CACzB,KAAK,eAAiB,CACpB,MAAO,KAAK,aAAa,eAAe,EACxC,SAAU,KAAK,aAAa,kBAAkB,EAC9C,2BAA4B,KAAK,aAC/B,oCACD,EACD,qBAAsB,KAAK,aAAa,8BAA8B,EACtE,gBAAiB,KAAK,aAAa,yBAAyB,CAClE,EACI,KAAK,uBAAsB,CAC5B,CAOD,YAAa,CACX,KAAK,yBAAwB,EAC7B,MAAM,WAAU,CACjB,CAMD,wBAAyB,CAEvB,MAAMW,EADiB,CAAC,QAAS,UAAU,EACN,OAClCC,GAAU,CAAC,KAAK,eAAeA,CAAK,CAC3C,EAEQD,EAAc,OAAS,IACzB,QAAQ,MACN,qCAAqCA,EAAc,KAAK,IAAI,CAAC,EACrE,EACM,KAAK,SAAS,KAAK,QAAS,CAC1B,QACE,yEACV,CAAO,EAEJ,CAMD,mCAAoC,OAElC,KAAK,SAAS,GAAG,QAAS,CAAC,CAAE,KAAAE,EAAM,QAAA3E,KAAc,CAC3C2E,IAAS,iBACX,KAAK,mBAAmB3E,CAAO,CAEvC,CAAK,GAGD4E,EAAA,KAAK,WACF,cAAc,aAAa,IAD9B,MAAAA,EAEI,iBAAiB,QAAS,IAAM,CAC3B,KAAK,YACR,KAAK,OAAM,CAErB,EACG,CAOD,mBAAmB5E,EAAS,CACtBA,EAAQ,cACV,KAAK,SAAS,KAAK,eAAgB,CACjC,aAAcA,EAAQ,YAC9B,CAAO,CAEJ,CAOD,yBAA0B,CACxB,MAAO,CACL,OAAQ,CACN,KAAM,SACN,QAAS,CACP,QAAS,CACP,WAAY,iBACZ,oBAAqB,KAAK,cAC3B,CACF,CACF,CACP,CACG,CAOD,QAAS,CACP,KAAK,WAAW,KAAK,wBAAyB,CAAA,CAC/C,CACH,CAGA,eAAe,OAAO,kBAAmBwE,CAAc,ECzIhD,MAAMK,UAAwB,WAAY,CAC/C,aAAc,CACZ,QAEA,KAAK,aAAa,CAAE,KAAM,MAAQ,CAAA,CACnC,CAED,mBAAoB,CAClB,MAAMlC,EAAQ,KAAK,aAAa,OAAO,EACjC3C,EAAU,KAAK,aAAa,SAAS,EAE3C,KAAK,OAAO2C,EAAO3C,CAAO,CAC3B,CAOD,OAAO2C,EAAO3C,EAAS,CACrB,KAAK,WAAW,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDA6BmBA,CAAO,iBAAiB2C,CAAK,KAAKA,CAAK;AAAA;AAAA,MAKtF,KAAK,WAAW,cAAc,SAAS,EAAE,iBAAiB,QAAS,IAAM,CAEvE,GAAI,CACF,MAAMmC,EAAgB,KAAK,MAAM9E,CAAO,EACxCuB,EAAS,KAAK,gBAAiBuD,CAAa,CAC7C,OAAQxE,EAAO,CACd,QAAQ,MAAM,gCAAiCA,CAAK,CACrD,CACP,CAAK,CACF,CACH,CClEO,MAAMyE,UAAyB,WAAY,CAChD,aAAc,CACZ,QAEA,KAAK,aAAa,CAAE,KAAM,MAAQ,CAAA,CACnC,CAED,mBAAoB,CAClB,MAAMlD,EAAS,KAAK,aAAa,QAAQ,EACnCJ,EAAU,KAAK,aAAa,SAAS,EAE3C,KAAK,OAAOI,EAAQJ,CAAO,CAC5B,CAOD,OAAOI,EAAQJ,EAAS,CACtB,MAAMuD,EAAcnD,IAAW,YAC/B,KAAK,WAAW,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAoCpBmD,EAAc,UAAY,0BAC3B;AAAA,mBACQA,EAAc,UAAY,SAAS;AAAA,oBAClCA,EAAc,OAAS,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAuBTnD,CAAM;AAAA,UACjDmD,EAAc,uCAAyC,EAAE;AAAA,uCAC5BnD,CAAM;AAAA,0CACH,KAAK,eAAeJ,CAAO,CAAC;AAAA;AAAA;AAAA,KAInE,CAQD,eAAewD,EAAU,CACvB,OAAKA,EACEA,EAAS,QAAQ,MAAO,MAAM,EADf,EAEvB,CACH,CChGO,MAAMC,UAA0B,WAAY,CACjD,aAAc,CACZ,QAEA,KAAK,aAAa,CAAE,KAAM,MAAQ,CAAA,EAGlC,KAAK,MAAQ,GACb,KAAK,aAAe,EACpB,KAAK,UAAY,OAAO,WAAW,qBAAqB,EAAE,QAC1D,KAAK,cAAgB,KAAK,UAAY,EAAI,EAG1C,KAAK,SAAW,KAAK,SAAS,KAAK,IAAI,EACvC,KAAK,UAAY,KAAK,UAAU,KAAK,IAAI,EACzC,KAAK,aAAe,KAAK,aAAa,KAAK,IAAI,EAC/C,KAAK,kBAAoB,KAAK,kBAAkB,KAAK,IAAI,CAC1D,CAKD,mBAAoB,CAClB,MAAMC,EAAW,KAAK,aAAa,eAAe,EAClD,GAAI,CAACA,EAAU,CACb,QAAQ,MACN,2DACR,EACM,MACD,CAED,IAAIC,EACJ,GAAI,CACFA,EAAe,KAAK,MAAMD,CAAQ,CACnC,OAAQE,EAAK,CACZ,QAAQ,MAAM,iCAAkCA,CAAG,EACnD,MACD,CAGD,GAAI,CAACD,GAAgB,CAAC,MAAM,QAAQA,EAAa,KAAK,EAAG,CACvD,QAAQ,MAAM,mDAAmD,EACjE,MACD,CAED,KAAK,eAAeA,CAAY,CACjC,CAMD,eAAeA,EAAc,CAC3B,KAAK,aAAeA,EACpsK5B,KAAK,kBAAoB,KAAK,WAAW,cACvC,sBACN,EACI,KAAK,WAAa,KAAK,WAAW,cAAc,yBAAyB,EACzE,KAAK,YAAc,KAAK,WAAW,cACjC,0BACN,EAGI,KAAK,aAAa,MAAM,QAAQ,CAACE,EAAM/B,IAAU,CAC/C,MAAMgC,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,UAAU,IAAI,gBAAgB,EAEnC,MAAMC,EAAc,SAAS,cAAc,KAAK,EAChDA,EAAY,UAAU,IAAI,wBAAwB,EAElD,MAAMC,EAAc,SAAS,cAAc,KAAK,EAIhD,GAHAA,EAAY,UAAU,IAAI,wBAAwB,EAG9CH,EAAK,SAAU,CACjB,MAAMI,EAAM,SAAS,cAAc,KAAK,EACxCA,EAAI,IAAMJ,EAAK,SACfI,EAAI,IAAMJ,EAAK,OAAS,GACxBI,EAAI,UAAU,IAAI,sBAAsB,EACxCD,EAAY,YAAYC,CAAG,CAC5B,CAGD,GAAIJ,EAAK,MAAO,CACd,MAAMK,EAAQ,SAAS,cAAc,IAAI,EACzCA,EAAM,UAAU,IAAI,sBAAsB,EAC1CA,EAAM,YAAcL,EAAK,MACzBG,EAAY,YAAYE,CAAK,CAC9B,CAGD,GAAIL,EAAK,aAAeA,EAAK,YAAY,KAAM,CAC7C,MAAMM,EAAc,SAAS,cAAc,GAAG,EAC9CA,EAAY,UAAU,IAAI,4BAA4B,EACtDA,EAAY,YAAcN,EAAK,YAAY,KAC3CG,EAAY,YAAYG,CAAW,CACpC,CAGD,GAAIN,EAAK,SAAWA,EAAK,QAAQ,OAAS,EAAG,CAC3C,MAAMtD,EAAasD,EAAK,QAAQ,CAAC,EAC3BrD,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,UAAU,IAAI,SAAU,uBAAuB,EACtDA,EAAO,aAAa,oBAAqBsB,CAAK,EAC9CtB,EAAO,aACL,sBACA,KAAK,UAAUD,EAAW,OAAO,CAC3C,EACQC,EAAO,aAAa,mBAAoBD,EAAW,IAAI,EACvDC,EAAO,YAAcD,EAAW,MAAQ,SACxCyD,EAAY,YAAYxD,CAAM,EAG9BA,EAAO,iBAAiB,QAAS,KAAK,iBAAiB,CACxD,CAGDuD,EAAY,YAAYC,CAAW,EACnCF,EAAK,YAAYC,CAAW,EAC5B,KAAK,kBAAkB,YAAYD,CAAI,EACvC,KAAK,MAAM,KAAKA,CAAI,CAC1B,CAAK,EAGD,KAAK,aAAY,EAGjB,KAAK,WAAW,iBAAiB,QAAS,KAAK,QAAQ,EACvD,KAAK,YAAY,iBAAiB,QAAS,KAAK,SAAS,EAGzD,OAAO,iBAAiB,SAAU,KAAK,YAAY,EAEnD,KAAK,iBAAgB,EACrB,KAAK,eAAc,CACpB,CAKD,cAAe,CACb,KAAK,UAAY,OAAO,WAAW,qBAAqB,EAAE,QAC1D,KAAK,cAAgB,KAAK,UAAY,EAAI,EAC1C,KAAK,aAAe,EACpB,KAAK,iBAAgB,EACrB,KAAK,eAAc,CACpB,CAKD,cAAe,CACb,KAAK,UAAY,OAAO,WAAW,qBAAqB,EAAE,QAC1D,KAAK,cAAgB,KAAK,UAAY,EAAI,EAC1C,KAAK,aAAe,EACpB,KAAK,eAAc,EACnB,KAAK,iBAAgB,CACtB,CAKD,UAAW,CACT,MAAMM,EAAgB,KAAK,cAC3B,KAAK,aAAe,KAAK,IAAI,EAAG,KAAK,aAAeA,CAAa,EACjE,KAAK,eAAc,EACnB,KAAK,iBAAgB,CACtB,CAKD,WAAY,CACV,MAAMA,EAAgB,KAAK,cAC3B,KAAK,aAAe,KAAK,IACvB,KAAK,MAAM,OAASA,EACpB,KAAK,aAAeA,CAC1B,EACI,KAAK,eAAc,EACnB,KAAK,iBAAgB,CACtB,CAKD,gBAAiB,CACf,MAAMA,EAAgB,KAAK,cACrBC,EAAS,EAAE,KAAK,aAAeD,GAAiB,IACtD,KAAK,kBAAkB,MAAM,UAAY,cAAcC,CAAM,IAC9D,CAKD,kBAAmB,CACjB,MAAMD,EAAgB,KAAK,cAC3B,KAAK,WAAW,SAAW,KAAK,eAAiB,EACjD,KAAK,YAAY,SACf,KAAK,cAAgB,KAAK,MAAM,OAASA,CAC5C,CAMD,kBAAkBrE,EAAG,CACnB,MAAMS,EAAST,EAAE,OACXuE,EAAc,SAAS9D,EAAO,aAAa,mBAAmB,EAAG,EAAE,EACnEqD,EAAO,KAAK,aAAa,MAAMS,CAAW,EAEhD,GAAI,CAACT,GAAQ,CAACA,EAAK,SAAWA,EAAK,QAAQ,SAAW,EAAG,CACvD,QAAQ,KAAK,qCAAqC,EAClD,MACD,CAED,MAAMtD,EAAasD,EAAK,QAAQ,CAAC,EACjC,QAAQ,IAAI,wBAAyBtD,CAAU,EAG/C,MAAMgE,EAAehE,EAAW,QAAQ,QAAQ,MAC1CiE,EAAeD,EACjB,YAAYA,CAAY,GACxB,yBAEJzE,EAAS,KAAK,wBAAyB,CACrC,OAAQS,EAAW,QACnB,MAAOiE,CACb,CAAK,EAGD,KAAK,OAAM,CACZ,CACH,CChZA,eAAe,OAAO,mBAAoBpB,CAAe,EACzD,eAAe,OAAO,oBAAqBE,CAAgB,EAC3D,eAAe,OAAO,qBAAsBG,CAAiB"}