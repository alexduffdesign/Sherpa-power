{"version":3,"file":"chatbot-section.Cg-aSKt0.js","sources":["../frontend/entrypoints/chatbot-section.js"],"sourcesContent":["// /assets/scripts/chatbot/section/chatbot-section.js\n\nimport ChatbotCore from \"../core/chatbot-core.js\";\nimport SectionChatbotUI from \"../ui/chatbot-section-ui.js\";\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * SectionChatbot Class\n * Manages the Section Chatbot's interactions, handles product details, and updates the UI.\n */\nclass SectionChatbot {\n  /**\n   * Constructor initializes ChatbotCore and SectionChatbotUI, sets up event listeners.\n   * @param {ChatbotCore} core - Instance of ChatbotCore handling API communications.\n   * @param {SectionChatbotUI} ui - Instance of SectionChatbotUI handling UI updates.\n   */\n  constructor(core, ui) {\n    this.core = core;\n    this.ui = ui;\n    this.isLaunched = false;\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for ChatbotCore events.\n   */\n  setupEventListeners() {\n    // Listen to events emitted by ChatbotCore via EventBus\n    eventBus.on(EVENTS.SECTION_CHATBOT.MESSAGE_RECEIVED, (data) => {\n      this.ui.addMessage(\"assistant\", data.content);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.CHOICE_PRESENTED, (data) => {\n      this.ui.addButtons(data.choices);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.CAROUSEL_PRESENTED, (data) => {\n      this.ui.addCarousel(data.carouselItems);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.DEVICE_ANSWER, (data) => {\n      this.ui.populateApplicationsGrid(data.devices);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.ERROR, (error) => {\n      this.ui.displayError(error.message);\n    });\n  }\n\n  /**\n   * Launches the chatbot by sending a launch request with required variables.\n   */\n  launch() {\n    if (this.isLaunched) return;\n\n    const interactPayload = {\n      action: {\n        type: \"launch\",\n        payload: {\n          startBlock: \"shopifySection\",\n          productDetails: this.ui.productDetails,\n        },\n      },\n    };\n\n    this.core.sendLaunch(interactPayload);\n    this.isLaunched = true;\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    this.core.sendMessage(message);\n    this.ui.addMessage(\"user\", message);\n    // Note: Section Chatbot does not maintain history\n  }\n}\n\n// Initialize Section Chatbot on DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const sectionChatbotContainer = document.getElementById(\"section-chatbot-ui\");\n\n  if (!sectionChatbotContainer) {\n    console.error(\"Section Chatbot UI container not found\");\n    return;\n  }\n\n  // Generate or retrieve existing userID for Section Chatbot\n  let sectionUserId = localStorage.getItem(\"sectionChatbotUserId\");\n  if (!sectionUserId) {\n    sectionUserId = generateUserId(\"sectionChatbot\");\n    localStorage.setItem(\"sectionChatbotUserId\", sectionUserId);\n  }\n\n  // Initialize ChatbotCore with the generated userID\n  const sectionChatbotCore = new ChatbotCore({\n    userID: sectionUserId,\n    endpoint:\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\",\n    chatbotType: \"section\",\n  });\n\n  // Initialize SectionChatbotUI\n  const sectionChatbotUI = new SectionChatbotUI(sectionChatbotContainer);\n\n  // Initialize SectionChatbot\n  const sectionChatbot = new SectionChatbot(\n    sectionChatbotCore,\n    sectionChatbotUI\n  );\n\n  // Listen for user message submissions\n  sectionChatbotUI.onUserMessage((message) => {\n    sectionChatbot.sendMessage(message);\n  });\n\n  // Listen for button clicks from UI components\n  sectionChatbotUI.onButtonClick((payload) => {\n    sectionChatbot.sendMessage(JSON.stringify(payload));\n  });\n\n  // Handle launch event on first focus of the input field\n  let hasLaunched = false;\n  const sectionInput = sectionChatbotContainer.querySelector(\n    \"#section-chatbot-input\"\n  );\n\n  if (sectionInput) {\n    sectionInput.addEventListener(\"focus\", () => {\n      if (!hasLaunched) {\n        sectionChatbot.launch();\n        hasLaunched = true;\n      }\n    });\n  } else {\n    console.error(\"Section Chatbot input field not found\");\n  }\n});\n\nexport default SectionChatbot;\n"],"names":["SectionChatbot","core","ui","eventBus","EVENTS","data","error","interactPayload","message","sectionChatbotContainer","sectionUserId","generateUserId","sectionChatbotCore","ChatbotCore","sectionChatbotUI","SectionChatbotUI","sectionChatbot","payload","hasLaunched","sectionInput"],"mappings":"sJAYA,MAAMA,CAAe,CAMnB,YAAYC,EAAMC,EAAI,CACpB,KAAK,KAAOD,EACZ,KAAK,GAAKC,EACV,KAAK,WAAa,GAElB,KAAK,oBAAmB,CACzB,CAKD,qBAAsB,CAEpBC,EAAS,GAAGC,EAAO,gBAAgB,iBAAmBC,GAAS,CAC7D,KAAK,GAAG,WAAW,YAAaA,EAAK,OAAO,CAClD,CAAK,EAEDF,EAAS,GAAGC,EAAO,gBAAgB,iBAAmBC,GAAS,CAC7D,KAAK,GAAG,WAAWA,EAAK,OAAO,CACrC,CAAK,EAEDF,EAAS,GAAGC,EAAO,gBAAgB,mBAAqBC,GAAS,CAC/D,KAAK,GAAG,YAAYA,EAAK,aAAa,CAC5C,CAAK,EAEDF,EAAS,GAAGC,EAAO,gBAAgB,cAAgBC,GAAS,CAC1D,KAAK,GAAG,yBAAyBA,EAAK,OAAO,CACnD,CAAK,EAEDF,EAAS,GAAGC,EAAO,gBAAgB,MAAQE,GAAU,CACnD,KAAK,GAAG,aAAaA,EAAM,OAAO,CACxC,CAAK,CACF,CAKD,QAAS,CACP,GAAI,KAAK,WAAY,OAErB,MAAMC,EAAkB,CACtB,OAAQ,CACN,KAAM,SACN,QAAS,CACP,WAAY,iBACZ,eAAgB,KAAK,GAAG,cACzB,CACF,CACP,EAEI,KAAK,KAAK,WAAWA,CAAe,EACpC,KAAK,WAAa,EACnB,CAMD,YAAYC,EAAS,CACnB,KAAK,KAAK,YAAYA,CAAO,EAC7B,KAAK,GAAG,WAAW,OAAQA,CAAO,CAEnC,CACH,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMC,EAA0B,SAAS,eAAe,oBAAoB,EAE5E,GAAI,CAACA,EAAyB,CAC5B,QAAQ,MAAM,wCAAwC,EACtD,MACD,CAGD,IAAIC,EAAgB,aAAa,QAAQ,sBAAsB,EAC1DA,IACHA,EAAgBC,EAAe,gBAAgB,EAC/C,aAAa,QAAQ,uBAAwBD,CAAa,GAI5D,MAAME,EAAqB,IAAIC,EAAY,CACzC,OAAQH,EACR,SACE,gFACF,YAAa,SACjB,CAAG,EAGKI,EAAmB,IAAIC,EAAiBN,CAAuB,EAG/DO,EAAiB,IAAIhB,EACzBY,EACAE,CACJ,EAGEA,EAAiB,cAAeN,GAAY,CAC1CQ,EAAe,YAAYR,CAAO,CACtC,CAAG,EAGDM,EAAiB,cAAeG,GAAY,CAC1CD,EAAe,YAAY,KAAK,UAAUC,CAAO,CAAC,CACtD,CAAG,EAGD,IAAIC,EAAc,GAClB,MAAMC,EAAeV,EAAwB,cAC3C,wBACJ,EAEMU,EACFA,EAAa,iBAAiB,QAAS,IAAM,CACtCD,IACHF,EAAe,OAAM,EACrBE,EAAc,GAEtB,CAAK,EAED,QAAQ,MAAM,uCAAuC,CAEzD,CAAC"}