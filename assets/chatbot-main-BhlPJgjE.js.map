{"version":3,"file":"chatbot-main-BhlPJgjE.js","sources":["../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// chatbot-main.js\n\nimport { ChatbotCore } from \"./chatbot-core-file.js\";\n\nconsole.log(\"MainChatbot module loading\");\n\nclass MainChatbot {\n  constructor(element, config) {\n    console.log(\"MainChatbot constructor called with config:\", config);\n    this.element = element;\n    this.voiceflowEndpoint = config.voiceflowEndpoint;\n\n    this.core = new ChatbotCore({\n      apiEndpoint: this.voiceflowEndpoint,\n      userIDPrefix: \"mainChatbot\",\n    });\n    console.log(\"ChatbotCore instance created:\", this.core);\n\n    this.conversationHistory = [];\n    this.hasLaunched = localStorage.getItem(\"chatHasLaunched\") === \"true\";\n\n    this.eventListenersAttached = false;\n\n    this.initializeElements();\n    this.setupEventListeners();\n\n    if (this.hasLaunched) {\n      this.loadConversationFromStorage();\n      this.displaySavedConversation();\n    } else {\n      this.initializeChat(); // Call initializeChat if it hasn't launched before\n    }\n  }\n\n  initializeElements() {\n    console.log(\"MainChatbot initializeElements called\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    const typingIndicator = this.element.querySelector(\".chat-typing\");\n    const drawer = this.element.closest(\"x-drawer\");\n    let drawerBody = null;\n\n    if (drawer && drawer.shadowRoot) {\n      drawerBody = drawer.shadowRoot.querySelector('[part=\"body\"]');\n    }\n\n    if (!messageContainer || !typingIndicator || !drawerBody) {\n      console.error(\"Required DOM elements not found\");\n      return;\n    }\n\n    this.core.setDOMElements(messageContainer, typingIndicator, drawerBody);\n    console.log(\"DOM elements set in ChatbotCore:\", this.core);\n  }\n\n  setupEventListeners() {\n    if (this.eventListenersAttached) return;\n\n    console.log(\"MainChatbot setupEventListeners called\");\n    const form = this.element.querySelector(\"#chatForm\");\n    const input = this.element.querySelector(\"#userInput\");\n\n    if (!form || !input) {\n      console.error(\"Chat form or input not found\");\n      return;\n    }\n\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const message = input.value.trim();\n      if (message) {\n        console.log(\"Form submitted with message:\", message);\n        input.value = \"\"; // Clear the input field immediately\n        await this.handleUserMessage(message);\n      }\n    });\n\n    this.element.addEventListener(\"click\", async (e) => {\n      if (e.target.matches(\".button-container button\")) {\n        const buttonData = JSON.parse(e.target.dataset.buttonData);\n        try {\n          const response = await this.core.handleButtonClick(buttonData);\n          await this.handleAgentResponse(response);\n        } catch (error) {\n          console.error(\"Error handling button click:\", error);\n        }\n      }\n    });\n\n    this.eventListenersAttached = true;\n  }\n\n  async handleUserMessage(message) {\n    this.core.addMessage(\"user\", message);\n    this.conversationHistory.push({ type: \"user\", message: message });\n    this.saveConversationToStorage();\n\n    this.core.showTypingIndicator();\n    try {\n      const response = await this.core.sendMessage(message);\n      console.log(\"Response from sendMessage:\", response);\n      await this.handleAgentResponse(response);\n    } catch (error) {\n      console.error(\"Error in send message:\", error);\n    } finally {\n      this.core.hideTypingIndicator();\n      this.core.scrollToBottom();\n    }\n  }\n\n  loadConversationFromStorage() {\n    const savedConversation = localStorage.getItem(\"chatConversation\");\n    this.conversationHistory = savedConversation\n      ? JSON.parse(savedConversation)\n      : [];\n    console.log(\"Loaded conversation from storage:\", this.conversationHistory);\n  }\n\n  saveConversationToStorage() {\n    localStorage.setItem(\n      \"chatConversation\",\n      JSON.stringify(this.conversationHistory)\n    );\n    console.log(\"Saved conversation to storage\");\n  }\n\n  displaySavedConversation() {\n    console.log(\"Displaying saved conversation\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      messageContainer.innerHTML = \"\"; // Clear existing messages\n      this.conversationHistory.forEach((turn) => {\n        this.core.addMessage(turn.type, turn.message);\n      });\n      this.core.scrollToBottom();\n    } else {\n      console.error(\"Message container not found\");\n    }\n  }\n\n  async initializeChat() {\n    console.log(\"Initializing chat\");\n    if (!this.hasLaunched) {\n      console.log(\"Initializing chat for the first time\");\n      await this.sendLaunch();\n      this.hasLaunched = true;\n      localStorage.setItem(\"chatHasLaunched\", \"true\");\n    }\n    console.log(\"Chat initialized\");\n  }\n\n  async sendLaunch() {\n    console.log(\"Sending main chatbot launch request\");\n\n    const interactPayload = {\n      userAction: {\n        type: \"launch\",\n      },\n    };\n\n    try {\n      const response = await this.core.sendLaunch(interactPayload);\n      await this.handleAgentResponse(response);\n    } catch (error) {\n      console.error(\"Error in main chatbot send launch:\", error);\n    }\n  }\n\n  async handleAgentResponse(response) {\n    console.log(\"Handling agent response:\", response);\n    for (const trace of response) {\n      if (trace.type === \"text\") {\n        this.core.addMessage(\"assistant\", trace.payload.message);\n        this.conversationHistory.push({\n          type: \"assistant\",\n          message: trace.payload.message,\n        });\n      } else if (trace.type === \"choice\") {\n        this.core.addButtons(trace.payload.buttons);\n      } else if (trace.type === \"carousel\") {\n        this.addCarousel(trace.payload);\n      } else {\n        console.log(\"Unknown trace type:\", trace.type);\n      }\n    }\n    this.saveConversationToStorage();\n    this.core.scrollToBottom();\n  }\n\n  // < Carousel JS > //\n\n  addCarousel(carouselData) {\n    console.log(\"Adding carousel:\", carouselData);\n    const carouselElement = document.createElement(\"div\");\n    carouselElement.className = \"carousel\";\n    carouselElement.innerHTML = `\n    <div class=\"carousel__container\">\n      <!-- Carousel items will be dynamically added here -->\n    </div>\n    <button class=\"carousel__button carousel__button--left\" aria-label=\"Previous slide\">\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    </button>\n    <button class=\"carousel__button carousel__button--right\" aria-label=\"Next slide\">\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M9 18L15 12L9 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    </button>\n  `;\n\n    const carousel = new Carousel(carouselElement);\n\n    for (let i = 0; i < carouselData.cards.length; i += 2) {\n      const itemContent = carouselData.cards\n        .slice(i, i + 2)\n        .map(\n          (card) => `\n      <div class=\"carousel__item-wrapper\">\n        <div class=\"carousel__item-content\">\n          <img src=\"${card.imageUrl}\" alt=\"${card.title}\" class=\"carousel__item-image\">\n          <h6 class=\"carousel__item-title\">${card.title}</h6>\n          <p class=\"carousel__item-description\">${card.description.text}</p>\n          <button class=\"button carousel__item-button\" data-button-index=\"0\">${card.buttons[0].name}</button>\n        </div>\n      </div>\n    `\n        )\n        .join(\"\");\n\n      carousel.addItem(itemContent);\n    }\n\n    const buttons = carouselElement.querySelectorAll(\".carousel__item-button\");\n    buttons.forEach((button, index) => {\n      button.addEventListener(\"click\", async () => {\n        const cardIndex = Math.floor(\n          index / carouselData.cards[0].buttons.length\n        );\n        const buttonIndex = index % carouselData.cards[0].buttons.length;\n        const buttonData = carouselData.cards[cardIndex].buttons[buttonIndex];\n        try {\n          const response = await this.core.handleButtonClick(buttonData);\n          await this.handleAgentResponse(response);\n        } catch (error) {\n          console.error(\"Error handling carousel button click:\", error);\n        }\n      });\n    });\n\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      messageContainer.appendChild(carouselElement);\n      this.core.scrollToBottom();\n    } else {\n      console.error(\"Message container not found when adding carousel\");\n    }\n  }\n}\n\nclass Carousel {\n  constructor(element) {\n    this.element = element;\n    this.container = element.querySelector(\".carousel__container\");\n    this.leftButton = element.querySelector(\".carousel__button--left\");\n    this.rightButton = element.querySelector(\".carousel__button--right\");\n    this.items = [];\n    this.currentIndex = 0;\n\n    this.leftButton.addEventListener(\"click\", () => this.move(\"left\"));\n    this.rightButton.addEventListener(\"click\", () => this.move(\"right\"));\n  }\n\n  addItem(content) {\n    const item = document.createElement(\"div\");\n    item.className = \"carousel__item\";\n    item.innerHTML = content;\n    this.container.appendChild(item);\n    this.items.push(item);\n    this.updateVisibility();\n  }\n\n  move(direction) {\n    if (direction === \"left\") {\n      this.currentIndex = Math.max(0, this.currentIndex - 1);\n    } else {\n      this.currentIndex = Math.min(\n        this.items.length - 1,\n        this.currentIndex + 1\n      );\n    }\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  updatePosition() {\n    const offset = -this.currentIndex * 100;\n    this.container.style.transform = `translateX(${offset}%)`;\n  }\n\n  updateVisibility() {\n    this.leftButton.style.display = this.currentIndex === 0 ? \"none\" : \"flex\";\n    this.rightButton.style.display =\n      this.currentIndex === this.items.length - 1 ? \"none\" : \"flex\";\n  }\n}\nconsole.log(\"MainChatbot module loaded\");\n\nexport default MainChatbot;\n"],"names":["MainChatbot","element","config","ChatbotCore","messageContainer","typingIndicator","drawer","drawerBody","form","input","e","message","buttonData","response","error","savedConversation","turn","interactPayload","trace","carouselData","carouselElement","carousel","Carousel","i","itemContent","card","button","index","cardIndex","buttonIndex","content","item","direction","offset"],"mappings":"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"}