import{E as c}from"./vendor.DqvJXvYX.js";class d{constructor(e){if(!e.userID)throw new Error("ChatbotCore requires a userID");if(!e.endpoint)throw new Error("ChatbotCore requires an endpoint URL");if(!e.type)throw new Error("ChatbotCore requires a type ('main' or 'section')");this.userID=e.userID,this.endpoint=e.endpoint,this.type=e.type,this.eventBus=new c,this.abortController=null}async sendLaunch(e={}){console.log("Constructing launch payload:",e);const t=e.action?e:{action:{type:"launch"}};return this.sendAction(t)}async sendMessage(e){console.log("Constructing message payload:",e);const t={action:{type:"text",payload:e}};return this.sendAction(t)}async sendAction(e){try{this.abortController&&(this.abortController.abort(),await new Promise(r=>setTimeout(r,100))),this.abortController=new AbortController;const{signal:t}=this.abortController;this.eventBus.emit("typing",{isTyping:!0});const s=await fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"text/event-stream"},body:JSON.stringify({userID:this.userID,action:e.action}),credentials:"include",signal:t});if(!s.ok)throw new Error(`API responded with status ${s.status}`);await this.handleSSEResponse(s)}catch(t){if(t.name==="AbortError"){console.debug("Request aborted, new request in progress");return}this.handleError(t)}}async handleSSEResponse(e){const t=e.body.getReader(),s=new TextDecoder("utf-8");let r="";try{for(;;){const{done:n,value:i}=await t.read();if(n){this.eventBus.emit("end",{});break}r+=s.decode(i,{stream:!0});const o=r.split(`

`);r=o.pop(),o.forEach(a=>{a.trim()!==""&&this.processEventString(a)})}}catch(n){this.handleError(n)}finally{this.eventBus.emit("typing",{isTyping:!1})}}processEventString(e){console.log("Raw SSE event string:",e);try{const t=e.split(`
`),s=t.find(o=>o.startsWith("event:")),r=t.find(o=>o.startsWith("data:")),n=s?s.split(":")[1].trim():"trace",i=r?JSON.parse(e.substring(e.indexOf("data:")+5).trim()):null;n==="trace"&&this.processTrace(i)}catch(t){console.error("Error processing SSE event:",t)}}processTrace(e){if(!e.type){console.warn("Trace without type received:",e);return}switch(console.log("processTrace called with:",e),e.type){case"text":console.log("Emitting messageReceived event..."),this.eventBus.emit("messageReceived",{content:e.payload.message,metadata:e.payload.metadata||null});break;case"choice":this.eventBus.emit("choicePresented",{type:"choice",buttons:e.payload.buttons});break;case"carousel":this.eventBus.emit("carouselPresented",{type:"carousel",items:e.payload.cards});break;case"device_answer":this.type==="section"&&this.eventBus.emit("deviceAnswer",e.payload);break;default:console.warn(`Unhandled trace type: ${e.type}`,e)}}handleError(e){console.error("Chatbot error:",e),this.eventBus.emit("error",{message:e.message}),this.eventBus.emit("typing",{isTyping:!1})}destroy(){this.abortController&&this.abortController.abort(),this.eventBus.removeAllListeners()}}export{d as C};
//# sourceMappingURL=base-chatbot.B-MLoxE6.js.map
