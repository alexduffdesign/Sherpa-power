{"version":3,"file":"chatbot-base.DCJ5-2Hq.js","sources":["../frontend/entrypoints/chatbot-base.js"],"sourcesContent":["import { ApiClient } from \"./chatbot-api\";\nimport { UIManager } from \"./chatbot-ui\";\nimport { StreamHandler } from \"./chatbot-stream\";\nimport { TraceHandler } from \"./chatbot-trace\";\n\nexport class ChatbotBase {\n  constructor(config) {\n    console.log(\"ChatbotBase constructor called with config:\", config);\n\n    // Initialize core components\n    this.api = new ApiClient(config);\n    this.ui = new UIManager();\n    this.stream = new StreamHandler();\n    this.traceHandler = new TraceHandler(this.ui);\n\n    // Set up trace handling\n    this.traceHandler.onSpecialTrace = this.handleSpecialTrace.bind(this);\n\n    // Bind methods\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  setDOMElements(messageContainer, typingIndicator, drawerBody) {\n    this.ui.setDOMElements(messageContainer, typingIndicator, drawerBody);\n  }\n\n  async sendMessage(message) {\n    console.log(\"Sending message:\", message);\n\n    try {\n      // Close any existing stream\n      this.stream.closeCurrentStream();\n\n      // Show typing indicator before starting stream\n      this.ui.showTypingIndicator();\n\n      // Start new stream\n      const response = await this.api.streamInteract(message);\n      const result = await this.stream.handleStream(\n        response,\n        this.traceHandler\n      );\n\n      // Hide typing indicator after stream completes\n      this.ui.hideTypingIndicator();\n\n      return result;\n    } catch (error) {\n      console.error(\"Error in send message:\", error);\n      this.ui.hideTypingIndicator();\n      // Add error message to UI\n      this.ui.addMessage(\n        \"assistant\",\n        \"I apologize, but I encountered an error. Please try again.\"\n      );\n      throw error;\n    }\n  }\n\n  async handleButtonClick(buttonData) {\n    console.log(\"Handling button click:\", buttonData);\n    try {\n      this.ui.removeButtons();\n      this.ui.showTypingIndicator();\n      const result = await this.sendMessage(buttonData.name);\n      this.ui.hideTypingIndicator();\n      return result;\n    } catch (error) {\n      console.error(\"Error handling button click:\", error);\n      this.ui.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  // Override this method in child classes to handle special traces\n  async handleSpecialTrace(trace) {\n    console.log(\"Base handler received special trace:\", trace);\n  }\n}\n"],"names":["ChatbotBase","config","ApiClient","UIManager","StreamHandler","TraceHandler","messageContainer","typingIndicator","drawerBody","message","response","result","error","buttonData","trace"],"mappings":"4LAKO,MAAMA,CAAY,CACvB,YAAYC,EAAQ,CAClB,QAAQ,IAAI,8CAA+CA,CAAM,EAGjE,KAAK,IAAM,IAAIC,EAAUD,CAAM,EAC/B,KAAK,GAAK,IAAIE,EACd,KAAK,OAAS,IAAIC,EAClB,KAAK,aAAe,IAAIC,EAAa,KAAK,EAAE,EAG5C,KAAK,aAAa,eAAiB,KAAK,mBAAmB,KAAK,IAAI,EAGpE,KAAK,YAAc,KAAK,YAAY,KAAK,IAAI,EAC7C,KAAK,kBAAoB,KAAK,kBAAkB,KAAK,IAAI,CAC1D,CAED,eAAeC,EAAkBC,EAAiBC,EAAY,CAC5D,KAAK,GAAG,eAAeF,EAAkBC,EAAiBC,CAAU,CACrE,CAED,MAAM,YAAYC,EAAS,CACzB,QAAQ,IAAI,mBAAoBA,CAAO,EAEvC,GAAI,CAEF,KAAK,OAAO,qBAGZ,KAAK,GAAG,sBAGR,MAAMC,EAAW,MAAM,KAAK,IAAI,eAAeD,CAAO,EAChDE,EAAS,MAAM,KAAK,OAAO,aAC/BD,EACA,KAAK,YACb,EAGM,YAAK,GAAG,sBAEDC,CACR,OAAQC,EAAO,CACd,cAAQ,MAAM,yBAA0BA,CAAK,EAC7C,KAAK,GAAG,sBAER,KAAK,GAAG,WACN,YACA,4DACR,EACYA,CACP,CACF,CAED,MAAM,kBAAkBC,EAAY,CAClC,QAAQ,IAAI,yBAA0BA,CAAU,EAChD,GAAI,CACF,KAAK,GAAG,gBACR,KAAK,GAAG,sBACR,MAAMF,EAAS,MAAM,KAAK,YAAYE,EAAW,IAAI,EACrD,YAAK,GAAG,sBACDF,CACR,OAAQC,EAAO,CACd,cAAQ,MAAM,+BAAgCA,CAAK,EACnD,KAAK,GAAG,sBACFA,CACP,CACF,CAGD,MAAM,mBAAmBE,EAAO,CAC9B,QAAQ,IAAI,uCAAwCA,CAAK,CAC1D,CACH"}