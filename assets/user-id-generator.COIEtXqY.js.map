{"version":3,"file":"user-id-generator.COIEtXqY.js","sources":["../frontend/utils/event-bus.js","../frontend/utils/event-constants.js","../frontend/core/chatbot-core.js","../frontend/utils/user-id-generator.js"],"sourcesContent":["// /assets/scripts/chatbot/utils/event-bus.js\n\nimport EventEmitter from \"eventemitter3\";\n\n/**\n * EventBus Class\n * Extends the EventEmitter from eventemitter3 to create a centralized event hub.\n */\nclass EventBus extends EventEmitter {}\n\n/**\n * Singleton instance of EventBus\n * Ensures that all modules import the same EventBus instance.\n */\nconst eventBus = new EventBus();\n\nexport default eventBus;\n","// /assets/scripts/chatbot/utils/event-constants.js\n\n/**\n * EVENTS Object\n * Defines all the event names used by the Main Chatbot and Section Chatbot.\n * Namespacing ensures that events are uniquely identified and do not conflict.\n */\nexport const EVENTS = {\n  MAIN_CHATBOT: {\n    MESSAGE_RECEIVED: \"mainChatbot:messageReceived\",\n    TYPING: \"mainChatbot:typing\",\n    CHOICE_PRESENTED: \"mainChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"mainChatbot:carouselPresented\",\n    ERROR: \"mainChatbot:error\",\n    // Additional events can be added here as needed\n  },\n  SECTION_CHATBOT: {\n    MESSAGE_RECEIVED: \"sectionChatbot:messageReceived\",\n    DEVICE_ANSWER: \"sectionChatbot:deviceAnswer\",\n    CHOICE_PRESENTED: \"sectionChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"sectionChatbot:carouselPresented\",\n    ERROR: \"sectionChatbot:error\",\n    // Additional events can be added here as needed\n  },\n};\n","// /assets/scripts/chatbot/core/chatbot-core.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * ChatbotCore Class\n * Handles communication with Voiceflow API via Gadget API, processes incoming data,\n * manages Voiceflow variables, and emits events based on trace types.\n */\nclass ChatbotCore {\n  constructor({ userID, endpoint, chatbotType }) {\n    if (!userID) {\n      throw new Error(\"ChatbotCore requires a userID.\");\n    }\n    if (!endpoint) {\n      throw new Error(\"ChatbotCore requires an endpoint URL.\");\n    }\n    if (!chatbotType) {\n      throw new Error(\n        'ChatbotCore requires a chatbotType (\"main\" or \"section\").'\n      );\n    }\n\n    this.userID = userID;\n    this.endpoint = endpoint;\n    this.chatbotType = chatbotType; // 'main' or 'section'\n    this.eventPrefix =\n      chatbotType === \"main\" ? \"mainChatbot\" : \"sectionChatbot\";\n\n    this.abortController = null; // For aborting the fetch request if needed\n\n    this.initialize();\n  }\n\n  initialize() {\n    // Initial setup if needed\n  }\n\n  /**\n   * Sends a launch request to initiate the conversation.\n   */\n  sendLaunch(variables = {}) {\n    const payload = {\n      action: {\n        type: \"launch\",\n        payload: variables,\n      },\n      config: {}, // Additional configuration if needed\n    };\n\n    this.sendAction(payload);\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    const payload = {\n      action: {\n        type: \"text\",\n        payload: {\n          message: message,\n        },\n      },\n      config: {}, // Additional configuration if needed\n    };\n\n    this.sendAction(payload);\n  }\n\n  /**\n   * Sends an action (launch, message, etc.) to the Gadget API via POST and handles SSE response.\n   * @param {Object} actionPayload - The action payload to send.\n   */\n  async sendAction(actionPayload) {\n    this.abortController = new AbortController();\n    const { signal } = this.abortController;\n\n    try {\n      const response = await fetch(this.endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userID: this.userID,\n          action: actionPayload.action,\n          config: actionPayload.config,\n        }),\n        credentials: \"include\", // Include cookies if needed\n        signal: signal,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Gadget API responded with status ${response.status}`);\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let buffer = \"\";\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          eventBus.emit(`${this.eventPrefix}:end`, {});\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const events = buffer.split(\"\\n\\n\");\n        buffer = events.pop(); // Remaining partial event\n\n        events.forEach((eventStr) => {\n          if (eventStr.trim() === \"\") return;\n          try {\n            const lines = eventStr.split(\"\\n\");\n            const eventTypeLine = lines.find((line) =>\n              line.startsWith(\"event:\")\n            );\n            const dataLine = lines.find((line) => line.startsWith(\"data:\"));\n\n            const eventType = eventTypeLine\n              ? eventTypeLine.split(\":\")[1].trim()\n              : \"trace\";\n            const data = dataLine\n              ? JSON.parse(eventLine.substring(5).trim())\n              : null;\n\n            if (eventType === \"trace\") {\n              this.processTrace(data);\n            } else if (eventType === \"end\") {\n              eventBus.emit(`${this.eventPrefix}:end`, {});\n            }\n            // Handle other event types if necessary\n          } catch (error) {\n            console.error(\"Error parsing SSE event:\", error);\n          }\n        });\n      }\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.warn(\"SSE connection aborted\");\n      } else {\n        console.error(\"SSE connection error:\", error);\n        eventBus.emit(`${this.eventPrefix}:error`, { message: error.message });\n      }\n    } finally {\n      this.abortController = null;\n      eventBus.emit(`${this.eventPrefix}:end`, {});\n    }\n  }\n\n  /**\n   * Processes individual trace events and emits corresponding events via EventBus.\n   * @param {Object} trace - The trace object received from Voiceflow.\n   */\n  processTrace(trace) {\n    if (!trace.type) {\n      console.warn(\"Trace without type received:\", trace);\n      return;\n    }\n\n    switch (trace.type) {\n      case \"text\":\n        eventBus.emit(`${this.eventPrefix}:messageReceived`, {\n          content: trace.payload.message,\n        });\n        break;\n      case \"choice\":\n        eventBus.emit(`${this.eventPrefix}:choicePresented`, {\n          choices: trace.payload.choices,\n        });\n        break;\n      case \"carousel\":\n        eventBus.emit(`${this.eventPrefix}:carouselPresented`, {\n          carouselItems: trace.payload.items,\n        });\n        break;\n      case \"device_answer\":\n        eventBus.emit(`${this.eventPrefix}:deviceAnswer`, {\n          devices: trace.payload.devices,\n        });\n        break;\n      case \"typing\":\n        if (trace.payload.isTyping) {\n          eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: true });\n        } else {\n          eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: false });\n        }\n        break;\n      // Add more trace types as needed\n      default:\n        console.warn(`Unhandled trace type: ${trace.type}`);\n    }\n  }\n\n  /**\n   * Closes the SSE connection gracefully.\n   */\n  closeConnection() {\n    if (this.abortController) {\n      this.abortController.abort();\n      console.log(\"SSE connection closed.\");\n    }\n  }\n\n  /**\n   * Cleans up resources when the ChatbotCore instance is no longer needed.\n   */\n  destroy() {\n    this.closeConnection();\n    eventBus.removeAllListeners(`${this.eventPrefix}:messageReceived`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:choicePresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:carouselPresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:deviceAnswer`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:error`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:typing`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:end`);\n  }\n}\n\nexport default ChatbotCore;\n","/**\n * Generates a unique user ID with the specified prefix.\n * @param {string} prefix - The prefix indicating the chatbot type ('mainChatbot' or 'sectionChatbot').\n * @returns {string} - The generated unique user ID.\n */\nexport function generateUserId(prefix) {\n  const uniquePart =\n    Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n  return `${prefix}-${uniquePart}`;\n}\n"],"names":["EventBus","EventEmitter","eventBus","EVENTS","ChatbotCore","userID","endpoint","chatbotType","variables","payload","message","actionPayload","signal","response","reader","decoder","buffer","done","value","events","eventStr","lines","eventTypeLine","line","dataLine","eventType","data","error","trace","generateUserId","prefix","uniquePart"],"mappings":"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"}