{"version":3,"file":"chatbot-components.BbvHUxqc.js","sources":["../frontend/utils/event-bus.js","../frontend/utils/event-constants.js","../frontend/core/chatbot-core.js","../frontend/ui/chatbot-main-ui.js","../frontend/components/ui/button-component.js","../frontend/components/ui/message-component.js","../frontend/components/ui/carousel-component.js","../frontend/components/ui/chatbot-components.js","../frontend/ui/chatbot-section-ui.js"],"sourcesContent":["// /assets/scripts/chatbot/utils/event-bus.js\n\nimport EventEmitter from \"eventemitter3\";\n\n/**\n * EventBus Class\n * Extends the EventEmitter from eventemitter3 to create a centralized event hub.\n */\nclass EventBus extends EventEmitter {}\n\n/**\n * Singleton instance of EventBus\n * Ensures that all modules import the same EventBus instance.\n */\nconst eventBus = new EventBus();\n\nexport default eventBus;\n","// /assets/scripts/chatbot/utils/event-constants.js\n\n/**\n * EVENTS Object\n * Defines all the event names used by the Main Chatbot and Section Chatbot.\n * Namespacing ensures that events are uniquely identified and do not conflict.\n */\nexport const EVENTS = {\n  MAIN_CHATBOT: {\n    MESSAGE_RECEIVED: \"mainChatbot:messageReceived\",\n    TYPING: \"mainChatbot:typing\",\n    CHOICE_PRESENTED: \"mainChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"mainChatbot:carouselPresented\",\n    ERROR: \"mainChatbot:error\",\n    // Additional events can be added here as needed\n  },\n  SECTION_CHATBOT: {\n    MESSAGE_RECEIVED: \"sectionChatbot:messageReceived\",\n    DEVICE_ANSWER: \"sectionChatbot:deviceAnswer\",\n    CHOICE_PRESENTED: \"sectionChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"sectionChatbot:carouselPresented\",\n    ERROR: \"sectionChatbot:error\",\n    // Additional events can be added here as needed\n  },\n};\n","// /assets/scripts/chatbot/core/chatbot-core.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * ChatbotCore Class\n * Handles communication with Voiceflow API via Gadget API, processes incoming data,\n * manages Voiceflow variables, and emits events based on trace types.\n */\nclass ChatbotCore {\n  constructor({ userID, endpoint, chatbotType }) {\n    if (!userID) {\n      throw new Error(\"ChatbotCore requires a userID.\");\n    }\n    if (!endpoint) {\n      throw new Error(\"ChatbotCore requires an endpoint URL.\");\n    }\n    if (!chatbotType) {\n      throw new Error(\n        'ChatbotCore requires a chatbotType (\"main\" or \"section\").'\n      );\n    }\n\n    this.userID = userID;\n    this.endpoint = endpoint;\n    this.chatbotType = chatbotType; // 'main' or 'section'\n    this.eventPrefix =\n      chatbotType === \"main\" ? \"mainChatbot\" : \"sectionChatbot\";\n\n    this.abortController = null; // For aborting the fetch request if needed\n\n    this.initialize();\n  }\n\n  initialize() {\n    // Initial setup if needed\n  }\n\n  /**\n   * Sends a launch request to initiate the conversation.\n   */\n  sendLaunch(variables = {}) {\n    console.log(\"Constructing launch payload\");\n    const payload = {\n      action: {\n        type: \"launch\",\n      },\n    };\n    console.log(\"Final launch payload:\", payload);\n\n    return this.sendAction(payload);\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    console.log(\"Constructing message payload:\", message);\n    const payload = {\n      action: {\n        type: \"text\",\n        payload: message,\n      },\n    };\n    console.log(\"Final message payload:\", payload);\n\n    return this.sendAction(payload);\n  }\n\n  /**\n   * Sends an action (launch, message, etc.) to the Gadget API via POST and handles SSE response.\n   * @param {Object} actionPayload - The action payload to send.\n   */\n  async sendAction(actionPayload) {\n    this.abortController = new AbortController();\n    const { signal } = this.abortController;\n\n    try {\n      // Show typing indicator before sending request\n      eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: true });\n\n      const response = await fetch(this.endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userID: this.userID,\n          action: actionPayload.action,\n        }),\n        credentials: \"include\", // Include cookies if needed\n        signal: signal,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Gadget API responded with status ${response.status}`);\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let buffer = \"\";\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          eventBus.emit(`${this.eventPrefix}:end`, {});\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const events = buffer.split(\"\\n\\n\");\n        buffer = events.pop(); // Remaining partial event\n\n        events.forEach((eventStr) => {\n          if (eventStr.trim() === \"\") return;\n          try {\n            const lines = eventStr.split(\"\\n\");\n            const eventTypeLine = lines.find((line) =>\n              line.startsWith(\"event:\")\n            );\n            const dataLine = lines.find((line) => line.startsWith(\"data:\"));\n\n            const eventType = eventTypeLine\n              ? eventTypeLine.split(\":\")[1].trim()\n              : \"trace\";\n            const data = dataLine\n              ? JSON.parse(\n                  eventStr.substring(eventStr.indexOf(\"data:\") + 5).trim()\n                )\n              : null;\n\n            if (eventType === \"trace\") {\n              this.processTrace(data);\n            } else if (eventType === \"end\") {\n              eventBus.emit(`${this.eventPrefix}:end`, {});\n            }\n            // Handle other event types if necessary\n          } catch (error) {\n            console.error(\"Error parsing SSE event:\", error);\n          }\n        });\n      }\n    } catch (error) {\n      // Hide typing indicator on error\n      eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: false });\n\n      if (error.name === \"AbortError\") {\n        console.warn(\"SSE connection aborted\");\n      } else {\n        console.error(\"SSE connection error:\", error);\n        eventBus.emit(`${this.eventPrefix}:error`, { message: error.message });\n      }\n    } finally {\n      this.abortController = null;\n      eventBus.emit(`${this.eventPrefix}:end`, {});\n      // Hide typing indicator when everything is done\n      eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: false });\n    }\n  }\n\n  /**\n   * Processes individual trace events and emits corresponding events via EventBus.\n   * @param {Object} trace - The trace object received from Voiceflow.\n   */\n  processTrace(trace) {\n    if (!trace.type) {\n      console.warn(\"Trace without type received:\", trace);\n      return;\n    }\n\n    // Hide typing indicator when we receive any trace\n    eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: false });\n\n    switch (trace.type) {\n      case \"text\":\n        console.log(\"Text received trace:\", trace);\n        eventBus.emit(`${this.eventPrefix}:messageReceived`, {\n          content: trace.payload.message,\n          metadata: trace.payload.metadata || null, // Include metadata if available\n        });\n        break;\n      case \"choice\":\n        console.log(\"Choice received trace:\", trace);\n        eventBus.emit(`${this.eventPrefix}:choicePresented`, {\n          buttons: trace.payload.buttons,\n        });\n        break;\n      case \"carousel\":\n        console.log(\"Carousel received trace:\", trace);\n        eventBus.emit(`${this.eventPrefix}:carouselPresented`, {\n          carouselItems: trace.payload.cards,\n        });\n        break;\n      case \"speak\":\n        console.log(\"Speak received trace:\", trace);\n        // Handle speak traces if necessary\n        break;\n      case \"visual\":\n        console.log(\"Visual received trace:\", trace);\n        // Handle visual traces if necessary\n        break;\n      case \"no-reply\":\n        console.log(\"No-reply received trace:\", trace);\n        // Handle no-reply traces if necessary\n        break;\n      case \"end\":\n        console.log(\"End trace received:\", trace);\n        eventBus.emit(`${this.eventPrefix}:end`, {});\n        break;\n      case \"completion-events\":\n        console.log(\"Completion event trace received:\", trace);\n        // Handle completion events if necessary\n        break;\n      default:\n        console.warn(`Unhandled trace type: ${trace.type}`, trace);\n    }\n  }\n\n  /**\n   * Closes the SSE connection gracefully.\n   */\n  closeConnection() {\n    if (this.abortController) {\n      this.abortController.abort();\n      console.log(\"SSE connection closed.\");\n    }\n  }\n\n  /**\n   * Cleans up resources when the ChatbotCore instance is no longer needed.\n   */\n  destroy() {\n    this.closeConnection();\n    eventBus.removeAllListeners(`${this.eventPrefix}:messageReceived`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:choicePresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:carouselPresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:deviceAnswer`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:error`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:typing`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:end`);\n  }\n}\n\nexport default ChatbotCore;\n","// /assets/scripts/chatbot/main/main-chatbot-ui.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * MainChatbotUI Class\n * Handles UI-specific functionalities for the Main Chatbot.\n */\nclass MainChatbotUI {\n  constructor(container) {\n    this.container = container;\n    this.form = this.container.querySelector(\".chat-form\");\n    this.input = this.container.querySelector(\"input[type='text']\");\n    this.messageContainer = this.container.querySelector(\".message-container\");\n    this.typingIndicator = this.container.querySelector(\".chat-typing\");\n\n    console.log(\"Chatbot UI Container:\", this.container);\n    console.log(\"Chat Form:\", this.form);\n    console.log(\"Chat Input:\", this.input);\n    console.log(\"Message Container:\", this.messageContainer);\n    console.log(\"Typing Indicator:\", this.typingIndicator);\n\n    if (!this.container) {\n      console.error(\"Main Chatbot UI container not found\");\n      return;\n    }\n\n    if (!this.form || !this.input) {\n      console.error(\"Main Chatbot form or input not found\");\n      return;\n    }\n\n    this.setupEventListeners();\n  }\n\n  setupEventListeners() {\n    // Handle form submission\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        eventBus.emit(\"userMessage\", message);\n        this.input.value = \"\";\n      }\n    });\n\n    // Listen for typing events from ChatbotCore\n    eventBus.on(`${EVENTS.MAIN_CHATBOT.PREFIX}:typing`, (data) => {\n      if (data.isTyping) {\n        this.showTypingIndicator();\n      } else {\n        this.hideTypingIndicator();\n      }\n    });\n\n    // Set up event delegation for button clicks within messages\n    this.messageContainer.addEventListener(\"click\", (e) => {\n      const button = e.target.closest(\"button-component\");\n      if (button) {\n        const payload = JSON.parse(button.getAttribute(\"payload\") || \"{}\");\n        const label = button.getAttribute(\"label\");\n        if (label) {\n          eventBus.emit(\"buttonClicked\", {\n            type: payload.type,\n            payload,\n            label,\n          });\n          this.removeInteractiveElements();\n        }\n      }\n    });\n\n    // Listen for carousel button clicks specifically\n    eventBus.on(\"carouselButtonClicked\", (payload) => {\n      if (!payload || !payload.type) {\n        console.error(\"Invalid carousel button payload:\", payload);\n        return;\n      }\n\n      // Send the payload to ChatbotCore\n      eventBus.emit(\"userMessage\", JSON.stringify(payload));\n      this.removeInteractiveElements();\n    });\n  }\n\n  /**\n   * Adds a message to the chatbot UI.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} content - The message content.\n   * @param {Object} [metadata] - Additional metadata about the message.\n   */\n  addMessage(sender, content, metadata = null) {\n    if (!this.messageContainer) {\n      console.error(\"Message container not set\");\n      return;\n    }\n\n    const message = document.createElement(\"message-component\");\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n    this.messageContainer.appendChild(message);\n    console.log(\"Message appended to messageContainer\"); // Debug log\n    this.scrollToBottom();\n\n    // If metadata includes interactive elements, add them\n    if (sender === \"assistant\" && metadata) {\n      switch (metadata.type) {\n        case \"choice\":\n          this.addButtons(metadata.buttons);\n          break;\n        case \"carousel\":\n          this.addCarousel(metadata.carouselItems);\n          break;\n        // Add more cases as needed\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   * Adds interactive buttons to the chatbot UI.\n   * @param {Array} buttons - Array of button data.\n   */\n  addButtons(buttons) {\n    console.log(\"addButtons called with:\", buttons); // Debug log\n\n    if (!Array.isArray(buttons)) {\n      console.error(\"addButtons expected an array but received:\", buttons);\n      return;\n    }\n\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      this.messageContainer.appendChild(button);\n      console.log(\"Button appended to messageContainer\"); // Debug log\n    });\n    this.scrollToBottom();\n  }\n\n  /**\n   * Adds a carousel to the chatbot UI.\n   * Wraps the carouselItems array within a 'cards' key as expected by the carousel component.\n   * @param {Array} carouselItems - Array of carousel card data.\n   */\n  addCarousel(carouselItems) {\n    console.log(\"Adding carousel with items:\", carouselItems);\n    const carouselData = { cards: carouselItems };\n    console.log(\"Adding carousel:\", carouselData);\n\n    if (!Array.isArray(carouselItems)) {\n      console.error(\n        \"addCarousel expected an array but received:\",\n        carouselItems\n      );\n      return;\n    }\n\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.setAttribute(\"data-carousel\", JSON.stringify(carouselData));\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Shows the typing indicator in the chatbot UI.\n   */\n  showTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Hides the typing indicator in the chatbot UI.\n   */\n  hideTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Displays an error message in the chatbot UI.\n   * @param {string} message - The error message to display.\n   */\n  displayError(message) {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.innerText = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Scrolls the chatbot UI to the bottom to show the latest message.\n   */\n  scrollToBottom() {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n\n  /**\n   * Removes interactive elements (buttons, carousels) from the UI.\n   */\n  removeInteractiveElements() {\n    const interactiveElements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component\"\n    );\n    interactiveElements.forEach((element) => element.remove());\n  }\n}\n\nexport default MainChatbotUI;\n","// /assets/scripts/chatbot/components/button-component.js\n\nimport eventBus from \"../../utils/event-bus.js\";\n\nexport class ButtonComponent extends HTMLElement {\n  constructor() {\n    super();\n    // Attach Shadow DOM to encapsulate styles\n    this.attachShadow({ mode: \"open\" });\n  }\n\n  connectedCallback() {\n    const label = this.getAttribute(\"label\");\n    const payload = this.getAttribute(\"payload\");\n\n    this.render(label, payload);\n  }\n\n  /**\n   * Renders the button with embedded styles.\n   * @param {string} label - The button label\n   * @param {string} payload - The button payload in JSON string format\n   */\n  render(label, payload) {\n    this.shadowRoot.innerHTML = `\n      <style>\n        .button-container {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 10px;\n          margin-bottom: var(--spacing-4);\n        }\n\n        .button {\n          padding: var(--spacing-3);\n          background-color: #FFFFFF;\n          border: none;\n          border-radius: var(--rounded);\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 14px;\n          transition: background-color 0.3s ease;\n        }\n\n        .button:hover {\n          background-color: #f0f0f0;\n        }\n\n        /* Additional styles as needed */\n      </style>\n      <div class=\"button-container\">\n        <button class=\"button\" data-button-data='${payload}' aria-label=\"${label}\">${label}</button>\n      </div>\n    `;\n\n    // Add event listener to the button\n    this.shadowRoot.querySelector(\".button\").addEventListener(\"click\", () => {\n      // Emit event via eventBus\n      try {\n        const parsedPayload = JSON.parse(payload);\n        eventBus.emit(\"buttonClicked\", parsedPayload);\n      } catch (error) {\n        console.error(\"Error parsing button payload:\", error);\n      }\n    });\n  }\n}\n","// /assets/scripts/chatbot/components/message-component.js\n\nexport class MessageComponent extends HTMLElement {\n  constructor() {\n    super();\n    // Attach Shadow DOM to encapsulate styles\n    this.attachShadow({ mode: \"open\" });\n  }\n\n  connectedCallback() {\n    const sender = this.getAttribute(\"sender\");\n    const content = this.getAttribute(\"content\");\n\n    this.render(sender, content);\n  }\n\n  /**\n   * Renders the message with appropriate styling based on the sender.\n   * @param {string} sender - 'user' or 'assistant'\n   * @param {string} content - The message content\n   */\n  render(sender, content) {\n    const isAssistant = sender === \"assistant\";\n    this.shadowRoot.innerHTML = `\n      <style>\n        .message-wrapper {\n          display: flex;\n          align-items: flex-end;\n          width: 100%;\n          margin-bottom: var(--spacing-6);\n          gap: var(--spacing-2);\n        }\n\n        .message-wrapper--assistant {\n          justify-content: flex-start;\n        }\n\n        .message-wrapper--user {\n          justify-content: flex-end;\n        }\n\n        .assistant-icon {\n          width: 30px;\n          height: 20px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-right: var(--spacing-2);\n        }\n\n        .message {\n          max-width: 80%;\n          padding: var(--spacing-4);\n          border-radius: 20px;\n          word-wrap: break-word;\n          background-color: ${\n            isAssistant ? \"#FFFFFF\" : \"rgba(255, 255, 255, 0.1)\"\n          };\n          color: ${isAssistant ? \"#231F25\" : \"#FFFFFF\"};\n          border: ${isAssistant ? \"none\" : \"1px solid #FFFFFF\"};\n        }\n\n        .message--assistant {\n          background-color: #FFFFFF;\n          color: #231F25 !important;\n          border-bottom-left-radius: 4px;\n        }\n\n        .message--user {\n          background-color: rgba(255, 255, 255, 0.1);\n          border: 1px solid #FFFFFF;\n          color: white;\n        }\n\n        .message__content {\n          display: flex;\n          flex-direction: column;\n          gap: 1em;\n          flex-grow: 1;\n          font-family: inherit;\n        }\n      </style>\n      <div class=\"message-wrapper message-wrapper--${sender}\">\n        ${isAssistant ? `<div class=\"assistant-icon\">🚀</div>` : \"\"}\n        <div class=\"message message--${sender}\">\n          <div class=\"message__content\">${this.markdownToHtml(content)}</div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Converts markdown to HTML.\n   * For simplicity, using basic line breaks. Integrate a markdown library if needed.\n   * @param {string} markdown - The markdown content\n   * @returns {string} - HTML content\n   */\n  markdownToHtml(markdown) {\n    if (!markdown) return \"\";\n    return markdown.replace(/\\n/g, \"<br>\");\n  }\n}\n","// /assets/scripts/chatbot/components/carousel-component.js\n\nimport eventBus from \"../../utils/event-bus.js\";\n\n/**\n * CarouselComponent Class\n * Renders a carousel of cards with images, titles, descriptions, and action buttons.\n */\nexport class CarouselComponent extends HTMLElement {\n  constructor() {\n    super();\n    // Attach Shadow DOM to encapsulate styles and markup\n    this.attachShadow({ mode: \"open\" });\n\n    // Initialize properties\n    this.items = []; // To store carousel items\n    this.currentIndex = 0; // Current slide index\n    this.isDesktop = window.matchMedia(\"(min-width: 1000px)\").matches;\n    this.itemsPerSlide = this.isDesktop ? 2 : 1;\n\n    // Bind methods to maintain context\n    this.moveLeft = this.moveLeft.bind(this);\n    this.moveRight = this.moveRight.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  /**\n   * Lifecycle method called when the component is added to the DOM.\n   */\n  connectedCallback() {\n    const dataAttr = this.getAttribute(\"data-carousel\");\n    if (!dataAttr) {\n      console.error(\n        \"No data-carousel attribute found. Cannot render carousel.\"\n      );\n      return;\n    }\n\n    let carouselData;\n    try {\n      carouselData = JSON.parse(dataAttr);\n    } catch (err) {\n      console.error(\"Failed to parse carousel data:\", err);\n      return;\n    }\n\n    // Ensure carouselData.cards is an array\n    if (!carouselData || !Array.isArray(carouselData.cards)) {\n      console.error(\"carouselData.cards is not defined or not an array\");\n      return;\n    }\n\n    this.renderCarousel(carouselData);\n  }\n\n  /**\n   * Renders the carousel with embedded styles and initializes functionality.\n   * @param {Object} carouselData - Data for the carousel containing a 'cards' array.\n   */\n  renderCarousel(carouselData) {\n    this.carouselData = carouselData;\n    this.shadowRoot.innerHTML = `\n      <style>\n        /* Custom Carousel Styling */\n        .carousel {\n          position: relative;\n          width: 100%;\n          overflow: hidden;\n          margin-bottom: var(--spacing-4);\n          box-sizing: border-box;\n        }\n\n        .carousel__container {\n          display: flex;\n          transition: transform 0.3s ease-out;\n          max-width: 100%;\n        }\n\n        .carousel__item {\n          flex: 0 0 100%;\n          display: flex;\n          gap: var(--spacing-4);\n          box-sizing: border-box;\n          max-width: 100%;\n          align-items: flex-start;\n        }\n\n        .carousel__item-wrapper {\n          flex: 0 0 100%;\n          max-width: 100%;\n          min-width: 0;\n        }\n\n        .carousel__button {\n          position: absolute;\n          top: 50%;\n          transform: translateY(-50%);\n          background: rgba(255, 255, 255, 0.8);\n          border: solid 1px #403545;\n          width: 40px;\n          height: 40px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          z-index: 2;\n          margin-block-start: var(--spacing-0) !important;\n        }\n\n        .carousel__button--left {\n          left: 10px;\n        }\n\n        .carousel__button--right {\n          right: 10px;\n        }\n\n        .carousel__item-content {\n          background: #FFFFFF;\n          border-radius: 8px;\n          padding: var(--spacing-4);\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .carousel__item-image {\n          width: 100%;\n          height: auto;\n          border-radius: 8px;\n          margin-bottom: var(--spacing-2);\n          object-fit: cover;\n        }\n\n        .carousel__item-title {\n          font-weight: bold;\n          margin-bottom: var(--spacing-0);\n        }\n\n        .carousel__item-description {\n          margin-bottom: var(--spacing-4);\n          color: #403545 !important;\n          flex-grow: 1;\n        }\n\n        .carousel__item-button {\n          margin-top: auto;\n          margin-block-start: 0 !important;\n          padding: var(--spacing-3);\n          background-color: #007BFF;\n          border: none;\n          border-radius: var(--rounded);\n          color: white;\n          cursor: pointer;\n          font-size: 14px;\n          transition: background-color 0.3s ease;\n        }\n\n        .carousel__item-button:hover {\n          background-color: #0056b3;\n        }\n\n        @media (min-width: 1000px) {\n          .carousel__item {\n            flex: 0 0 50%;\n            max-width: 50%;\n          }\n\n          .carousel__item-wrapper {\n            flex: 0 0 calc(100% - var(--spacing-2));\n            max-width: calc(100% - var(--spacing-2));\n          }\n        }\n      </style>\n      <div class=\"carousel\">\n        <div class=\"carousel__container\">\n          <!-- Carousel items will be dynamically added here -->\n        </div>\n        <button class=\"carousel__button carousel__button--left\" aria-label=\"Previous slide\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n               xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" stroke-width=\"2\"\n                  stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </button>\n        <button class=\"carousel__button carousel__button--right\" aria-label=\"Next slide\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n               xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M9 18L15 12L9 6\" stroke=\"currentColor\" stroke-width=\"2\"\n                  stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </button>\n      </div>\n    `;\n\n    // Reference to carousel container and navigation buttons\n    this.carouselContainer = this.shadowRoot.querySelector(\n      \".carousel__container\"\n    );\n    this.leftButton = this.shadowRoot.querySelector(\".carousel__button--left\");\n    this.rightButton = this.shadowRoot.querySelector(\n      \".carousel__button--right\"\n    );\n\n    // Add carousel items\n    this.carouselData.cards.forEach((card, index) => {\n      const item = document.createElement(\"div\");\n      item.classList.add(\"carousel__item\");\n\n      const itemWrapper = document.createElement(\"div\");\n      itemWrapper.classList.add(\"carousel__item-wrapper\");\n\n      const itemContent = document.createElement(\"div\");\n      itemContent.classList.add(\"carousel__item-content\");\n\n      // Image\n      if (card.imageUrl) {\n        const img = document.createElement(\"img\");\n        img.src = card.imageUrl;\n        img.alt = card.title || \"\";\n        img.classList.add(\"carousel__item-image\");\n        itemContent.appendChild(img);\n      }\n\n      // Title\n      if (card.title) {\n        const title = document.createElement(\"h6\");\n        title.classList.add(\"carousel__item-title\");\n        title.textContent = card.title;\n        itemContent.appendChild(title);\n      }\n\n      // Description\n      if (card.description && card.description.text) {\n        const description = document.createElement(\"p\");\n        description.classList.add(\"carousel__item-description\");\n        description.textContent = card.description.text;\n        itemContent.appendChild(description);\n      }\n\n      // Button\n      if (card.buttons && card.buttons.length > 0) {\n        const button = document.createElement(\"button\");\n        button.classList.add(\"carousel__item-button\");\n        button.setAttribute(\"data-button-index\", index);\n        button.textContent = card.buttons[0].name || \"Select\";\n        itemContent.appendChild(button);\n\n        // Add event listener for button click\n        button.addEventListener(\"click\", this.handleButtonClick);\n      }\n\n      // Assemble the item structure\n      itemWrapper.appendChild(itemContent);\n      item.appendChild(itemWrapper);\n      this.carouselContainer.appendChild(item);\n      this.items.push(item);\n    });\n\n    // Initialize Carousel Functionality\n    this.initCarousel();\n\n    // Add event listeners to navigation buttons\n    this.leftButton.addEventListener(\"click\", this.moveLeft);\n    this.rightButton.addEventListener(\"click\", this.moveRight);\n\n    // Add event listener for window resize to adjust carousel\n    window.addEventListener(\"resize\", this.handleResize);\n\n    this.updateVisibility();\n    this.updatePosition();\n  }\n\n  /**\n   * Initializes carousel settings based on screen size.\n   */\n  initCarousel() {\n    this.isDesktop = window.matchMedia(\"(min-width: 1000px)\").matches;\n    this.itemsPerSlide = this.isDesktop ? 2 : 1;\n    this.currentIndex = 0;\n    this.updateVisibility();\n    this.updatePosition();\n  }\n\n  /**\n   * Handles window resize events to adjust carousel settings.\n   */\n  handleResize() {\n    this.isDesktop = window.matchMedia(\"(min-width: 1000px)\").matches;\n    this.itemsPerSlide = this.isDesktop ? 2 : 1;\n    this.currentIndex = 0;\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  /**\n   * Moves the carousel to the left.\n   */\n  moveLeft() {\n    const itemsPerSlide = this.itemsPerSlide;\n    this.currentIndex = Math.max(0, this.currentIndex - itemsPerSlide);\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  /**\n   * Moves the carousel to the right.\n   */\n  moveRight() {\n    const itemsPerSlide = this.itemsPerSlide;\n    this.currentIndex = Math.min(\n      this.items.length - itemsPerSlide,\n      this.currentIndex + itemsPerSlide\n    );\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  /**\n   * Updates the carousel's position based on the current index.\n   */\n  updatePosition() {\n    const itemsPerSlide = this.itemsPerSlide;\n    const offset = -(this.currentIndex / itemsPerSlide) * 100;\n    this.carouselContainer.style.transform = `translateX(${offset}%)`;\n  }\n\n  /**\n   * Updates the visibility of navigation buttons based on the current index.\n   */\n  updateVisibility() {\n    const itemsPerSlide = this.itemsPerSlide;\n    this.leftButton.disabled = this.currentIndex === 0;\n    this.rightButton.disabled =\n      this.currentIndex >= this.items.length - itemsPerSlide;\n  }\n\n  /**\n   * Handles button clicks within carousel items.\n   * @param {Event} e - The click event\n   */\n  handleButtonClick(e) {\n    const button = e.target;\n    const buttonIndex = parseInt(button.getAttribute(\"data-button-index\"), 10);\n    const card = this.carouselData.cards[buttonIndex];\n    if (!card || !card.buttons || card.buttons.length === 0) {\n      console.warn(\"No button data found for this card.\");\n      return;\n    }\n\n    const payload = card.buttons[0].request;\n    if (payload) {\n      eventBus.emit(\"carouselButtonClicked\", payload);\n    }\n\n    // Remove the carousel from the UI after interaction if desired\n    this.remove();\n  }\n}\n","// frontend/components/ui/chatbot-components.js\nimport { ButtonComponent } from \"./button-component.js\";\nimport { MessageComponent } from \"./message-component.js\";\nimport { CarouselComponent } from \"./carousel-component.js\";\n\n// Register custom components\ncustomElements.define(\"button-component\", ButtonComponent);\ncustomElements.define(\"message-component\", MessageComponent);\ncustomElements.define(\"carousel-component\", CarouselComponent);\n","// /assets/scripts/chatbot/section/section-chatbot-ui.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * SectionChatbotUI Class\n * Handles UI-specific functionalities for the Section Chatbot.\n */\nclass SectionChatbotUI {\n  /**\n   * Constructor initializes UI elements, extracts product details, and sets up event listeners.\n   * @param {HTMLElement} container - The section chatbot UI container.\n   */\n  constructor(container) {\n    this.container = container;\n    this.form = this.container.querySelector(\".chat-form\");\n    this.input = this.container.querySelector(\"input[type='text']\");\n    this.messageContainer = this.container.querySelector(\".message-container\");\n\n    if (!this.container) {\n      console.error(\"Section Chatbot UI container not found\");\n      return;\n    }\n\n    if (!this.form || !this.input) {\n      console.error(\"Section Chatbot form or input not found\");\n      return;\n    }\n\n    // Extract product details from container's data attributes\n    this.productTitle = this.container.dataset.productTitle;\n    this.productCapacity = this.container.dataset.productCapacity;\n    this.acOutputContinuousPower =\n      this.container.dataset.productAcOutputContinuousPower;\n    this.acOutputPeakPower = this.container.dataset.productAcOutputPeakPower;\n    this.dcOutputPower = this.container.dataset.productDcOutputPower;\n\n    this.startBlock = \"shopifySection\";\n    this.productDetails = {\n      title: this.productTitle,\n      capacity: this.productCapacity,\n      ac_output_continuous_power: this.acOutputContinuousPower,\n      ac_output_peak_power: this.acOutputPeakPower,\n      dc_output_power: this.dcOutputPower,\n    };\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for user interactions within the UI.\n   */\n  setupEventListeners() {\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        this.emit(\"userMessage\", message);\n        this.input.value = \"\";\n      }\n    });\n  }\n\n  /**\n   * Registers a callback for user message submissions.\n   * @param {Function} callback - Function to handle user messages.\n   */\n  onUserMessage(callback) {\n    eventBus.on(\"userMessage\", callback);\n  }\n\n  /**\n   * Registers a callback for button click interactions.\n   * @param {Function} callback - Function to handle button clicks.\n   */\n  onButtonClick(callback) {\n    eventBus.on(\"buttonClicked\", callback);\n  }\n\n  /**\n   * Emits custom events from the UI components.\n   * @param {string} eventName - Name of the event.\n   * @param {any} data - Data to pass with the event.\n   */\n  emit(eventName, data) {\n    const event = new CustomEvent(eventName, { detail: data });\n    this.container.dispatchEvent(event);\n  }\n\n  /**\n   * Adds a message to the chatbot UI.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} content - The message content.\n   */\n  addMessage(sender, content) {\n    const message = document.createElement(\"message-component\");\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n    this.messageContainer.appendChild(message);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Adds interactive buttons to the chatbot UI.\n   * @param {Array} buttons - Array of button data.\n   */\n  addButtons(buttons) {\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      this.messageContainer.appendChild(button);\n    });\n    this.scrollToBottom();\n\n    // Set up event delegation for button clicks\n    this.messageContainer.addEventListener(\"click\", (e) => {\n      if (e.target.closest(\"button-component\")) {\n        const button = e.target.closest(\"button-component\");\n        const payload = JSON.parse(button.getAttribute(\"payload\"));\n        this.emit(\"buttonClicked\", payload);\n        this.removeInteractiveElements();\n      }\n    });\n  }\n\n  /**\n   * Adds a carousel to the chatbot UI.\n   * @param {Array} items - Array of carousel items.\n   */\n  addCarousel(items) {\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.setAttribute(\"items\", JSON.stringify(items));\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n\n    // Set up event delegation for carousel interactions if necessary\n    // Implement similar to buttons if carousel items have interactive elements\n  }\n\n  /**\n   * Populates the applications grid with device information.\n   * @param {Array} devices - Array of device data.\n   */\n  populateApplicationsGrid(devices) {\n    const grid = document.querySelector(\".applications-grid\");\n    if (!grid) {\n      console.error(\"Applications grid not found\");\n      return;\n    }\n    devices.forEach((device) => {\n      const card = document.createElement(\"div\");\n      card.classList.add(\"application-card\", \"chatbot-card\");\n      card.innerHTML = `\n        <div class=\"application-card__image\">\n          <img src=\"${device.imageUrl}\" alt=\"${device.name}\" />\n        </div>\n        <div class=\"application-card__content\">\n          <div class=\"application-card__title\">${device.name}</div>\n          <div class=\"application-card__runtime\">${device.estimatedRuntime}</div>\n        </div>\n      `;\n      grid.appendChild(card);\n    });\n    this.scrollToBottom();\n  }\n\n  /**\n   * Displays an error message in the chatbot UI.\n   * @param {string} message - The error message.\n   */\n  displayError(message) {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.innerText = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Scrolls the chatbot container to the bottom.\n   */\n  scrollToBottom() {\n    this.container.scrollTop = this.container.scrollHeight;\n  }\n\n  /**\n   * Retrieves the value of a specified attribute from the chatbot container.\n   * @param {string} attrName - The name of the attribute.\n   * @returns {string|null} - The value of the attribute or null if not found.\n   */\n  getAttribute(attrName) {\n    return this.container.getAttribute(attrName);\n  }\n\n  /**\n   * Removes interactive elements (buttons, carousels) from the UI.\n   */\n  removeInteractiveElements() {\n    const interactiveElements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component\"\n    );\n    interactiveElements.forEach((element) => element.remove());\n  }\n}\n\nexport default SectionChatbotUI;\n"],"names":["EventBus","EventEmitter","eventBus","EVENTS","ChatbotCore","userID","endpoint","chatbotType","variables","payload","message","actionPayload","signal","response","reader","decoder","buffer","done","value","events","eventStr","lines","eventTypeLine","line","dataLine","eventType","data","error","trace","MainChatbotUI","container","e","button","label","sender","content","metadata","buttons","buttonData","carouselItems","carouselData","carousel","errorDiv","element","ButtonComponent","parsedPayload","MessageComponent","isAssistant","markdown","CarouselComponent","dataAttr","err","card","index","item","itemWrapper","itemContent","img","title","description","itemsPerSlide","offset","buttonIndex","SectionChatbotUI","callback","eventName","event","items","devices","grid","device","attrName"],"mappings":"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"}