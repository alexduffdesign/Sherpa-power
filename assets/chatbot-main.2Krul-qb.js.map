{"version":3,"file":"chatbot-main.2Krul-qb.js","sources":["../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// chatbot-main.js\n\nimport { ChatbotCore } from \"./chatbot-core-file.js\";\n\nconsole.log(\"MainChatbot module loading\");\n\nclass MainChatbot {\n  constructor(element, config) {\n    console.log(\"MainChatbot constructor called with config:\", config);\n    this.element = element;\n    this.voiceflowEndpoint = config.voiceflowEndpoint;\n\n    this.core = new ChatbotCore({\n      proxyEndpoint:\n        \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\", // Gadget's streaming endpoint\n      userIDPrefix: \"mainChatbot\",\n    });\n    console.log(\"ChatbotCore instance created:\", this.core);\n\n    this.conversationHistory = [];\n    this.hasLaunched = localStorage.getItem(\"chatHasLaunched\") === \"true\";\n\n    this.eventListenersAttached = false;\n\n    this.initializeElements();\n    this.setupEventListeners();\n\n    if (this.hasLaunched) {\n      this.loadConversationFromStorage();\n      this.displaySavedConversation();\n    }\n  }\n\n  initializeElements() {\n    console.log(\"MainChatbot initializeElements called\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    const typingIndicator = this.element.querySelector(\".chat-typing\");\n    const drawer = this.element.closest(\"x-drawer\");\n    let drawerBody = null;\n\n    if (drawer && drawer.shadowRoot) {\n      drawerBody = drawer.shadowRoot.querySelector('[part=\"body\"]');\n    }\n\n    if (!messageContainer || !typingIndicator || !drawerBody) {\n      console.error(\"Required DOM elements not found\");\n      return;\n    }\n\n    this.core.setDOMElements(messageContainer, typingIndicator, drawerBody);\n    console.log(\"DOM elements set in ChatbotCore:\", this.core);\n  }\n\n  setupEventListeners() {\n    if (this.eventListenersAttached) return;\n\n    console.log(\"MainChatbot setupEventListeners called\");\n    const form = this.element.querySelector(\"#chatForm\");\n    const input = this.element.querySelector(\"#userInput\");\n\n    if (!form || !input) {\n      console.error(\"Chat form or input not found\");\n      return;\n    }\n\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const message = input.value.trim();\n      if (message) {\n        console.log(\"Form submitted with message:\", message);\n        input.value = \"\"; // Clear the input field immediately\n        await this.handleUserMessage(message);\n      }\n    });\n\n    this.element.addEventListener(\"click\", async (e) => {\n      if (e.target.matches(\".button-container button\")) {\n        const buttonData = JSON.parse(e.target.dataset.buttonData);\n        try {\n          const response = await this.core.handleButtonClick(buttonData);\n          // Save button click as a message\n          this.conversationHistory.push({\n            type: \"user\",\n            message: buttonData.name,\n          });\n          this.saveConversationToStorage();\n          // The response will be handled via event listeners\n        } catch (error) {\n          console.error(\"Error handling button click:\", error);\n        }\n      }\n    });\n\n    const jumpToMainButton = this.element.querySelector(\".back-to-start\");\n    if (jumpToMainButton) {\n      jumpToMainButton.addEventListener(\"click\", () => this.jumpToMainMenu());\n    } else {\n      console.error(\"Jump to start button not found\");\n    }\n\n    this.core.on(\"message\", this.handleMessage.bind(this));\n    this.core.on(\"typing\", this.handleTyping.bind(this));\n    this.core.on(\"updateMessage\", this.handleUpdateMessage.bind(this));\n    this.core.on(\"error\", this.handleError.bind(this));\n\n    this.eventListenersAttached = true;\n  }\n\n  async initializeChat() {\n    console.log(\"Initializing chat\");\n    if (!this.hasLaunched) {\n      try {\n        console.log(\"Initializing chat for the first time\");\n        await this.sendLaunch();\n        this.hasLaunched = true;\n        localStorage.setItem(\"chatHasLaunched\", \"true\");\n      } catch (error) {\n        console.error(\"Error during chat initialization:\", error);\n      }\n    } else {\n      // Add this else block to handle existing conversations\n      this.loadConversationFromStorage();\n      this.displaySavedConversation();\n    }\n    // Add this line to scroll to the bottom after initialization\n    this.core.scrollToBottom();\n    console.log(\"Chat initialized\");\n  }\n\n  async sendLaunch(payload = {}) {\n    console.log(\"Sending main chatbot launch request\");\n\n    try {\n      await this.core.handleStreaming({\n        action: {\n          type: \"launch\",\n        },\n        config: {\n          completion_events: true,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error in main chatbot send launch:\", error);\n      this.core.addMessage(\n        \"assistant\",\n        \"Failed to initialize the chatbot. Please try again later.\"\n      );\n    }\n  }\n\n  async handleUserMessage(message) {\n    this.core.addMessage(\"user\", message);\n    this.conversationHistory.push({ type: \"user\", message: message });\n    this.saveConversationToStorage();\n\n    this.core.showTypingIndicator();\n    try {\n      await this.core.sendMessage(message);\n    } catch (error) {\n      console.error(\"Error in send message:\", error);\n    } finally {\n      this.core.hideTypingIndicator();\n      this.core.scrollToBottom();\n    }\n  }\n\n  loadConversationFromStorage() {\n    const savedConversation = localStorage.getItem(\"chatConversation\");\n    this.conversationHistory = savedConversation\n      ? JSON.parse(savedConversation)\n      : [];\n    console.log(\"Loaded conversation from storage:\", this.conversationHistory);\n  }\n\n  saveConversationToStorage() {\n    localStorage.setItem(\n      \"chatConversation\",\n      JSON.stringify(this.conversationHistory)\n    );\n    console.log(\"Saved conversation to storage\");\n  }\n\n  displaySavedConversation() {\n    console.log(\"Displaying saved conversation\");\n    const messageContainer = this.element.querySelector(\"#messageContainer\");\n    if (messageContainer) {\n      messageContainer.innerHTML = \"\"; // Clear existing messages\n      this.conversationHistory.forEach((turn, index) => {\n        if (turn.type === \"user\" || turn.type === \"assistant\") {\n          this.core.addMessage(turn.type, turn.message);\n        } else if (turn.type === \"choice\") {\n          // Check if next turn is 'user' type\n          const nextTurn = this.conversationHistory[index + 1];\n          if (!nextTurn || nextTurn.type !== \"user\") {\n            this.core.addButtons(turn.buttons);\n          }\n        } else if (turn.type === \"carousel\") {\n          // Check if next turn is 'user' type\n          const nextTurn = this.conversationHistory[index + 1];\n          if (!nextTurn || nextTurn.type !== \"user\") {\n            this.core.addCarousel(turn.data);\n          }\n        } else if (turn.type === \"visual\" && turn.data.visualType === \"image\") {\n          this.core.addVisualImage(turn.data);\n        }\n      });\n      this.core.scrollToBottom();\n    } else {\n      console.error(\"Message container not found\");\n    }\n  }\n\n  async jumpToMainMenu() {\n    console.log(\"MainChatbot jumpToMainMenu called\");\n\n    this.core.showTypingIndicator();\n    try {\n      // Send the main_menu event to Voiceflow via Gadget\n      await this.core.handleStreaming({\n        action: {\n          type: \"event\",\n          payload: {\n            event: {\n              name: \"main_menu\",\n            },\n          },\n        },\n        config: {\n          completion_events: true,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error in jumpToMainMenu:\", error);\n      this.core.addMessage(\n        \"assistant\",\n        \"Sorry, I couldn't navigate to the main menu. Please try again.\"\n      );\n    } finally {\n      this.core.hideTypingIndicator();\n      this.core.scrollToBottom();\n    }\n  }\n\n  handleMessage({ sender, content }) {\n    this.core.addMessage(sender, content);\n  }\n\n  handleTyping(isTyping) {\n    if (isTyping) {\n      this.core.showTypingIndicator();\n    } else {\n      this.core.hideTypingIndicator();\n    }\n  }\n\n  handleUpdateMessage(content) {\n    this.core.updateLatestMessage(content);\n  }\n\n  handleError(message) {\n    this.core.addMessage(\"assistant\", message);\n  }\n\n  handleProductRedirect(productHandle) {\n    if (!productHandle) {\n      console.error(\"Cannot redirect: Product handle is undefined or empty\");\n      return;\n    }\n\n    const baseUrl = \"https://www.sherpapower.co.uk/products/\";\n    const productUrl = `${baseUrl}${encodeURIComponent(productHandle)}`;\n    console.log(`Redirecting to product page: ${productUrl}`);\n    window.location.href = productUrl;\n  }\n\n  // Additional methods like addCarousel, addVisualImage can be inherited from ChatbotCore or implemented here\n}\n\nexport default MainChatbot;\n"],"names":["MainChatbot","element","config","ChatbotCore","messageContainer","typingIndicator","drawer","drawerBody","form","input","e","message","buttonData","response","error","jumpToMainButton","payload","savedConversation","turn","index","nextTurn","sender","content","isTyping","productHandle","productUrl"],"mappings":"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"}