import{C as n}from"./chatbot-core-file.BJdONvJ0.js";class r extends HTMLElement{constructor(){super(),console.log("SectionChatbot constructor called");const t={apiEndpoint:"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming",userIDPrefix:"sectionChatbot",isSection:!0};this.chatbotBase=new n(t),console.log("ChatbotBase created with config:",t),this.chatbotBase.element=this,console.log("Element reference set on ChatbotBase"),this.chatInitialized=!1,this.eventListenersAttached=!1,this.savedDevices=new Map,this.initialized=!1,this.observer=new MutationObserver(e=>{this.querySelector(".chatbot-container")&&!this.initialized&&(console.log("Template content detected, initializing"),this.observer.disconnect(),this.initialize())})}connectedCallback(){console.log("SectionChatbot connected, starting observer"),this.observer.observe(this,{childList:!0,subtree:!0}),this.querySelector(".chatbot-container")&&(console.log("Template already present, initializing immediately"),this.observer.disconnect(),this.initialize())}initialize(){if(this.initialized){console.log("SectionChatbot already initialized");return}if(console.log("SectionChatbot initializing"),this.initializeElements(),!this.validateElements()){console.error("Required elements not found after template rendering");return}this.setupEventListeners(),this.loadSavedDevices(),this.setupViewMoreButton(),this.chatbotBase.setDOMElements(this.messageContainer,this.typingIndicator,this.chatMessages),this.chatbotBase.initializeChatIfNeeded(),this.initialized=!0}initializeElements(){console.log("SectionChatbot initializeElements called"),this.messageContainer=this.querySelector(".message-container"),this.typingIndicator=this.querySelector(".chat-typing"),this.chatForm=this.querySelector("#chatForm"),this.userInput=this.querySelector("#userInput"),this.chatMessages=this.querySelector(".chat-messages"),this.applicationsGrid=document.querySelector(".applications-grid"),console.log("Section chatbot DOM structure:",{innerHTML:this.innerHTML,outerHTML:this.outerHTML}),console.log("Section chatbot elements found:",{messageContainer:this.messageContainer,typingIndicator:this.typingIndicator,chatForm:this.chatForm,userInput:this.userInput,chatMessages:this.chatMessages,applicationsGrid:this.applicationsGrid})}validateElements(){const t={messageContainer:this.messageContainer,typingIndicator:this.typingIndicator,chatForm:this.chatForm,userInput:this.userInput,chatMessages:this.chatMessages},e=Object.entries(t).filter(([,i])=>!i).map(([i])=>i);return e.length>0?(console.error("Missing required elements:",e),!1):(console.log("All required elements found"),!0)}setupEventListeners(){this.eventListenersAttached||(console.log("SectionChatbot setupEventListeners called"),this.userInput.addEventListener("focus",()=>{console.log("Input focused, initializing chat if needed"),this.initializeChat()}),this.chatForm.addEventListener("submit",async t=>{t.preventDefault();const e=this.userInput.value.trim();e&&(console.log("Form submitted with message:",e),this.userInput.value="",await this.initializeChat(),await this.handleUserMessage(e))}),this.messageContainer.addEventListener("click",async t=>{const e=t.target.closest(".chat-button");if(e&&e.dataset.buttonData)try{const i=JSON.parse(e.dataset.buttonData);console.log("Button clicked:",i),await this.handleButtonClick(i)}catch(i){console.error("Error parsing button data:",i)}}),this.eventListenersAttached=!0)}async initializeChat(){if(this.chatInitialized){console.log("Chat already initialized");return}console.log("Initializing section chatbot");const t=this.getProductDetails();try{await this.chatbotBase.sendLaunch("shopifySection",t),this.chatInitialized=!0,console.log("Section chatbot initialized")}catch(e){console.error("Error initializing section chatbot:",e),this.chatbotBase.ui.addMessage("assistant","I apologize, but I encountered an error initializing the chat. Please try again.")}}getProductDetails(){const t=this.getAttribute("product-title")||"",e=this.getAttribute("product-capacity")||"",i=parseFloat(this.getAttribute("product-ac_output_continuous_power"))||0,a=parseFloat(this.getAttribute("product-ac_output_peak_power"))||0,o=parseFloat(this.getAttribute("product-dc_output_power"))||0,s={title:t,capacity:e,ac_output_continuous_power:i,ac_output_peak_power:a,dc_output_power:o};return console.log("Product details gathered:",s),JSON.stringify(s)}async handleUserMessage(t){try{await this.chatbotBase.sendMessage(t)}catch(e){console.error("Error in handleUserMessage:",e),this.chatbotBase.ui.addMessage("assistant","I apologize, but I encountered an error processing your message. Please try again.")}}async handleButtonClick(t){try{await this.chatbotBase.handleButtonClick(t)}catch(e){console.error("Error in handleButtonClick:",e),this.chatbotBase.ui.addMessage("assistant","I apologize, but I encountered an error processing your selection. Please try again.")}}async handleSpecialTrace(t){console.log("SectionChatbot handling special trace:",t),await this.chatbotBase.handleSpecialTrace(t),t.type==="device_answer"&&await this.handleDeviceAnswer(t.payload)}async handleDeviceAnswer(t){console.log("Handling device answer:",t);let e=Array.isArray(t)?t:t.devices;if(!Array.isArray(e)){console.error("Invalid devices data:",e);return}e.forEach(i=>{console.log("Processing device:",i);const{name:a,estimatedRuntime:o}=i;this.saveDeviceEstimate({name:a,estimatedRuntime:o});const s=this.createDeviceCard(i);this.insertCard(s)});try{this.updateDevicesView()}catch(i){console.error("Error in updateDevicesView:",i)}}createDeviceCard(t){const e=this.formatRuntime(t.estimatedRuntime),i=document.createElement("div");return i.className="application-card chatbot-card",i.innerHTML=`
      <div class="appliance-card__circle">
        <img src="${t.icon||""}" alt="${t.name}" class="application-card__image">
      </div>
      <div class="application-card__content">
        <p class="application-card__title">${t.name}</p>
        <p class="application-card__runtime">${e}</p>
      </div>
    `,i}formatRuntime(t){if(t>=24){const e=Math.floor(t/24);return`${e} day${e>1?"s":""}`}return`${Math.round(t*10)/10} hours`}insertCard(t){this.applicationsGrid?this.applicationsGrid.appendChild(t):console.error("Applications grid not found")}saveDeviceEstimate(t){this.savedDevices.set(t.name,t),this.saveDevicesToStorage()}loadSavedDevices(){try{const t=localStorage.getItem("savedDevices");if(t){const e=JSON.parse(t);this.savedDevices=new Map(Object.entries(e)),this.updateDevicesView()}}catch(t){console.error("Error loading saved devices:",t)}}saveDevicesToStorage(){try{const t=Object.fromEntries(this.savedDevices);localStorage.setItem("savedDevices",JSON.stringify(t))}catch(t){console.error("Error saving devices to storage:",t)}}updateDevicesView(){if(!this.applicationsGrid){console.error("Applications grid not found");return}this.applicationsGrid.querySelectorAll(".chatbot-card").forEach(e=>e.remove()),this.savedDevices.forEach(e=>{const i=this.createDeviceCard(e);this.insertCard(i)})}setupViewMoreButton(){const t=this.querySelector(".view-more-button");t&&t.addEventListener("click",()=>{this.applicationsGrid.classList.toggle("show-all"),t.textContent=this.applicationsGrid.classList.contains("show-all")?"View Less":"View More"})}}customElements.define("section-chatbot",r);console.log("SectionChatbot module loaded");
//# sourceMappingURL=chatbot-section.Cb9JZv3K.js.map
