import{C as u}from"./chatbot-core-file-CikaHu9r.js";console.log("MainChatbot module loading");class p{constructor(t,e){console.log("MainChatbot constructor called with config:",e),this.element=t,this.voiceflowEndpoint=e.voiceflowEndpoint,this.core=new u({apiEndpoint:this.voiceflowEndpoint}),console.log("ChatbotCore instance created:",this.core),this.conversationHistory=[],this.hasLaunched=localStorage.getItem("chatHasLaunched")==="true",this.eventListenersAttached=!1,this.initializeElements(),this.setupEventListeners(),this.hasLaunched&&(this.loadConversationFromStorage(),this.displaySavedConversation())}initializeElements(){console.log("MainChatbot initializeElements called");const t=this.element.querySelector("#messageContainer"),e=this.element.querySelector(".chat-typing"),s=this.element;if(!t||!e||!s){console.error("Required DOM elements not found");return}this.core.setDOMElements(t,e,s),console.log("DOM elements set in ChatbotCore:",this.core)}setupEventListeners(){if(this.eventListenersAttached)return;console.log("MainChatbot setupEventListeners called");const t=this.element.querySelector("#chatForm"),e=this.element.querySelector("#userInput");if(!t||!e){console.error("Chat form or input not found");return}t.addEventListener("submit",async s=>{s.preventDefault();const n=e.value.trim();n&&(console.log("Form submitted with message:",n),e.value="",await this.handleUserMessage(n))}),this.element.addEventListener("click",async s=>{if(s.target.matches(".button-container button")){const n=JSON.parse(s.target.dataset.buttonData);try{const i=await this.core.handleButtonClick(n);await this.handleAgentResponse(i)}catch(i){console.error("Error handling button click:",i)}}}),this.eventListenersAttached=!0}async handleUserMessage(t){this.core.addMessage("user",t),this.conversationHistory.push({type:"user",message:t}),this.saveConversationToStorage(),this.core.showTypingIndicator();try{const e=await this.core.sendMessage(t);console.log("Response from sendMessage:",e),await this.handleAgentResponse(e)}catch(e){console.error("Error in send message:",e)}finally{this.core.hideTypingIndicator(),this.core.scrollToBottom()}}loadConversationFromStorage(){const t=localStorage.getItem("chatConversation");this.conversationHistory=t?JSON.parse(t):[],console.log("Loaded conversation from storage:",this.conversationHistory)}saveConversationToStorage(){localStorage.setItem("chatConversation",JSON.stringify(this.conversationHistory)),console.log("Saved conversation to storage")}displaySavedConversation(){console.log("Displaying saved conversation");const t=this.element.querySelector("#messageContainer");t?(t.innerHTML="",this.conversationHistory.forEach(e=>{this.core.addMessage(e.type,e.message)}),this.core.scrollToBottom()):console.error("Message container not found")}async initializeChat(){console.log("Initializing chat"),this.hasLaunched||(console.log("Initializing chat for the first time"),await this.sendLaunch()),console.log("Chat initialized")}async sendLaunch(){console.log("Sending launch request"),this.core.showTypingIndicator();try{const t=await this.core.sendLaunch();await this.handleAgentResponse(t),this.hasLaunched=!0,localStorage.setItem("chatHasLaunched","true")}catch(t){console.error("Error in send launch:",t)}finally{this.core.hideTypingIndicator()}}async handleAgentResponse(t){console.log("Handling agent response:",t);for(const e of t)e.type==="text"?(this.core.addMessage("assistant",e.payload.message),this.conversationHistory.push({type:"assistant",message:e.payload.message})):e.type==="choice"?this.core.addButtons(e.payload.buttons):e.type==="carousel"?this.addCarousel(e.payload):console.log("Unknown trace type:",e.type);this.saveConversationToStorage(),this.core.scrollToBottom()}addCarousel(t){console.log("Adding carousel:",t);const e=document.createElement("div");e.className="carousel",e.innerHTML=`
    <div class="carousel__container">
      <!-- Carousel items will be dynamically added here -->
    </div>
    <button class="carousel__button carousel__button--left" aria-label="Previous slide">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    <button class="carousel__button carousel__button--right" aria-label="Next slide">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  `;const s=new g(e);for(let a=0;a<t.cards.length;a+=2){const r=t.cards.slice(a,a+2).map(o=>`
      <div class="carousel__item-wrapper">
        <div class="carousel__item-content">
          <img src="${o.imageUrl}" alt="${o.title}" class="carousel__item-image">
          <h6 class="carousel__item-title">${o.title}</h6>
          <p class="carousel__item-description">${o.description.text}</p>
          <button class="button carousel__item-button" data-button-index="0">${o.buttons[0].name}</button>
        </div>
      </div>
    `).join("");s.addItem(r)}e.querySelectorAll(".carousel__item-button").forEach((a,r)=>{a.addEventListener("click",async()=>{const o=Math.floor(r/t.cards[0].buttons.length),h=r%t.cards[0].buttons.length,d=t.cards[o].buttons[h];try{const l=await this.core.handleButtonClick(d);await this.handleAgentResponse(l)}catch(l){console.error("Error handling carousel button click:",l)}})});const i=this.element.querySelector("#messageContainer");i?(i.appendChild(e),this.core.scrollToBottom()):console.error("Message container not found when adding carousel")}}class g{constructor(t){this.element=t,this.container=t.querySelector(".carousel__container"),this.leftButton=t.querySelector(".carousel__button--left"),this.rightButton=t.querySelector(".carousel__button--right"),this.items=[],this.currentIndex=0,this.leftButton.addEventListener("click",()=>this.move("left")),this.rightButton.addEventListener("click",()=>this.move("right"))}addItem(t){const e=document.createElement("div");e.className="carousel__item",e.innerHTML=t,this.container.appendChild(e),this.items.push(e),this.updateVisibility()}move(t){t==="left"?this.currentIndex=Math.max(0,this.currentIndex-1):this.currentIndex=Math.min(this.items.length-1,this.currentIndex+1),this.updatePosition(),this.updateVisibility()}updatePosition(){const t=-this.currentIndex*100;this.container.style.transform=`translateX(${t}%)`}updateVisibility(){this.leftButton.style.display=this.currentIndex===0?"none":"flex",this.rightButton.style.display=this.currentIndex===this.items.length-1?"none":"flex"}}console.log("MainChatbot module loaded");export{p as M};
//# sourceMappingURL=chatbot-main-DlZtoqoF.js.map
