{"version":3,"file":"chatbot-section.IfA0uCHn.js","sources":["../frontend/ui/chatbot-section-ui.js","../frontend/entrypoints/chatbot-section.js"],"sourcesContent":["// /assets/scripts/chatbot/section/section-chatbot-ui.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * SectionChatbotUI Class\n * Handles UI-specific functionalities for the Section Chatbot.\n */\nclass SectionChatbotUI {\n  /**\n   * Constructor initializes UI elements, extracts product details, and sets up event listeners.\n   * @param {HTMLElement} container - The section chatbot UI container.\n   */\n  constructor(container) {\n    this.container = container;\n    this.form = this.container.querySelector(\".chat-form\");\n    this.input = this.container.querySelector(\"input[type='text']\");\n    this.messageContainer = this.container.querySelector(\".message-container\");\n\n    if (!this.container) {\n      console.error(\"Section Chatbot UI container not found\");\n      return;\n    }\n\n    if (!this.form || !this.input) {\n      console.error(\"Section Chatbot form or input not found\");\n      return;\n    }\n\n    // Extract product details from container's data attributes\n    this.productTitle = this.container.dataset.productTitle;\n    this.productCapacity = this.container.dataset.productCapacity;\n    this.acOutputContinuousPower =\n      this.container.dataset.productAcOutputContinuousPower;\n    this.acOutputPeakPower = this.container.dataset.productAcOutputPeakPower;\n    this.dcOutputPower = this.container.dataset.productDcOutputPower;\n\n    this.startBlock = \"shopifySection\";\n    this.productDetails = {\n      title: this.productTitle,\n      capacity: this.productCapacity,\n      ac_output_continuous_power: this.acOutputContinuousPower,\n      ac_output_peak_power: this.acOutputPeakPower,\n      dc_output_power: this.dcOutputPower,\n    };\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for user interactions within the UI.\n   */\n  setupEventListeners() {\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        this.emit(\"userMessage\", message);\n        this.input.value = \"\";\n      }\n    });\n  }\n\n  /**\n   * Registers a callback for user message submissions.\n   * @param {Function} callback - Function to handle user messages.\n   */\n  onUserMessage(callback) {\n    eventBus.on(\"userMessage\", callback);\n  }\n\n  /**\n   * Registers a callback for button click interactions.\n   * @param {Function} callback - Function to handle button clicks.\n   */\n  onButtonClick(callback) {\n    eventBus.on(\"buttonClicked\", callback);\n  }\n\n  /**\n   * Emits custom events from the UI components.\n   * @param {string} eventName - Name of the event.\n   * @param {any} data - Data to pass with the event.\n   */\n  emit(eventName, data) {\n    const event = new CustomEvent(eventName, { detail: data });\n    this.container.dispatchEvent(event);\n  }\n\n  /**\n   * Adds a message to the chatbot UI.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} content - The message content.\n   */\n  addMessage(sender, content) {\n    const message = document.createElement(\"message-component\");\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n    this.messageContainer.appendChild(message);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Adds interactive buttons to the chatbot UI.\n   * @param {Array} buttons - Array of button data.\n   */\n  addButtons(buttons) {\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      this.messageContainer.appendChild(button);\n    });\n    this.scrollToBottom();\n\n    // Set up event delegation for button clicks\n    this.messageContainer.addEventListener(\"click\", (e) => {\n      if (e.target.closest(\"button-component\")) {\n        const button = e.target.closest(\"button-component\");\n        const payload = JSON.parse(button.getAttribute(\"payload\"));\n        this.emit(\"buttonClicked\", payload);\n        this.removeInteractiveElements();\n      }\n    });\n  }\n\n  /**\n   * Adds a carousel to the chatbot UI.\n   * @param {Array} items - Array of carousel items.\n   */\n  addCarousel(items) {\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.setAttribute(\"items\", JSON.stringify(items));\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n\n    // Set up event delegation for carousel interactions if necessary\n    // Implement similar to buttons if carousel items have interactive elements\n  }\n\n  /**\n   * Populates the applications grid with device information.\n   * @param {Array} devices - Array of device data.\n   */\n  populateApplicationsGrid(devices) {\n    const grid = document.querySelector(\".applications-grid\");\n    if (!grid) {\n      console.error(\"Applications grid not found\");\n      return;\n    }\n    devices.forEach((device) => {\n      const card = document.createElement(\"div\");\n      card.classList.add(\"application-card\", \"chatbot-card\");\n      card.innerHTML = `\n        <div class=\"application-card__image\">\n          <img src=\"${device.imageUrl}\" alt=\"${device.name}\" />\n        </div>\n        <div class=\"application-card__content\">\n          <div class=\"application-card__title\">${device.name}</div>\n          <div class=\"application-card__runtime\">${device.estimatedRuntime}</div>\n        </div>\n      `;\n      grid.appendChild(card);\n    });\n    this.scrollToBottom();\n  }\n\n  /**\n   * Displays an error message in the chatbot UI.\n   * @param {string} message - The error message.\n   */\n  displayError(message) {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.innerText = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Scrolls the chatbot container to the bottom.\n   */\n  scrollToBottom() {\n    this.container.scrollTop = this.container.scrollHeight;\n  }\n\n  /**\n   * Retrieves the value of a specified attribute from the chatbot container.\n   * @param {string} attrName - The name of the attribute.\n   * @returns {string|null} - The value of the attribute or null if not found.\n   */\n  getAttribute(attrName) {\n    return this.container.getAttribute(attrName);\n  }\n\n  /**\n   * Removes interactive elements (buttons, carousels) from the UI.\n   */\n  removeInteractiveElements() {\n    const interactiveElements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component\"\n    );\n    interactiveElements.forEach((element) => element.remove());\n  }\n}\n\nexport default SectionChatbotUI;\n","// /assets/scripts/chatbot/section/chatbot-section.js\n\nimport ChatbotCore from \"../core/chatbot-core.js\";\nimport SectionChatbotUI from \"../ui/chatbot-section-ui.js\";\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * SectionChatbot Class\n * Manages the Section Chatbot's interactions, handles product details, and updates the UI.\n */\nclass SectionChatbot {\n  /**\n   * Constructor initializes ChatbotCore and SectionChatbotUI, sets up event listeners.\n   * @param {ChatbotCore} core - Instance of ChatbotCore handling API communications.\n   * @param {SectionChatbotUI} ui - Instance of SectionChatbotUI handling UI updates.\n   */\n  constructor(core, ui) {\n    this.core = core;\n    this.ui = ui;\n    this.isLaunched = false;\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for ChatbotCore events.\n   */\n  setupEventListeners() {\n    // Listen to events emitted by ChatbotCore via EventBus\n    eventBus.on(EVENTS.SECTION_CHATBOT.MESSAGE_RECEIVED, (data) => {\n      this.ui.addMessage(\"assistant\", data.content);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.CHOICE_PRESENTED, (data) => {\n      this.ui.addButtons(data.choices);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.CAROUSEL_PRESENTED, (data) => {\n      this.ui.addCarousel(data.carouselItems);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.DEVICE_ANSWER, (data) => {\n      this.ui.populateApplicationsGrid(data.devices);\n    });\n\n    eventBus.on(EVENTS.SECTION_CHATBOT.ERROR, (error) => {\n      this.ui.displayError(error.message);\n    });\n  }\n\n  /**\n   * Launches the chatbot by sending a launch request with required variables.\n   */\n  launch() {\n    if (this.isLaunched) return;\n\n    const interactPayload = {\n      action: {\n        type: \"launch\",\n        payload: {\n          startBlock: \"shopifySection\",\n          productDetails: this.ui.productDetails,\n        },\n      },\n    };\n\n    this.core.sendLaunch(interactPayload);\n    this.isLaunched = true;\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    this.core.sendMessage(message);\n    this.ui.addMessage(\"user\", message);\n    // Note: Section Chatbot does not maintain history\n  }\n}\n\n// Initialize Section Chatbot on DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const sectionChatbotContainer = document.getElementById(\"section-chatbot-ui\");\n\n  if (!sectionChatbotContainer) {\n    console.error(\"Section Chatbot UI container not found\");\n    return;\n  }\n\n  // Generate or retrieve existing userID for Section Chatbot\n  let sectionUserId = localStorage.getItem(\"sectionChatbotUserId\");\n  if (!sectionUserId) {\n    sectionUserId = generateUserId(\"sectionChatbot\");\n    localStorage.setItem(\"sectionChatbotUserId\", sectionUserId);\n  }\n\n  // Initialize ChatbotCore with the generated userID\n  const sectionChatbotCore = new ChatbotCore({\n    userID: sectionUserId,\n    endpoint:\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\",\n    chatbotType: \"section\",\n  });\n\n  // Initialize SectionChatbotUI\n  const sectionChatbotUI = new SectionChatbotUI(sectionChatbotContainer);\n\n  // Initialize SectionChatbot\n  const sectionChatbot = new SectionChatbot(\n    sectionChatbotCore,\n    sectionChatbotUI\n  );\n\n  // Listen for user message submissions\n  sectionChatbotUI.onUserMessage((message) => {\n    sectionChatbot.sendMessage(message);\n  });\n\n  // Listen for button clicks from UI components\n  sectionChatbotUI.onButtonClick((payload) => {\n    sectionChatbot.sendMessage(JSON.stringify(payload));\n  });\n\n  // Handle launch event on first focus of the input field\n  let hasLaunched = false;\n  const sectionInput = sectionChatbotContainer.querySelector(\n    \"#section-chatbot-input\"\n  );\n\n  if (sectionInput) {\n    sectionInput.addEventListener(\"focus\", () => {\n      if (!hasLaunched) {\n        sectionChatbot.launch();\n        hasLaunched = true;\n      }\n    });\n  } else {\n    console.error(\"Section Chatbot input field not found\");\n  }\n});\n\nexport default SectionChatbot;\n"],"names":["SectionChatbotUI","container","e","message","callback","eventBus","eventName","data","event","sender","content","buttons","buttonData","button","payload","items","carousel","devices","grid","device","card","errorDiv","attrName","element","SectionChatbot","core","ui","EVENTS","error","interactPayload","sectionChatbotContainer","sectionUserId","generateUserId","sectionChatbotCore","ChatbotCore","sectionChatbotUI","sectionChatbot","hasLaunched","sectionInput"],"mappings":"iHASA,MAAMA,CAAiB,CAKrB,YAAYC,EAAW,CAMrB,GALA,KAAK,UAAYA,EACjB,KAAK,KAAO,KAAK,UAAU,cAAc,YAAY,EACrD,KAAK,MAAQ,KAAK,UAAU,cAAc,oBAAoB,EAC9D,KAAK,iBAAmB,KAAK,UAAU,cAAc,oBAAoB,EAErE,CAAC,KAAK,UAAW,CACnB,QAAQ,MAAM,wCAAwC,EACtD,MACD,CAED,GAAI,CAAC,KAAK,MAAQ,CAAC,KAAK,MAAO,CAC7B,QAAQ,MAAM,yCAAyC,EACvD,MACD,CAGD,KAAK,aAAe,KAAK,UAAU,QAAQ,aAC3C,KAAK,gBAAkB,KAAK,UAAU,QAAQ,gBAC9C,KAAK,wBACH,KAAK,UAAU,QAAQ,+BACzB,KAAK,kBAAoB,KAAK,UAAU,QAAQ,yBAChD,KAAK,cAAgB,KAAK,UAAU,QAAQ,qBAE5C,KAAK,WAAa,iBAClB,KAAK,eAAiB,CACpB,MAAO,KAAK,aACZ,SAAU,KAAK,gBACf,2BAA4B,KAAK,wBACjC,qBAAsB,KAAK,kBAC3B,gBAAiB,KAAK,aAC5B,EAEI,KAAK,oBAAmB,CACzB,CAKD,qBAAsB,CACpB,KAAK,KAAK,iBAAiB,SAAWC,GAAM,CAC1CA,EAAE,eAAc,EAChB,MAAMC,EAAU,KAAK,MAAM,MAAM,KAAI,EACjCA,IACF,KAAK,KAAK,cAAeA,CAAO,EAChC,KAAK,MAAM,MAAQ,GAE3B,CAAK,CACF,CAMD,cAAcC,EAAU,CACtBC,EAAS,GAAG,cAAeD,CAAQ,CACpC,CAMD,cAAcA,EAAU,CACtBC,EAAS,GAAG,gBAAiBD,CAAQ,CACtC,CAOD,KAAKE,EAAWC,EAAM,CACpB,MAAMC,EAAQ,IAAI,YAAYF,EAAW,CAAE,OAAQC,CAAI,CAAE,EACzD,KAAK,UAAU,cAAcC,CAAK,CACnC,CAOD,WAAWC,EAAQC,EAAS,CAC1B,MAAMP,EAAU,SAAS,cAAc,mBAAmB,EAC1DA,EAAQ,aAAa,SAAUM,CAAM,EACrCN,EAAQ,aAAa,UAAWO,CAAO,EACvC,KAAK,iBAAiB,YAAYP,CAAO,EACzC,KAAK,eAAc,CACpB,CAMD,WAAWQ,EAAS,CAClBA,EAAQ,QAASC,GAAe,CAC9B,MAAMC,EAAS,SAAS,cAAc,kBAAkB,EACxDA,EAAO,aAAa,QAASD,EAAW,IAAI,EAC5CC,EAAO,aAAa,UAAW,KAAK,UAAUD,EAAW,OAAO,CAAC,EACjE,KAAK,iBAAiB,YAAYC,CAAM,CAC9C,CAAK,EACD,KAAK,eAAc,EAGnB,KAAK,iBAAiB,iBAAiB,QAAU,GAAM,CACrD,GAAI,EAAE,OAAO,QAAQ,kBAAkB,EAAG,CACxC,MAAMA,EAAS,EAAE,OAAO,QAAQ,kBAAkB,EAC5CC,EAAU,KAAK,MAAMD,EAAO,aAAa,SAAS,CAAC,EACzD,KAAK,KAAK,gBAAiBC,CAAO,EAClC,KAAK,0BAAyB,CAC/B,CACP,CAAK,CACF,CAMD,YAAYC,EAAO,CACjB,MAAMC,EAAW,SAAS,cAAc,oBAAoB,EAC5DA,EAAS,aAAa,QAAS,KAAK,UAAUD,CAAK,CAAC,EACpD,KAAK,iBAAiB,YAAYC,CAAQ,EAC1C,KAAK,eAAc,CAIpB,CAMD,yBAAyBC,EAAS,CAChC,MAAMC,EAAO,SAAS,cAAc,oBAAoB,EACxD,GAAI,CAACA,EAAM,CACT,QAAQ,MAAM,6BAA6B,EAC3C,MACD,CACDD,EAAQ,QAASE,GAAW,CAC1B,MAAMC,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,UAAU,IAAI,mBAAoB,cAAc,EACrDA,EAAK,UAAY;AAAA;AAAA,sBAEDD,EAAO,QAAQ,UAAUA,EAAO,IAAI;AAAA;AAAA;AAAA,iDAGTA,EAAO,IAAI;AAAA,mDACTA,EAAO,gBAAgB;AAAA;AAAA,QAGpED,EAAK,YAAYE,CAAI,CAC3B,CAAK,EACD,KAAK,eAAc,CACpB,CAMD,aAAajB,EAAS,CACpB,MAAMkB,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAU,IAAI,eAAe,EACtCA,EAAS,UAAYlB,EACrB,KAAK,iBAAiB,YAAYkB,CAAQ,EAC1C,KAAK,eAAc,CACpB,CAKD,gBAAiB,CACf,KAAK,UAAU,UAAY,KAAK,UAAU,YAC3C,CAOD,aAAaC,EAAU,CACrB,OAAO,KAAK,UAAU,aAAaA,CAAQ,CAC5C,CAKD,2BAA4B,CACE,KAAK,iBAAiB,iBAChD,sCACN,EACwB,QAASC,GAAYA,EAAQ,OAAQ,CAAA,CAC1D,CACH,CCjMA,MAAMC,CAAe,CAMnB,YAAYC,EAAMC,EAAI,CACpB,KAAK,KAAOD,EACZ,KAAK,GAAKC,EACV,KAAK,WAAa,GAElB,KAAK,oBAAmB,CACzB,CAKD,qBAAsB,CAEpBrB,EAAS,GAAGsB,EAAO,gBAAgB,iBAAmBpB,GAAS,CAC7D,KAAK,GAAG,WAAW,YAAaA,EAAK,OAAO,CAClD,CAAK,EAEDF,EAAS,GAAGsB,EAAO,gBAAgB,iBAAmBpB,GAAS,CAC7D,KAAK,GAAG,WAAWA,EAAK,OAAO,CACrC,CAAK,EAEDF,EAAS,GAAGsB,EAAO,gBAAgB,mBAAqBpB,GAAS,CAC/D,KAAK,GAAG,YAAYA,EAAK,aAAa,CAC5C,CAAK,EAEDF,EAAS,GAAGsB,EAAO,gBAAgB,cAAgBpB,GAAS,CAC1D,KAAK,GAAG,yBAAyBA,EAAK,OAAO,CACnD,CAAK,EAEDF,EAAS,GAAGsB,EAAO,gBAAgB,MAAQC,GAAU,CACnD,KAAK,GAAG,aAAaA,EAAM,OAAO,CACxC,CAAK,CACF,CAKD,QAAS,CACP,GAAI,KAAK,WAAY,OAErB,MAAMC,EAAkB,CACtB,OAAQ,CACN,KAAM,SACN,QAAS,CACP,WAAY,iBACZ,eAAgB,KAAK,GAAG,cACzB,CACF,CACP,EAEI,KAAK,KAAK,WAAWA,CAAe,EACpC,KAAK,WAAa,EACnB,CAMD,YAAY1B,EAAS,CACnB,KAAK,KAAK,YAAYA,CAAO,EAC7B,KAAK,GAAG,WAAW,OAAQA,CAAO,CAEnC,CACH,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAM2B,EAA0B,SAAS,eAAe,oBAAoB,EAE5E,GAAI,CAACA,EAAyB,CAC5B,QAAQ,MAAM,wCAAwC,EACtD,MACD,CAGD,IAAIC,EAAgB,aAAa,QAAQ,sBAAsB,EAC1DA,IACHA,EAAgBC,EAAe,gBAAgB,EAC/C,aAAa,QAAQ,uBAAwBD,CAAa,GAI5D,MAAME,EAAqB,IAAIC,EAAY,CACzC,OAAQH,EACR,SACE,gFACF,YAAa,SACjB,CAAG,EAGKI,EAAmB,IAAInC,EAAiB8B,CAAuB,EAG/DM,EAAiB,IAAIZ,EACzBS,EACAE,CACJ,EAGEA,EAAiB,cAAehC,GAAY,CAC1CiC,EAAe,YAAYjC,CAAO,CACtC,CAAG,EAGDgC,EAAiB,cAAerB,GAAY,CAC1CsB,EAAe,YAAY,KAAK,UAAUtB,CAAO,CAAC,CACtD,CAAG,EAGD,IAAIuB,EAAc,GAClB,MAAMC,EAAeR,EAAwB,cAC3C,wBACJ,EAEMQ,EACFA,EAAa,iBAAiB,QAAS,IAAM,CACtCD,IACHD,EAAe,OAAM,EACrBC,EAAc,GAEtB,CAAK,EAED,QAAQ,MAAM,uCAAuC,CAEzD,CAAC"}