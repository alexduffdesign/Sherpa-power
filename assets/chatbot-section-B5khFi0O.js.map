{"version":3,"file":"chatbot-section-B5khFi0O.js","sources":["../frontend/entrypoints/chatbot-section.js"],"sourcesContent":["import { ChatbotCore } from \"./chatbot-core-file.js\";\n\nclass SectionChatbot extends HTMLElement {\n  constructor() {\n    super();\n    this.chatbotCore = new ChatbotCore();\n    this.userID = `section_${Math.floor(Math.random() * 1000000000000000)}`;\n  }\n\n  connectedCallback() {\n    console.log(\"SectionChatbot connected to the DOM\");\n    this.initialize();\n  }\n\n  initialize() {\n    const productTitle = this.getAttribute(\"product-title\");\n    const productCapacity = this.getAttribute(\"product-capacity\");\n\n    const config = {\n      apiEndpoint: \"https://chatbottings--development.gadget.app/voiceflow\",\n      chatFormId: \"chatForm\",\n      userInputId: \"userInput\",\n      chatMessagesId: \"chatMessages\",\n      messageContainerId: \"messageContainer\",\n      typingIndicatorSelector: \".chat-typing\",\n      productTitle,\n      productCapacity,\n    };\n\n    this.chatbotCore.initialize(config);\n    this.productTitle = productTitle;\n    this.productCapacity = productCapacity;\n    this.productDetails = `Power Station: ${this.productTitle}, Wattage: ${this.productCapacity}`;\n\n    this.applicationsGrid = this.querySelector(\".applications-grid\");\n    if (!this.applicationsGrid) {\n      console.error(\"Applications grid not found\");\n      return;\n    }\n\n    this.setupEventListeners();\n    this.loadSavedDevices();\n  }\n\n  setupEventListeners() {\n    if (this.viewMoreButton) {\n      this.viewMoreButton.addEventListener(\"click\", () =>\n        this.toggleDevicesView()\n      );\n    }\n  }\n\n  toggleDevicesView() {\n    this.isExpanded = !this.isExpanded;\n    this.updateDevicesView();\n  }\n\n  updateDevicesView() {\n    const allCards = this.applicationsGrid.querySelectorAll(\n      \".application-card.chatbot-card\"\n    );\n    if (allCards.length > this.devicesPerPage) {\n      this.viewMoreButton.style.display = \"block\";\n      this.viewMoreButton.textContent = this.isExpanded\n        ? \"View Less\"\n        : \"View More\";\n\n      allCards.forEach((card, index) => {\n        card.style.display =\n          index < this.devicesPerPage || this.isExpanded ? \"flex\" : \"none\";\n      });\n    } else {\n      this.viewMoreButton.style.display = \"none\";\n    }\n  }\n\n  async sendMessage(message) {\n    try {\n      const res = await this.chatbotCore.gadgetInteract({\n        userAction: {\n          type: \"text\",\n          payload: message,\n        },\n      });\n      this.chatbotCore.hideTypingIndicator();\n      this.handleAgentResponse(res);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      this.chatbotCore.hideTypingIndicator();\n    }\n  }\n\n  async sendLaunch() {\n    this.showTypingIndicator();\n    const interactPayload = {\n      userAction: {\n        type: \"launch\",\n        payload: {\n          startBlock: \"shopifySection\",\n          powerStationDetails: this.productDetails,\n        },\n      },\n    };\n\n    try {\n      const res = await this.chatbotCore.gadgetInteract(interactPayload);\n      console.log(\"Launch response:\", res);\n      this.hideTypingIndicator();\n      this.handleAgentResponse(res);\n    } catch (error) {\n      console.error(\"Error launching conversation:\", error);\n      this.hideTypingIndicator();\n    }\n  }\n\n  handleDeviceAnswer(payload) {\n    console.log(\"Raw device answer payload:\", payload);\n\n    let deviceData;\n\n    if (typeof payload === \"string\") {\n      try {\n        deviceData = JSON.parse(payload);\n      } catch (error) {\n        console.error(\"Failed to parse payload string:\", error);\n        return;\n      }\n    } else if (typeof payload === \"object\" && payload !== null) {\n      deviceData = payload;\n    } else {\n      console.error(\"Invalid payload type:\", typeof payload);\n      return;\n    }\n\n    console.log(\"Processed device data:\", deviceData);\n\n    let devices = Array.isArray(deviceData) ? deviceData : deviceData.devices;\n\n    if (!Array.isArray(devices)) {\n      console.error(\"Invalid devices data:\", devices);\n      return;\n    }\n\n    devices.forEach((device) => {\n      console.log(\"Processing device:\", device);\n      const { name, estimatedRuntime, powerConsumption } = device;\n      this.saveDeviceEstimate({ name, estimatedRuntime, powerConsumption });\n      const card = this.createDeviceCard(device);\n      this.insertCard(card);\n    });\n\n    this.updateDevicesView();\n  }\n\n  createDeviceCard(device) {\n    const card = document.createElement(\"div\");\n    card.className = \"application-card chatbot-card\";\n    card.innerHTML = `\n      <div class=\"application-card__image\">\n        <svg>...</svg>\n      </div>\n      <div class=\"application-card__content\">\n        <div class=\"application-card__title\">${device.name}</div>\n        <div class=\"application-card__runtime\">\n          ${device.estimatedRuntime.value} ${device.estimatedRuntime.unit}\n        </div>\n      </div>\n    `;\n    return card;\n  }\n\n  insertCard(card) {\n    const firstChatbotCard = this.applicationsGrid.querySelector(\n      \".application-card.chatbot-card\"\n    );\n    if (firstChatbotCard) {\n      this.applicationsGrid.insertBefore(card, firstChatbotCard);\n    } else {\n      this.applicationsGrid.appendChild(card);\n    }\n  }\n\n  saveDeviceEstimate(device) {\n    const key = `${this.productTitle}_devices`;\n    let devices = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n    const existingIndex = devices.findIndex((d) => d.name === device.name);\n    if (existingIndex !== -1) {\n      devices.splice(existingIndex, 1);\n    }\n    devices.unshift(device);\n\n    localStorage.setItem(key, JSON.stringify(devices));\n  }\n\n  loadSavedDevices() {\n    const key = `${this.productTitle}_devices`;\n    const devices = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n    devices.forEach((device) => {\n      const card = this.createDeviceCard(device);\n      this.insertCard(card);\n    });\n\n    this.updateDevicesView();\n  }\n\n  async handleAgentResponse(response) {\n    await super.handleAgentResponse(response);\n    for (const trace of response) {\n      if (trace.type === \"device_answer\") {\n        this.handleDeviceAnswer(trace.payload);\n      }\n    }\n  }\n}\n\ncustomElements.define(\"section-chatbot\", SectionChatbot);\n"],"names":["SectionChatbot","ChatbotCore","productTitle","productCapacity","config","allCards","card","index","message","res","error","interactPayload","payload","deviceData","devices","device","name","estimatedRuntime","powerConsumption","firstChatbotCard","key","existingIndex","d","response","trace"],"mappings":"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"}