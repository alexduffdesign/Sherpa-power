import{E as C}from"./vendor.DqvJXvYX.js";class f extends C{}const n=new f,y={MAIN_CHATBOT:{MESSAGE_RECEIVED:"mainChatbot:messageReceived",TYPING:"mainChatbot:typing",CHOICE_PRESENTED:"mainChatbot:choicePresented",CAROUSEL_PRESENTED:"mainChatbot:carouselPresented",ERROR:"mainChatbot:error"},SECTION_CHATBOT:{MESSAGE_RECEIVED:"sectionChatbot:messageReceived",DEVICE_ANSWER:"sectionChatbot:deviceAnswer",CHOICE_PRESENTED:"sectionChatbot:choicePresented",CAROUSEL_PRESENTED:"sectionChatbot:carouselPresented",ERROR:"sectionChatbot:error"}};class S{constructor({userID:t,endpoint:e,chatbotType:o}){if(!t)throw new Error("ChatbotCore requires a userID.");if(!e)throw new Error("ChatbotCore requires an endpoint URL.");if(!o)throw new Error('ChatbotCore requires a chatbotType ("main" or "section").');this.userID=t,this.endpoint=e,this.chatbotType=o,this.eventPrefix=o==="main"?"mainChatbot":"sectionChatbot",this.abortController=null,this.initialize()}initialize(){}sendLaunch(t={}){const e={action:{type:"launch",payload:t},config:{}};this.sendAction(e)}sendMessage(t){const e={action:{type:"text",payload:{message:t}},config:{}};this.sendAction(e)}async sendAction(t){this.abortController=new AbortController;const{signal:e}=this.abortController;try{const o=await fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,action:t.action,config:t.config}),credentials:"include",signal:e});if(!o.ok)throw new Error(`Gadget API responded with status ${o.status}`);const i=o.body.getReader(),p=new TextDecoder("utf-8");let c="";for(;;){const{done:m,value:v}=await i.read();if(m){n.emit(`${this.eventPrefix}:end`,{});break}c+=p.decode(v,{stream:!0});const h=c.split(`

`);c=h.pop(),h.forEach(s=>{if(s.trim()!=="")try{const r=s.split(`
`),d=r.find(l=>l.startsWith("event:")),g=r.find(l=>l.startsWith("data:")),u=d?d.split(":")[1].trim():"trace",E=g?JSON.parse(s.substring(s.indexOf("data:")+5).trim()):null;u==="trace"?this.processTrace(E):u==="end"&&n.emit(`${this.eventPrefix}:end`,{})}catch(r){console.error("Error parsing SSE event:",r)}})}}catch(o){o.name==="AbortError"?console.warn("SSE connection aborted"):(console.error("SSE connection error:",o),n.emit(`${this.eventPrefix}:error`,{message:o.message}))}finally{this.abortController=null,n.emit(`${this.eventPrefix}:end`,{})}}processTrace(t){if(!t.type){console.warn("Trace without type received:",t);return}switch(t.type){case"text":console.log("Text received choice trace:",t),n.emit(`${this.eventPrefix}:messageReceived`,{content:t.payload.message});break;case"choice":console.log("Choice received choice trace:",t),n.emit(`${this.eventPrefix}:choicePresented`,{choices:t.payload.choices});break;case"carousel":n.emit(`${this.eventPrefix}:carouselPresented`,{carouselItems:t.payload.items});break;case"device_answer":n.emit(`${this.eventPrefix}:deviceAnswer`,{devices:t.payload.devices});break;case"typing":t.payload.isTyping?n.emit(`${this.eventPrefix}:typing`,{isTyping:!0}):n.emit(`${this.eventPrefix}:typing`,{isTyping:!1});break;default:console.warn(`Unhandled trace type: ${t.type}`)}}closeConnection(){this.abortController&&(this.abortController.abort(),console.log("SSE connection closed."))}destroy(){this.closeConnection(),n.removeAllListeners(`${this.eventPrefix}:messageReceived`),n.removeAllListeners(`${this.eventPrefix}:choicePresented`),n.removeAllListeners(`${this.eventPrefix}:carouselPresented`),n.removeAllListeners(`${this.eventPrefix}:deviceAnswer`),n.removeAllListeners(`${this.eventPrefix}:error`),n.removeAllListeners(`${this.eventPrefix}:typing`),n.removeAllListeners(`${this.eventPrefix}:end`)}}class T{constructor(t){if(this.container=t,this.form=this.container.querySelector(".chat-form"),this.input=this.container.querySelector("input[type='text']"),this.messageContainer=this.container.querySelector(".message-container"),!this.container){console.error("Main Chatbot UI container not found");return}if(!this.form||!this.input){console.error("Main Chatbot form or input not found");return}this.setupEventListeners()}setupEventListeners(){this.form.addEventListener("submit",t=>{t.preventDefault();const e=this.input.value.trim();e&&(this.emit("userMessage",e),this.input.value="",this.saveToHistory("user",e))})}onUserMessage(t){n.on("userMessage",t)}onButtonClick(t){n.on("buttonClicked",t)}emit(t,e){const o=new CustomEvent(t,{detail:e});this.container.dispatchEvent(o)}addMessage(t,e){const o=document.createElement("message-component");o.setAttribute("sender",t),o.setAttribute("content",e),this.container.querySelector(".chatbot-container").appendChild(o),this.scrollToBottom(),this.saveToHistory(t,e)}addButtons(t){t.forEach(e=>{const o=document.createElement("button-component");o.setAttribute("label",e.name),o.setAttribute("payload",JSON.stringify(e.request)),this.container.querySelector(".chatbot-container").appendChild(o)}),this.scrollToBottom(),this.container.querySelector(".chatbot-container").addEventListener("click",e=>{if(e.target.closest("button-component")){const o=e.target.closest("button-component"),i=JSON.parse(o.getAttribute("payload"));this.emit("buttonClicked",i),this.removeInteractiveElements()}})}addCarousel(t){const e=document.createElement("carousel-component");e.setAttribute("items",JSON.stringify(t)),this.container.querySelector(".chatbot-container").appendChild(e),this.scrollToBottom()}showTypingIndicator(){const t=document.createElement("div");t.classList.add("typing-indicator"),t.innerText="Assistant is typing...",this.container.querySelector(".chatbot-container").appendChild(t),this.scrollToBottom()}hideTypingIndicator(){const t=this.container.querySelector(".typing-indicator");t&&t.remove()}displayError(t){const e=document.createElement("div");e.classList.add("error-message"),e.innerText=t,this.container.querySelector(".chatbot-container").appendChild(e),this.scrollToBottom()}scrollToBottom(){this.container.scrollTop=this.container.scrollHeight}saveToHistory(t,e){const o=JSON.parse(localStorage.getItem("mainChatbotHistory"))||[];o.push({sender:t,message:e}),localStorage.setItem("mainChatbotHistory",JSON.stringify(o))}removeInteractiveElements(){this.container.querySelectorAll("button-component, carousel-component").forEach(e=>e.remove())}}class A{constructor(t){if(this.container=t,this.form=this.container.querySelector(".chat-form"),this.input=this.container.querySelector("input[type='text']"),this.messageContainer=this.container.querySelector(".message-container"),!this.container){console.error("Section Chatbot UI container not found");return}if(!this.form||!this.input){console.error("Section Chatbot form or input not found");return}this.productTitle=this.container.dataset.productTitle,this.productCapacity=this.container.dataset.productCapacity,this.acOutputContinuousPower=this.container.dataset.productAcOutputContinuousPower,this.acOutputPeakPower=this.container.dataset.productAcOutputPeakPower,this.dcOutputPower=this.container.dataset.productDcOutputPower,this.startBlock="shopifySection",this.productDetails={title:this.productTitle,capacity:this.productCapacity,ac_output_continuous_power:this.acOutputContinuousPower,ac_output_peak_power:this.acOutputPeakPower,dc_output_power:this.dcOutputPower},this.setupEventListeners()}setupEventListeners(){this.form.addEventListener("submit",t=>{t.preventDefault();const e=this.input.value.trim();e&&(this.emit("userMessage",e),this.input.value="")})}onUserMessage(t){n.on("userMessage",t)}onButtonClick(t){n.on("buttonClicked",t)}emit(t,e){const o=new CustomEvent(t,{detail:e});this.container.dispatchEvent(o)}addMessage(t,e){const o=document.createElement("message-component");o.setAttribute("sender",t),o.setAttribute("content",e),this.messageContainer.appendChild(o),this.scrollToBottom()}addButtons(t){t.forEach(e=>{const o=document.createElement("button-component");o.setAttribute("label",e.name),o.setAttribute("payload",JSON.stringify(e.request)),this.messageContainer.appendChild(o)}),this.scrollToBottom(),this.messageContainer.addEventListener("click",e=>{if(e.target.closest("button-component")){const o=e.target.closest("button-component"),i=JSON.parse(o.getAttribute("payload"));this.emit("buttonClicked",i),this.removeInteractiveElements()}})}addCarousel(t){const e=document.createElement("carousel-component");e.setAttribute("items",JSON.stringify(t)),this.messageContainer.appendChild(e),this.scrollToBottom()}populateApplicationsGrid(t){const e=document.querySelector(".applications-grid");if(!e){console.error("Applications grid not found");return}t.forEach(o=>{const i=document.createElement("div");i.classList.add("application-card","chatbot-card"),i.innerHTML=`
        <div class="application-card__image">
          <img src="${o.imageUrl}" alt="${o.name}" />
        </div>
        <div class="application-card__content">
          <div class="application-card__title">${o.name}</div>
          <div class="application-card__runtime">${o.estimatedRuntime}</div>
        </div>
      `,e.appendChild(i)}),this.scrollToBottom()}displayError(t){const e=document.createElement("div");e.classList.add("error-message"),e.innerText=t,this.messageContainer.appendChild(e),this.scrollToBottom()}scrollToBottom(){this.container.scrollTop=this.container.scrollHeight}getAttribute(t){return this.container.getAttribute(t)}removeInteractiveElements(){this.messageContainer.querySelectorAll("button-component, carousel-component").forEach(e=>e.remove())}}export{S as C,y as E,T as M,A as S,n as e};
//# sourceMappingURL=chatbot.B83In-69.js.map
