{"version":3,"file":"chatbot-core-file.DfuEyLY8.js","sources":["../frontend/entrypoints/chatbot-core-file.js","../frontend/entrypoints/chatbot-api.js","../frontend/entrypoints/chatbot-ui.js","../frontend/entrypoints/chatbot-stream.js","../frontend/entrypoints/chatbot-trace.js","../frontend/entrypoints/chatbot-history.js","../frontend/entrypoints/chatbot-base.js","../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// chatbot-core.js\nconsole.log(\"Recent changes check : 3\");\n\nexport class ChatbotCore {\n  constructor(config) {\n    console.log(\"ChatbotCore constructor called with config:\", config);\n    this.apiEndpoint = config.apiEndpoint;\n    this.streamingEndpoint =\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\";\n    this.apiKey = config.apiKey;\n    this.projectID = config.projectID;\n    this.userIDPrefix = config.userIDPrefix || \"chatbot\";\n    this.userID = this.loadUserID();\n    this.messageContainer = null;\n    this.typingIndicator = null;\n    this.drawerBody = null;\n    this.defaultTypingText = \"Sherpa Guide Is Typing...\";\n    this.currentStream = null;\n\n    // Optional callback for specialized traces\n    this.onTraceReceived = null;\n\n    // Bind methods\n    this.sendMessage = this.sendMessage.bind(this);\n    this.streamInteract = this.streamInteract.bind(this);\n    this.handleStreamEvent = this.handleStreamEvent.bind(this);\n    this.addMessage = this.addMessage.bind(this);\n    this.gadgetInteract = this.gadgetInteract.bind(this);\n    this.addButtons = this.addButtons.bind(this);\n    this.removeButtons = this.removeButtons.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n\n    console.log(\"ChatbotCore instance created:\", this);\n  }\n\n  loadUserID() {\n    const key = `${this.userIDPrefix}UserID`;\n    let userID = localStorage.getItem(key);\n    if (!userID) {\n      userID = `${this.userIDPrefix}_${Math.floor(\n        Math.random() * 1000000000000000\n      )}`;\n      localStorage.setItem(key, userID);\n    }\n    console.log(`${this.userIDPrefix} userID loaded:`, userID);\n    return userID;\n  }\n\n  setDOMElements(messageContainer, typingIndicator, drawerBody) {\n    console.log(\"setDOMElements called:\", {\n      messageContainer,\n      typingIndicator,\n      drawerBody,\n    });\n    this.messageContainer = messageContainer;\n    this.typingIndicator = typingIndicator;\n    this.drawerBody = drawerBody;\n    console.log(\"DOM elements set:\", this);\n  }\n\n  scrollToBottom() {\n    if (this.drawerBody) {\n      setTimeout(() => {\n        this.drawerBody.scrollTop = this.drawerBody.scrollHeight;\n      }, 100); // Small delay to ensure content has rendered\n    } else {\n      console.error(\"Drawer body element not found for scrolling\");\n    }\n  }\n\n  async sendMessage(message) {\n    console.log(\"sendMessage called with:\", message);\n    try {\n      // Add the user's message to the chat\n      await this.addMessage(\"user\", message);\n\n      return await this.streamInteract({\n        type: \"text\",\n        payload: message,\n      });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  async sendLaunch(payload = {}) {\n    console.log(\"sendLaunch called with payload:\", payload);\n    this.showTypingIndicator();\n\n    try {\n      return await this.streamInteract({\n        type: \"launch\",\n        payload: payload?.action?.payload || {},\n      });\n    } catch (error) {\n      console.error(\"Error in launch:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  async streamInteract(action) {\n    console.log(\"streamInteract called with:\", action);\n    this.showTypingIndicator();\n\n    const fullPayload = {\n      userID: this.userID,\n      action,\n      config: {\n        tts: false,\n        stripSSML: true,\n        stopAll: false,\n        excludeTypes: [\"block\", \"debug\", \"flow\"],\n      },\n    };\n\n    try {\n      const response = await fetch(this.streamingEndpoint, {\n        method: \"POST\",\n        headers: {\n          Accept: \"text/event-stream\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(fullPayload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      const traces = [];\n      let buffer = \"\";\n\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split(\"\\n\");\n        buffer = lines.pop() || \"\";\n\n        for (const line of lines) {\n          if (line.trim() === \"\") continue;\n          if (line.startsWith(\"data: \")) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              traces.push(eventData);\n              await this.handleStreamEvent(eventData);\n            } catch (e) {\n              console.error(\"Error parsing event data:\", e, \"Line:\", line);\n            }\n          }\n        }\n      }\n\n      this.hideTypingIndicator();\n      return { traces };\n    } catch (error) {\n      console.error(\"Error in streamInteract:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  async handleStreamEvent(event) {\n    console.log(\"Received stream event:\", event);\n\n    // Always notify parent component of trace if callback exists\n    if (this.onTraceReceived) {\n      await this.onTraceReceived(event);\n    }\n\n    // Handle basic traces\n    switch (event.type) {\n      case \"text\":\n        if (event.payload?.message) {\n          await this.addMessage(\"assistant\", event.payload.message);\n        }\n        break;\n      case \"path\":\n        // Path traces are for flow control, we can log them but no UI action needed\n        console.log(\"Path trace received:\", event.payload);\n        break;\n      case \"choice\":\n        if (event.payload?.buttons) {\n          this.addButtons(event.payload.buttons);\n        }\n        break;\n      case \"waiting_text\":\n        this.showTypingIndicator(event.payload);\n        break;\n      case \"end\":\n        console.log(\"Stream ended\");\n        this.hideTypingIndicator();\n        break;\n      default:\n        // Log unhandled trace types but don't throw - parent might handle them\n        console.log(\"Trace delegated to parent:\", event.type);\n    }\n\n    this.scrollToBottom();\n  }\n\n  async gadgetInteract(payload) {\n    console.log(\"Sending payload to Gadget:\", payload);\n    const fullPayload = {\n      userID: this.userID,\n      action: payload.action,\n      config: payload.config || {\n        tts: false,\n        stripSSML: true,\n        stopAll: false,\n        excludeTypes: [\"block\", \"debug\", \"flow\"],\n      },\n    };\n\n    console.log(\"Formatted payload:\", fullPayload);\n\n    if (payload.action?.payload?.waiting_text) {\n      this.showTypingIndicator(payload.action.payload.waiting_text);\n    } else {\n      this.showTypingIndicator();\n    }\n\n    const response = await fetch(this.apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        versionID: \"development\",\n      },\n      body: JSON.stringify(fullPayload),\n    });\n\n    console.log(\"Response status:\", response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Error response:\", errorText);\n      throw new Error(`Gadget API error: ${response.status} - ${errorText}`);\n    }\n\n    // For 204 responses, return an empty response object\n    if (response.status === 204) {\n      console.log(\"Received 204 No Content response\");\n      return { traces: [] };\n    }\n\n    const data = await response.json();\n    console.log(\"Response data:\", data);\n    console.log(\n      \"All traces:\",\n      data.traces\n        ? data.traces.map((t) => ({ type: t.type, payload: t.payload }))\n        : \"No traces\"\n    );\n\n    // Check for waiting_text in the response traces\n    if (data.traces) {\n      console.log(\"Looking for waiting_text trace...\");\n      const waitingTrace = data.traces.find((trace) => {\n        console.log(\"Checking trace:\", {\n          type: trace.type,\n          payload: trace.payload,\n        });\n        return trace.type === \"waiting_text\";\n      });\n\n      if (waitingTrace) {\n        console.log(\"Found waiting_text trace:\", waitingTrace);\n        console.log(\"Payload type:\", typeof waitingTrace.payload);\n        console.log(\"Payload value:\", waitingTrace.payload);\n\n        // Handle both text and JSON payloads\n        const text =\n          typeof waitingTrace.payload === \"string\"\n            ? waitingTrace.payload\n            : waitingTrace.payload?.text || waitingTrace.payload?.waiting_text;\n\n        console.log(\"Extracted text:\", text);\n\n        if (text) {\n          this.showTypingIndicator(text);\n        } else {\n          console.log(\"No valid text found in waiting_text payload\");\n        }\n      } else {\n        console.log(\"No waiting_text trace found\");\n      }\n    }\n\n    return data;\n  }\n\n  showTypingIndicator(customText = null) {\n    console.log(\"Showing typing indicator\");\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n      this.typingIndicator.classList.add(\"active\");\n      const typingText = this.typingIndicator.querySelector(\"p\");\n      if (typingText) {\n        if (customText) {\n          typingText.textContent = customText;\n        } else {\n          typingText.textContent = this.defaultTypingText;\n        }\n      }\n      this.scrollToBottom();\n    }\n  }\n\n  hideTypingIndicator() {\n    console.log(\"Hiding typing indicator\");\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n      this.typingIndicator.classList.remove(\"active\");\n      const typingText = this.typingIndicator.querySelector(\"p\");\n      if (typingText) {\n        typingText.textContent = this.defaultTypingText;\n      }\n    }\n  }\n\n  addMessage(sender, content) {\n    console.log(`Adding message from ${sender}: ${content}`);\n    if (this.messageContainer) {\n      const messageWrapper = document.createElement(\"div\");\n      messageWrapper.classList.add(\n        \"message-wrapper\",\n        `message-wrapper--${sender}`\n      );\n\n      if (sender === \"assistant\") {\n        const iconSvg = document.createElement(\"svg\");\n        iconSvg.classList.add(\"message-icon\");\n        iconSvg.innerHTML = `\n        <svg class=\"message-icon\" width=\"30\" height=\"20\" viewBox=\"0 0 30 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M20.8566 0.0949741C20.5706 0.0327174 20.1796 -0.00878708 19.9985 0.00158904C19.8173 0.0119652 19.4741 0.0534703 19.2357 0.105351C18.9973 0.157232 18.5492 0.333624 18.2345 0.499642C17.8817 0.676036 15.6315 2.51261 12.4183 5.23115C10.1121 7.17766 8.14608 8.8729 7.4516 9.50931C7.26478 9.68051 7.23297 9.89295 7.36802 10.1074C7.56866 10.4259 7.91296 10.9361 8.2993 11.488C9.04301 12.5394 9.45301 13.0409 9.52929 12.9925C9.59603 12.951 11.9702 10.9588 14.802 8.57226C17.6338 6.18575 20.0461 4.18316 20.1606 4.13128C20.2845 4.0794 20.561 4.0379 20.7803 4.0379C21.0091 4.0379 21.3047 4.12091 21.4478 4.22467C21.5908 4.31805 22.7826 5.9056 24.0889 7.75255C26.0721 10.523 26.4821 11.1559 26.4821 11.4361C26.4916 11.6125 26.4154 11.8719 26.32 11.986C26.2247 12.1105 25.2044 13.0029 24.0507 13.9782C22.897 14.9432 21.8387 15.794 21.6861 15.8563C21.5145 15.9289 21.3429 15.9393 21.1617 15.8667C21.0091 15.8148 20.6754 15.4516 20.3512 14.9847C20.2856 14.8902 20.2209 14.7993 20.1594 14.715C19.8981 14.3568 19.5448 14.3315 19.2009 14.6114C19.0718 14.7164 18.9276 14.8362 18.778 14.964C18.2822 15.379 17.7959 15.7837 17.6815 15.8874C17.5638 15.9806 17.5395 16.1501 17.626 16.2729C18.6307 17.6989 19.1539 18.3732 19.4264 18.6994C19.722 19.0418 20.1606 19.4153 20.4275 19.5606C20.685 19.6955 21.1617 19.8615 21.4764 19.9134C21.8673 19.986 22.2296 19.9756 22.6205 19.903C22.9352 19.8407 23.4024 19.6747 23.6693 19.5294C23.9268 19.3842 25.2617 18.3154 26.6251 17.1637C28.4653 15.5969 29.1804 14.9224 29.3997 14.5489C29.5714 14.2791 29.7811 13.7707 29.867 13.4283C29.9814 12.9925 30.0195 12.5878 29.9909 12.0794C29.9623 11.6125 29.8669 11.1455 29.7144 10.7824C29.5714 10.44 28.2174 8.44775 26.3295 5.81222C24.6038 3.3842 23.021 1.2571 22.8112 1.07033C22.6015 0.883558 22.1915 0.61378 21.9054 0.468515C21.6194 0.323249 21.1426 0.157231 20.8566 0.0949741Z\" fill=\"white\"/>\n            <path d=\"M9.51022 0.47889C9.00487 0.219487 8.74743 0.146855 8.12767 0.126103C7.67 0.105351 7.21234 0.157231 6.9835 0.229863C6.77374 0.312872 6.44955 0.458139 6.26839 0.5619C6.08723 0.665661 4.81911 1.6929 3.45563 2.84465C2.09216 3.99639 0.890782 5.07551 0.776364 5.24153C0.661947 5.40755 0.490321 5.72921 0.385438 5.95748C0.271021 6.18576 0.137534 6.65268 0.0707907 6.99509C-0.0150223 7.44127 -0.0245558 7.79405 0.0517223 8.24023C0.0993962 8.58264 0.223347 9.07032 0.32823 9.32972C0.433112 9.58912 1.8824 11.7059 3.54145 14.0509C5.21003 16.3959 6.7642 18.5126 7.0121 18.7616C7.26001 19.0106 7.75582 19.3738 8.12767 19.5709C8.65209 19.8407 8.9572 19.9341 9.55789 19.986C10.006 20.0171 10.54 19.9964 10.8451 19.9237C11.1311 19.8615 11.5983 19.6747 11.8653 19.5191C12.1418 19.3634 14.7257 17.2571 17.6052 14.8291C20.4943 12.401 22.8494 10.357 22.8494 10.2947C22.8589 10.2221 22.3536 9.45423 21.7338 8.60339C21.4117 8.14881 21.1108 7.73759 20.8915 7.45214C20.6737 7.16862 20.3983 7.15354 20.1216 7.38003C19.3039 8.04956 17.3858 9.65415 15.1834 11.5087C11.5411 14.58 9.79626 15.9912 9.57696 16.0327C9.41487 16.0638 9.11929 16.0431 8.93813 15.9808C8.75697 15.9186 8.53767 15.8044 8.45185 15.7318C8.36604 15.6592 7.27908 14.1857 6.03956 12.4426C4.7905 10.6994 3.70354 9.14295 3.62726 8.96655C3.50331 8.71753 3.49377 8.59301 3.57959 8.34399C3.65587 8.11571 4.3233 7.49315 5.98235 6.09237C7.79396 4.54633 8.3279 4.14166 8.55674 4.14166C8.70929 4.14166 8.91906 4.18316 9.00487 4.23504C9.10022 4.28692 9.41487 4.66047 9.70091 5.06514C9.98695 5.48018 10.2825 5.79146 10.3397 5.78109C10.4065 5.76033 10.9118 5.37642 11.4553 4.91987C11.7575 4.67041 12.0283 4.42714 12.2134 4.24762C12.3954 4.0712 12.4181 3.84719 12.2814 3.63385C12.1117 3.3692 11.8416 2.97785 11.5411 2.56449C11.0358 1.85891 10.5114 1.18447 10.3683 1.04958C10.2349 0.914687 9.85347 0.66566 9.51022 0.47889Z\" fill=\"white\"/>\n          </svg>\n        `;\n        messageWrapper.appendChild(iconSvg);\n      }\n\n      const messageDiv = document.createElement(\"div\");\n      messageDiv.classList.add(\"message\", `message--${sender}`);\n      messageDiv.innerHTML = `<div class=\"message__content\">${this.markdownToHtml(\n        content\n      )}</div>`;\n\n      messageWrapper.appendChild(messageDiv);\n      this.messageContainer.appendChild(messageWrapper);\n      this.scrollToBottom();\n    }\n  }\n\n  markdownToHtml(markdown) {\n    // Escape HTML to prevent XSS\n    const escapeHtml = (str) =>\n      str\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n\n    let html = escapeHtml(markdown);\n\n    // Headers\n    html = html.replace(/^###### (.*)$/gm, '<h6 class=\"h6\">$1</h6>');\n    html = html.replace(/^##### (.*)$/gm, '<h6 class=\"h6\">$1</h6>');\n    html = html.replace(/^#### (.*)$/gm, '<h6 class=\"h6\">$1</h6>');\n    html = html.replace(/^### (.*)$/gm, '<h6 class=\"h6\">$1</h6>');\n    html = html.replace(/^## (.*)$/gm, '<h6 class=\"h5\">$1</h6>');\n    html = html.replace(/^# (.*)$/gm, '<h6 class=\"h4\">$1</h6>');\n\n    // Bold and Italic\n    html = html.replace(/\\*\\*\\*(.*?)\\*\\*\\*/g, \"<strong><em>$1</em></strong>\"); // Bold Italic\n    html = html.replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\"); // Bold\n    html = html.replace(/\\*(.*?)\\*/g, \"<em>$1</em>\"); // Italic\n\n    // Inline Code\n    html = html.replace(/`([^`]+)`/g, \"<code>$1</code>\");\n\n    // Images\n    html = html.replace(\n      /!\\[(.*?)\\]\\((.*?)\\)/g,\n      '<img src=\"$2\" alt=\"$1\" class=\"markdown-image\">'\n    );\n\n    // Links\n    html = html.replace(\n      /\\[(.*?)\\]\\((.*?)\\)/g,\n      '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n    );\n\n    // Lists\n    let inList = false;\n    html = html\n      .split(\"\\n\")\n      .map((line) => {\n        if (line.match(/^\\s*[-*+]\\s/)) {\n          if (!inList) {\n            inList = true;\n            return \"<ul>\\n<li>\" + line.replace(/^\\s*[-*+]\\s/, \"\") + \"</li>\";\n          }\n          return \"<li>\" + line.replace(/^\\s*[-*+]\\s/, \"\") + \"</li>\";\n        } else if (line.match(/^\\s*\\d+\\.\\s/)) {\n          if (!inList) {\n            inList = true;\n            return \"<ol>\\n<li>\" + line.replace(/^\\s*\\d+\\.\\s/, \"\") + \"</li>\";\n          }\n          return \"<li>\" + line.replace(/^\\s*\\d+\\.\\s/, \"\") + \"</li>\";\n        } else if (inList && line.trim() === \"\") {\n          inList = false;\n          return \"</ul>\\n\";\n        } else {\n          return line;\n        }\n      })\n      .join(\"\\n\");\n\n    if (inList) {\n      html += \"\\n</ul>\";\n    }\n\n    // Horizontal Rule\n    html = html.replace(/^---$/gm, \"<hr>\");\n\n    // Blockquotes\n    html = html.replace(/^>\\s(.*)$/gm, \"<blockquote>$1</blockquote>\");\n\n    // Remove excessive asterisks (more than 3)\n    html = html.replace(/\\*{4,}/g, \"\");\n\n    // Split content into paragraphs\n    const paragraphs = html.split(/\\n{2,}/);\n\n    // Wrap each paragraph with <p> tags, handling special cases\n    html = paragraphs\n      .map((para) => {\n        // Don't wrap headers, lists, blockquotes, horizontal rules, or images in <p> tags\n        if (\n          para.startsWith(\"<h\") ||\n          para.startsWith(\"<ul\") ||\n          para.startsWith(\"<ol\") ||\n          para.startsWith(\"<blockquote\") ||\n          para.startsWith(\"<hr\") ||\n          para.startsWith(\"<img\")\n        ) {\n          return para;\n        }\n        return `<p>${para}</p>`;\n      })\n      .join(\"\\n\");\n\n    return html;\n  }\n\n  addButtons(buttons) {\n    console.log(\"Adding buttons:\", buttons);\n    const buttonContainer = document.createElement(\"div\");\n    buttonContainer.classList.add(\"button-container\");\n\n    buttons.forEach((button) => {\n      const buttonElement = document.createElement(\"button\");\n      buttonElement.classList.add(\"button\");\n      buttonElement.textContent = button.name;\n      buttonElement.dataset.buttonData = JSON.stringify(button);\n      buttonContainer.appendChild(buttonElement);\n    });\n\n    if (this.messageContainer) {\n      this.messageContainer.appendChild(buttonContainer);\n      this.scrollToBottom();\n    } else {\n      console.error(\"Message container not found when adding buttons\");\n    }\n  }\n\n  removeButtons() {\n    const buttonContainers =\n      this.messageContainer.querySelectorAll(\".button-container\");\n    buttonContainers.forEach((container) => container.remove());\n  }\n\n  async handleButtonClick(button) {\n    console.log(\"Button clicked:\", button);\n    this.removeButtons();\n    this.addMessage(\"user\", button.name);\n\n    this.showTypingIndicator();\n    try {\n      const response = await this.gadgetInteract({\n        userID: this.userID,\n        action: button.request,\n      });\n      this.hideTypingIndicator();\n      return response; // Return the response instead of handling it here\n    } catch (error) {\n      console.error(\"Error handling button click:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n}\n\nconsole.log(\"ChatbotCore module loaded\");\n","//chatbot-api.js\n\nexport class ApiClient {\n  constructor(config) {\n    this.apiEndpoint = config.apiEndpoint; // Gadget endpoint that proxies Voiceflow streaming\n    this.userID = this.generateUserID(config.userIDPrefix || \"chatbot\");\n    this.completionEvents = config.completionEvents || false;\n  }\n\n  generateUserID(prefix) {\n    const storedID = localStorage.getItem(`${prefix}_userID`);\n    if (storedID) return storedID;\n\n    const newID = `${prefix}_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n    localStorage.setItem(`${prefix}_userID`, newID);\n    return newID;\n  }\n\n  async streamInteract(action, extraConfig = {}) {\n    const url = this.apiEndpoint;\n\n    // If action is already in the correct format (has an action property), use it directly\n    const payload = action.action\n      ? action\n      : {\n          userID: this.userID,\n          action: action,\n          config: {\n            ...extraConfig,\n          },\n        };\n\n    console.log(\n      \"Sending streaming interact request to gadget endpoint:\",\n      payload\n    );\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"text/event-stream\",\n        \"Cache-Control\": \"no-cache\",\n        Connection: \"keep-alive\",\n      },\n      credentials: \"include\",\n      cache: \"no-store\",\n      body: JSON.stringify(payload),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Stream request failed:\", response.status, errorText);\n      throw new Error(\n        `HTTP error! status: ${response.status}, details: ${errorText}`\n      );\n    }\n\n    if (!response.body) {\n      throw new Error(\"Response has no body\");\n    }\n\n    return response;\n  }\n\n  async launch(startBlock, productDetails) {\n    const action = {\n      type: \"launch\",\n      payload: {\n        startBlock: startBlock,\n        powerStationDetails: productDetails,\n      },\n    };\n    return this.streamInteract(action);\n  }\n\n  async sendUserMessage(message) {\n    const action = {\n      type: \"text\",\n      payload: message,\n    };\n    return this.streamInteract(action);\n  }\n\n  async sendEvent(eventName, data = {}) {\n    const action = {\n      type: \"event\",\n      payload: {\n        event: {\n          name: eventName,\n          ...data,\n        },\n      },\n    };\n    return this.streamInteract(action);\n  }\n}\n","// chatbot-ui.js\n\nexport class UIManager {\n  constructor(rootElement) {\n    this.messageContainer = null;\n    this.typingIndicator = null;\n    this.drawerBody = null;\n    this.onButtonClick = null; // Callback for button clicks\n    this.rootElement = rootElement; // Store reference to the root web component\n  }\n\n  setDOMElements(messageContainer, typingIndicator, drawerBody) {\n    console.log(\"Setting DOM elements in UIManager\");\n    this.messageContainer = messageContainer;\n    this.typingIndicator = typingIndicator;\n    this.drawerBody = drawerBody;\n  }\n\n  setButtonClickHandler(callback) {\n    this.onButtonClick = callback;\n  }\n\n  addMessage(role, message) {\n    console.log(\"[UI] Adding message:\", { role, message });\n\n    if (!this.messageContainer || !this.rootElement) {\n      console.error(\"[UI] Message container or root element not available\");\n      return null;\n    }\n\n    // Hide typing indicator when adding a message\n    this.hideTypingIndicator();\n\n    try {\n      const doc = this.rootElement.ownerDocument;\n      const messageWrapper = doc.createElement(\"div\");\n      messageWrapper.classList.add(\n        \"message-wrapper\",\n        `message-wrapper--${role}`\n      );\n\n      const messageDiv = doc.createElement(\"div\");\n      messageDiv.classList.add(\"message\", `message--${role}`);\n\n      const contentDiv = doc.createElement(\"div\");\n      contentDiv.classList.add(\"message__content\");\n\n      console.log(\"[UI] Processing message format:\", typeof message, message);\n\n      if (typeof message === \"string\") {\n        console.log(\"[UI] Adding string message\");\n        contentDiv.innerHTML = this.formatMessage(message);\n      } else if (message.slate) {\n        console.log(\"[UI] Adding slate message:\", message.slate);\n        const text = message.slate.content\n          .map((block) => block.children.map((child) => child.text).join(\"\"))\n          .join(\"\\n\");\n        console.log(\"[UI] Extracted slate text:\", text);\n        contentDiv.innerHTML = this.formatMessage(text);\n      } else if (message instanceof Element) {\n        console.log(\"[UI] Adding Element message\");\n        contentDiv.appendChild(message);\n      } else if (message.message) {\n        console.log(\"[UI] Adding message object:\", message.message);\n        contentDiv.innerHTML = this.formatMessage(message.message);\n      } else {\n        console.error(\"[UI] Unsupported message format:\", message);\n        return null;\n      }\n\n      messageDiv.appendChild(contentDiv);\n      messageWrapper.appendChild(messageDiv);\n      this.messageContainer.appendChild(messageWrapper);\n\n      console.log(\"[UI] Message added successfully\");\n      this.scrollToBottom();\n      return messageWrapper;\n    } catch (error) {\n      console.error(\"[UI] Error adding message:\", error);\n      console.error(\"[UI] Message that caused error:\", message);\n      return null;\n    }\n  }\n\n  formatMessage(message) {\n    // Replace newlines with <br>\n    message = message.replace(/\\n/g, \"<br>\");\n\n    // Create links\n    message = message.replace(\n      /(https?:\\/\\/[^\\s]+)/g,\n      '<a href=\"$1\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n    );\n\n    // Split content into paragraphs\n    const paragraphs = message.split(/\\n{2,}/);\n    message = paragraphs\n      .map((para) => {\n        if (\n          para.startsWith(\"<h\") ||\n          para.startsWith(\"<ul\") ||\n          para.startsWith(\"<ol\") ||\n          para.startsWith(\"<blockquote\") ||\n          para.startsWith(\"<hr\") ||\n          para.startsWith(\"<img\")\n        ) {\n          return para;\n        }\n        return `<p>${para}</p>`;\n      })\n      .join(\"\\n\");\n\n    return message;\n  }\n\n  addCarousel(carouselData) {\n    if (!this.messageContainer || !this.rootElement) {\n      console.error(\"[UI] Message container not available for carousel\");\n      return;\n    }\n\n    const doc = this.rootElement.ownerDocument;\n    const carouselContainer = doc.createElement(\"div\");\n    carouselContainer.classList.add(\"carousel-container\");\n\n    const carouselElement = doc.createElement(\"div\");\n    carouselElement.classList.add(\"carousel\");\n    carouselElement.innerHTML = `\n      <div class=\"carousel__container\"></div>\n      <button class=\"carousel__button carousel__button--left\" aria-label=\"Previous slide\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M15 18L9 12L15 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </button>\n      <button class=\"carousel__button carousel__button--right\" aria-label=\"Next slide\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M9 18L15 12L9 6\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </button>\n    `;\n\n    const carousel = new Carousel(carouselElement);\n\n    carouselData.cards.forEach((card, index) => {\n      // Create DOM element for the item\n      const itemElement = doc.createElement(\"div\");\n      itemElement.classList.add(\"carousel__item-wrapper\");\n      itemElement.innerHTML = `\n        <div class=\"carousel__item-content\">\n          <img src=\"${card.imageUrl}\" alt=\"${card.title}\" class=\"carousel__item-image\">\n          <h6 class=\"carousel__item-title\">${card.title}</h6>\n          <p class=\"carousel__item-description\">${card.description.text}</p>\n          <button class=\"button carousel__item-button\" data-button-index=\"${index}\">${card.buttons[0].name}</button>\n        </div>\n      `;\n\n      carousel.addItem(itemElement);\n    });\n\n    carouselContainer.appendChild(carouselElement);\n    this.messageContainer.appendChild(carouselContainer);\n\n    const buttons = carouselElement.querySelectorAll(\".carousel__item-button\");\n    buttons.forEach((button, index) => {\n      button.addEventListener(\"click\", () => {\n        if (this.onButtonClick) {\n          const cardIndex = parseInt(\n            button.getAttribute(\"data-button-index\"),\n            10\n          );\n          const card = carouselData.cards[cardIndex];\n          // Remove the carousel container when a button is clicked\n          carouselContainer.remove();\n          this.onButtonClick(card.buttons[0]);\n        }\n      });\n    });\n\n    this.scrollToBottom();\n  }\n\n  addButtons(buttons) {\n    if (!this.messageContainer || !buttons?.length) return;\n\n    const doc = this.rootElement.ownerDocument;\n    const buttonsWrapper = doc.createElement(\"div\");\n    buttonsWrapper.classList.add(\"buttons-wrapper\");\n\n    buttons.forEach((button) => {\n      const buttonElement = doc.createElement(\"button\");\n      buttonElement.classList.add(\"chat-button\");\n      buttonElement.textContent = button.name;\n      buttonElement.addEventListener(\"click\", () => {\n        if (this.onButtonClick) {\n          this.onButtonClick(button);\n        }\n      });\n      buttonsWrapper.appendChild(buttonElement);\n    });\n\n    this.addMessage(\"assistant\", buttonsWrapper);\n  }\n\n  showTypingIndicator(customText = null) {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n      if (customText) {\n        const textElement = this.typingIndicator.querySelector(\"p\");\n        if (textElement) {\n          textElement.textContent = customText;\n        }\n      }\n      this.scrollToBottom();\n    }\n  }\n\n  hideTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n    }\n  }\n\n  scrollToBottom() {\n    if (this.drawerBody) {\n      setTimeout(() => {\n        this.drawerBody.scrollTop = this.drawerBody.scrollHeight;\n      }, 100);\n    }\n  }\n\n  addVisualImage(payload) {\n    if (!this.messageContainer) return;\n\n    const doc = this.rootElement.ownerDocument;\n    const imageWrapper = doc.createElement(\"div\");\n    imageWrapper.classList.add(\"image-wrapper\");\n\n    const img = doc.createElement(\"img\");\n    img.src = payload.image;\n    img.alt = payload.alt || \"Visual content\";\n    img.classList.add(\"chat-image\");\n\n    if (payload.dimensions) {\n      img.width = payload.dimensions.width;\n      img.height = payload.dimensions.height;\n    }\n\n    imageWrapper.appendChild(img);\n    this.addMessage(\"assistant\", imageWrapper);\n  }\n}\n\nclass Carousel {\n  constructor(element) {\n    this.element = element;\n    this.container = element.querySelector(\".carousel__container\");\n    this.leftButton = element.querySelector(\".carousel__button--left\");\n    this.rightButton = element.querySelector(\".carousel__button--right\");\n    this.items = [];\n    this.currentIndex = 0;\n\n    this.mediaQuery = window.matchMedia(\"(min-width: 1000px)\");\n    this.isDesktop = this.mediaQuery.matches;\n\n    this.setupEventListeners();\n    this.updateVisibility();\n  }\n\n  setupEventListeners() {\n    this.leftButton.addEventListener(\"click\", () => this.move(\"left\"));\n    this.rightButton.addEventListener(\"click\", () => this.move(\"right\"));\n    this.mediaQuery.addEventListener(\"change\", (e) =>\n      this.handleMediaQueryChange(e)\n    );\n  }\n\n  handleMediaQueryChange(e) {\n    this.isDesktop = e.matches;\n    this.updateVisibility();\n    this.updatePosition();\n  }\n\n  addItem(element) {\n    if (!(element instanceof Element)) {\n      console.error(\"[Carousel] Content must be a DOM element\");\n      return null;\n    }\n\n    this.items.push(element);\n    this.container.appendChild(element);\n    this.updateVisibility();\n    return element;\n  }\n\n  move(direction) {\n    const increment = direction === \"left\" ? -1 : 1;\n    const itemsPerPage = this.isDesktop ? 2 : 1;\n    const maxIndex = Math.max(0, this.items.length - itemsPerPage);\n\n    this.currentIndex = Math.max(\n      0,\n      Math.min(this.currentIndex + increment, maxIndex)\n    );\n    this.updatePosition();\n    this.updateVisibility();\n  }\n\n  updatePosition() {\n    const itemWidth = this.items[0]?.offsetWidth || 0;\n    const translateX = -this.currentIndex * itemWidth;\n    this.container.style.transform = `translateX(${translateX}px)`;\n  }\n\n  updateVisibility() {\n    const itemsPerPage = this.isDesktop ? 2 : 1;\n\n    // Update navigation buttons visibility\n    this.leftButton.style.display = this.currentIndex > 0 ? \"flex\" : \"none\";\n    this.rightButton.style.display =\n      this.currentIndex < this.items.length - itemsPerPage ? \"flex\" : \"none\";\n\n    // Update items visibility and animation\n    this.items.forEach((item, index) => {\n      const isVisible =\n        index >= this.currentIndex && index < this.currentIndex + itemsPerPage;\n\n      item.style.opacity = isVisible ? \"1\" : \"0\";\n      item.style.pointerEvents = isVisible ? \"auto\" : \"none\";\n    });\n  }\n}\n","// chatbot-stream.js\n\nexport class StreamHandler {\n  constructor() {\n    this.currentReader = null;\n    this.abortController = null;\n  }\n\n  async handleStream(response, traceHandler) {\n    if (!response.body) {\n      throw new Error(\"No response body available for streaming\");\n    }\n\n    console.log(\"[Stream] Starting new stream processing\");\n    this.closeCurrentStream();\n\n    this.abortController = new AbortController();\n    const signal = this.abortController.signal;\n\n    try {\n      this.currentReader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = \"\";\n\n      while (!signal.aborted) {\n        const { done, value } = await this.currentReader.read();\n\n        if (done) {\n          console.log(\"[Stream] Stream complete\");\n          break;\n        }\n\n        const chunk = decoder.decode(value, { stream: true });\n        console.log(\"[Stream] Received chunk:\", chunk);\n        buffer += chunk;\n\n        try {\n          // Try to parse the entire buffer as a JSON array\n          const events = JSON.parse(buffer);\n          console.log(\"[Stream] Successfully parsed events:\", events);\n\n          // If it's an array, process each event\n          if (Array.isArray(events)) {\n            for (const event of events) {\n              await traceHandler.handleTrace(event);\n            }\n            buffer = \"\"; // Clear buffer after successful processing\n          } else {\n            // If it's a single event, process it\n            await traceHandler.handleTrace(events);\n            buffer = \"\";\n          }\n        } catch (e) {\n          // If we can't parse it yet, it might be incomplete\n          console.log(\"[Stream] Incomplete JSON, continuing to buffer\");\n\n          // Try to find complete JSON objects in the buffer\n          if (buffer.includes(\"][\")) {\n            const parts = buffer.split(\"][\");\n            for (const part of parts) {\n              try {\n                const cleanPart = part\n                  .replace(/^\\[?/, \"[\")\n                  .replace(/\\]?$/, \"]\");\n                const events = JSON.parse(cleanPart);\n                console.log(\"[Stream] Parsed partial buffer:\", events);\n                if (Array.isArray(events)) {\n                  for (const event of events) {\n                    await traceHandler.handleTrace(event);\n                  }\n                }\n              } catch (partError) {\n                console.log(\"[Stream] Could not parse part, skipping\");\n              }\n            }\n            buffer = parts[parts.length - 1];\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"[Stream] Fatal stream processing error:\", error);\n      throw error;\n    } finally {\n      this.closeCurrentStream();\n    }\n  }\n\n  closeCurrentStream() {\n    if (this.abortController) {\n      this.abortController.abort();\n      this.abortController = null;\n    }\n\n    if (this.currentReader) {\n      try {\n        this.currentReader.cancel();\n      } catch (e) {\n        console.error(\"Error cancelling stream reader:\", e);\n      }\n      this.currentReader = null;\n    }\n  }\n}\n","export class TraceHandler {\n  constructor(ui, history, onSpecialTrace) {\n    this.ui = ui;\n    this.history = history;\n    this.onSpecialTrace = onSpecialTrace || (async () => {});\n    this.completionBuffer = \"\";\n    this.lastMessageContainer = null;\n    this.pendingMessages = [];\n    this.processingTrace = false;\n  }\n\n  async handleTrace(event) {\n    if (this.processingTrace) {\n      console.log(\"Already processing a trace, queueing:\", event);\n      this.pendingMessages.push(event);\n      return;\n    }\n\n    this.processingTrace = true;\n    try {\n      console.log(\n        \"[Trace] Handling trace event:\",\n        event.type,\n        JSON.stringify(event, null, 2)\n      );\n\n      if (!event.type) {\n        console.error(\"[Trace] Received event with no type:\", event);\n        return;\n      }\n\n      if (!this.ui) {\n        console.error(\"[Trace] UI manager not available\");\n        return;\n      }\n\n      const knownTypes = [\n        \"text\",\n        \"choice\",\n        \"carousel\",\n        \"visual\",\n        \"waiting_text\",\n        \"RedirectToProduct\",\n        \"completion\",\n        \"end\",\n      ];\n\n      if (!knownTypes.includes(event.type)) {\n        console.warn(\"[Trace] Ignoring unknown trace type:\", event.type);\n        return;\n      }\n\n      switch (event.type) {\n        case \"text\":\n          if (!event.payload) {\n            console.error(\"[Trace] Invalid text payload:\", event.payload);\n            return;\n          }\n          console.log(\n            \"[Trace] Processing text event:\",\n            JSON.stringify(event, null, 2)\n          );\n\n          this.ui.hideTypingIndicator();\n\n          try {\n            if (typeof event.payload === \"string\") {\n              console.log(\"[Trace] Processing string payload:\", event.payload);\n              this.lastMessageContainer = this.ui.addMessage(\n                \"assistant\",\n                event.payload\n              );\n            } else if (event.payload.slate) {\n              console.log(\n                \"[Trace] Processing slate payload:\",\n                event.payload.slate\n              );\n              const text = event.payload.slate.content\n                .map((block) => {\n                  console.log(\"[Trace] Processing slate block:\", block);\n                  return block.children\n                    .map((child) => {\n                      console.log(\"[Trace] Processing slate child:\", child);\n                      return child.text;\n                    })\n                    .join(\"\");\n                })\n                .join(\"\\n\");\n\n              console.log(\"[Trace] Extracted text from slate:\", text);\n              this.lastMessageContainer = this.ui.addMessage(\"assistant\", text);\n\n              if (this.history) {\n                this.history.updateHistory({\n                  type: \"assistant\",\n                  message: text,\n                });\n              }\n            } else if (event.payload.message) {\n              console.log(\n                \"[Trace] Processing message payload:\",\n                event.payload.message\n              );\n              this.lastMessageContainer = this.ui.addMessage(\n                \"assistant\",\n                event.payload.message\n              );\n\n              if (this.history) {\n                this.history.updateHistory({\n                  type: \"assistant\",\n                  message: event.payload.message,\n                });\n              }\n            } else {\n              console.error(\n                \"[Trace] Unsupported text payload format:\",\n                event.payload\n              );\n            }\n          } catch (error) {\n            console.error(\"[Trace] Error processing text event:\", error);\n            console.error(\"[Trace] Event that caused error:\", event);\n          }\n          break;\n\n        case \"waiting_text\":\n          console.log(\"[Trace] Showing typing indicator:\", event.payload);\n          this.ui.showTypingIndicator(event.payload);\n          break;\n\n        case \"choice\":\n          if (!Array.isArray(event.payload?.buttons)) {\n            console.error(\"[Trace] Invalid choice payload:\", event.payload);\n            return;\n          }\n          // Hide typing indicator before adding buttons\n          this.ui.hideTypingIndicator();\n\n          console.log(\"[Trace] Adding choice buttons:\", event.payload.buttons);\n          this.ui.addButtons(event.payload.buttons);\n          if (this.history) {\n            this.history.updateHistory({\n              type: \"choice\",\n              buttons: event.payload.buttons,\n            });\n          }\n          break;\n\n        case \"carousel\":\n          // Hide typing indicator before adding carousel\n          this.ui.hideTypingIndicator();\n\n          console.log(\"[Trace] Adding carousel:\", event.payload);\n          this.ui.addCarousel(event.payload);\n          if (this.history) {\n            this.history.updateHistory({\n              type: \"carousel\",\n              cards: event.payload.cards,\n            });\n          }\n          break;\n\n        case \"visual\":\n          if (event.payload?.visualType === \"image\") {\n            // Hide typing indicator before adding image\n            this.ui.hideTypingIndicator();\n\n            console.log(\"[Trace] Adding visual image:\", event.payload);\n            this.ui.addVisualImage(event.payload);\n            if (this.history) {\n              this.history.updateHistory({\n                type: \"visual\",\n                data: event.payload,\n              });\n            }\n          }\n          break;\n\n        case \"RedirectToProduct\":\n          const productHandle = event.payload?.body?.productHandle;\n          if (productHandle) {\n            console.log(\"[Trace] Redirecting to product:\", productHandle);\n            await this.onSpecialTrace({\n              type: \"RedirectToProduct\",\n              productHandle,\n            });\n          }\n          break;\n\n        case \"completion\":\n          if (!event.payload?.state) {\n            console.error(\"[Trace] Invalid completion payload:\", event.payload);\n            return;\n          }\n\n          if (event.payload.state === \"start\") {\n            this.completionBuffer = \"\";\n            this.ui.showTypingIndicator();\n          } else if (event.payload.state === \"content\") {\n            this.completionBuffer += event.payload.content || \"\";\n            // Update the message in real-time as we receive content\n            if (this.lastMessageContainer) {\n              this.ui.updateMessage(\n                this.lastMessageContainer,\n                this.completionBuffer\n              );\n            } else {\n              this.lastMessageContainer = this.ui.addMessage(\n                \"assistant\",\n                this.completionBuffer\n              );\n            }\n          } else if (event.payload.state === \"end\") {\n            this.ui.hideTypingIndicator();\n            if (this.history) {\n              this.history.updateHistory({\n                type: \"assistant\",\n                message: this.completionBuffer,\n              });\n            }\n          }\n          break;\n\n        case \"end\":\n          console.log(\"[Trace] Stream ended\");\n          this.ui.hideTypingIndicator();\n          break;\n      }\n    } catch (error) {\n      console.error(\"[Trace] Error handling trace:\", error);\n      console.error(\"[Trace] Event that caused error:\", event);\n      this.ui.hideTypingIndicator();\n    } finally {\n      this.processingTrace = false;\n      // Process any pending messages\n      if (this.pendingMessages.length > 0) {\n        const nextEvent = this.pendingMessages.shift();\n        await this.handleTrace(nextEvent);\n      }\n    }\n  }\n\n  restoreHistory() {\n    const history = this.history.getHistory();\n    if (history.length === 0) return;\n\n    // Restore all messages first\n    history.forEach((entry) => {\n      if (entry.type === \"assistant\" || entry.type === \"user\") {\n        this.ui.addMessage(entry.type, entry.message);\n      }\n    });\n\n    // Get the last entry\n    const lastEntry = history[history.length - 1];\n\n    // If the last entry was a choice or carousel from assistant, show it\n    if (lastEntry.type === \"choice\") {\n      this.ui.addButtons(lastEntry.buttons);\n    } else if (lastEntry.type === \"carousel\") {\n      this.ui.addCarousel(lastEntry);\n    }\n\n    this.ui.scrollToBottom();\n  }\n}\n","export class HistoryHandler {\n  constructor() {\n    this.conversationHistory = [];\n    this.hasLaunched = localStorage.getItem(\"chatHasLaunched\") === \"true\";\n  }\n\n  updateHistory(entry) {\n    console.log(\"Updating conversation history with:\", entry);\n    this.conversationHistory.push(entry);\n    this.saveToStorage();\n  }\n\n  saveToStorage() {\n    try {\n      localStorage.setItem(\n        \"chatHistory\",\n        JSON.stringify(this.conversationHistory)\n      );\n      localStorage.setItem(\"chatHasLaunched\", \"true\");\n    } catch (error) {\n      console.error(\"Error saving conversation to storage:\", error);\n    }\n  }\n\n  loadFromStorage() {\n    try {\n      const savedHistory = localStorage.getItem(\"chatHistory\");\n      if (savedHistory) {\n        this.conversationHistory = JSON.parse(savedHistory);\n      }\n    } catch (error) {\n      console.error(\"Error loading conversation from storage:\", error);\n      this.conversationHistory = [];\n    }\n  }\n\n  clearHistory() {\n    this.conversationHistory = [];\n    localStorage.removeItem(\"chatHistory\");\n    localStorage.removeItem(\"chatHasLaunched\");\n  }\n\n  getHistory() {\n    return this.conversationHistory;\n  }\n\n  hasHistory() {\n    return this.hasLaunched;\n  }\n}\n","//chatbot-base.js\n\nconsole.log(\"WOLLLOPPPP\");\n\nimport { ApiClient } from \"./chatbot-api.js\";\nimport { UIManager } from \"./chatbot-ui.js\";\nimport { StreamHandler } from \"./chatbot-stream.js\";\nimport { TraceHandler } from \"./chatbot-trace.js\";\nimport { HistoryHandler } from \"./chatbot-history.js\";\n\nexport class ChatbotBase {\n  constructor(config) {\n    console.log(\"ChatbotBase constructor called with config:\", config);\n\n    // Save the config with defaults\n    this.config = {\n      isSection: false, // Default to false for main chatbot\n      ...config,\n    };\n\n    this.storagePrefix = this.config.isSection ? \"section_\" : \"main_\";\n\n    // Create UI manager without element reference initially\n    this.ui = new UIManager(null);\n    this.history = new HistoryHandler(this.storagePrefix);\n\n    this.api = new ApiClient({\n      apiEndpoint: this.config.apiEndpoint,\n      userIDPrefix: this.config.userIDPrefix,\n      completionEvents: this.config.completionEvents || false,\n    });\n\n    this.stream = new StreamHandler();\n    this.traceHandler = new TraceHandler(\n      this.ui,\n      this.history,\n      this.handleSpecialTrace.bind(this)\n    );\n\n    // Set up button click handler\n    this.ui.setButtonClickHandler(this.handleButtonClick.bind(this));\n\n    // Bind methods\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n\n    if (this.history.hasHistory()) {\n      this.history.loadFromStorage();\n    }\n  }\n\n  set element(el) {\n    this._element = el;\n    // Update UI manager with element reference when it's available\n    this.ui.rootElement = el;\n  }\n\n  get element() {\n    return this._element;\n  }\n\n  setDOMElements(messageContainer, typingIndicator, drawerBody) {\n    console.log(\"Setting DOM elements in ChatbotBase\");\n    if (!this._element) {\n      console.error(\"Element reference not set in ChatbotBase\");\n      return;\n    }\n    // Create a new UIManager with the correct element reference\n    this.ui = new UIManager(this._element);\n    this.ui.setDOMElements(messageContainer, typingIndicator, drawerBody);\n    // Create a new TraceHandler with the new UIManager\n    this.traceHandler = new TraceHandler(\n      this.ui,\n      this.history,\n      this.handleSpecialTrace.bind(this)\n    );\n    // Re-attach the button click handler\n    this.ui.setButtonClickHandler(this.handleButtonClick.bind(this));\n  }\n\n  async initializeChatIfNeeded() {\n    if (this.isSectionChatbot()) {\n      // For section chatbots, do nothing - initialization handled by section component\n      return;\n    }\n\n    // Only main chatbot uses history\n    if (!this.history.hasHistory()) {\n      console.log(\"No chat history found, sending launch request...\");\n      await this.sendLaunch(\"\", \"{}\");\n      this.history.hasLaunched = true;\n      localStorage.setItem(`${this.storagePrefix}chatHasLaunched`, \"true\");\n    } else {\n      console.log(\"Chat history found, displaying saved conversation...\");\n      this.displaySavedConversation();\n    }\n  }\n\n  isSectionChatbot() {\n    // Logic to determine if this is the section chatbot\n    return (\n      this.config.isSection ||\n      this.element.classList.contains(\"section-chatbot\")\n    );\n  }\n\n  displaySavedConversation() {\n    const conversation = this.history.getHistory();\n    if (!conversation || conversation.length === 0) return;\n\n    this.ui.messageContainer.innerHTML = \"\";\n\n    // First pass: display all messages\n    for (let turn of conversation) {\n      if (turn.type === \"user\" || turn.type === \"assistant\") {\n        this.ui.addMessage(turn.type, turn.message);\n      }\n    }\n\n    // Second pass: only show buttons/carousel if they were the last interaction\n    const lastTurn = conversation[conversation.length - 1];\n    if (lastTurn) {\n      switch (lastTurn.type) {\n        case \"choice\":\n          this.ui.addButtons(lastTurn.buttons);\n          break;\n        case \"carousel\":\n          this.ui.addCarousel({ cards: lastTurn.cards }); // Wrap cards in proper structure\n          break;\n      }\n    }\n\n    this.ui.scrollToBottom();\n  }\n\n  async sendLaunch(startBlock = \"\", productDetails = \"{}\") {\n    console.log(\"Sending launch request with:\", { startBlock, productDetails });\n    try {\n      const response = await this.api.streamInteract({\n        type: \"launch\",\n        payload: {\n          startBlock,\n          powerStationDetails: productDetails,\n        },\n      });\n      await this.stream.handleStream(response, this.traceHandler);\n    } catch (error) {\n      console.error(\"Error in sendLaunch:\", error);\n      this.ui.addMessage(\n        \"assistant\",\n        \"I apologize, but I encountered an error. Please try again.\"\n      );\n    }\n  }\n\n  async sendMessage(message) {\n    try {\n      // Only update history for main chatbot\n      if (!this.isSectionChatbot()) {\n        this.history.updateHistory({\n          type: \"user\",\n          message: message,\n        });\n      }\n\n      this.ui.addMessage(\"user\", message);\n      const response = await this.api.sendUserMessage(message);\n      await this.stream.handleStream(response, this.traceHandler);\n    } catch (error) {\n      console.error(\"Error in sendMessage:\", error);\n      this.ui.addMessage(\n        \"assistant\",\n        \"I apologize, but I encountered an error processing your message. Please try again.\"\n      );\n    }\n  }\n\n  async handleButtonClick(buttonData) {\n    try {\n      // Only update history for main chatbot\n      if (!this.isSectionChatbot()) {\n        this.history.updateHistory({\n          type: \"user\",\n          message: buttonData.name,\n        });\n      }\n\n      this.ui.addMessage(\"user\", buttonData.name);\n      const response = await this.api.streamInteract(buttonData.request);\n      await this.stream.handleStream(response, this.traceHandler);\n    } catch (error) {\n      console.error(\"Error in handleButtonClick:\", error);\n      this.ui.addMessage(\n        \"assistant\",\n        \"I apologize, but I encountered an error processing your selection. Please try again.\"\n      );\n    }\n  }\n\n  async handleSpecialTrace(trace) {\n    if (trace.type === \"RedirectToProduct\") {\n      const productHandle = trace.productHandle;\n      if (productHandle) {\n        const baseUrl = \"https://www.sherpapower.co.uk/products/\";\n        const productUrl = `${baseUrl}${encodeURIComponent(productHandle)}`;\n        console.log(`Redirecting to product page: ${productUrl}`);\n        window.location.href = productUrl;\n      }\n    }\n  }\n\n  async jumpToMainMenu() {\n    console.log(\"MainChatbot jumpToMainMenu called\");\n    this.ui.showTypingIndicator(\"Returning to main menu...\");\n    try {\n      // Don't add this to chat history since it's a UI action\n      const response = await this.api.streamInteract({\n        action: {\n          type: \"event\",\n          payload: {\n            event: {\n              name: \"main_menu\",\n            },\n          },\n        },\n      });\n\n      console.log(\"Main menu response received:\", response);\n      await this.stream.handleStream(response, this.traceHandler);\n      console.log(\"Finished processing main menu stream\");\n    } catch (error) {\n      console.error(\"Error in jumpToMainMenu:\", error);\n      this.ui.addMessage(\n        \"assistant\",\n        \"Sorry, I couldn't navigate to the main menu. Please try again.\"\n      );\n    } finally {\n      this.ui.hideTypingIndicator();\n      this.ui.scrollToBottom();\n    }\n  }\n\n  updateHistory(item) {\n    // Only store history for main chatbot\n    if (!this.isSectionChatbot()) {\n      this.history.updateHistory(item);\n    }\n  }\n}\n","// chatbot-main.js\n\nimport { ChatbotBase } from \"./chatbot-base.js\";\n\n// Only define if not already defined\nif (!customElements.get(\"main-chatbot\")) {\n  class MainChatbotElement extends HTMLElement {\n    constructor() {\n      super();\n      console.log(\"MainChatbotElement constructor called\");\n\n      // Extract config from attributes\n      const apiEndpoint =\n        this.getAttribute(\"api-endpoint\") ||\n        \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\";\n      const config = {\n        apiEndpoint: apiEndpoint,\n        userIDPrefix: \"mainChatbot\",\n        isSection: false,\n      };\n\n      // Create chatbot base instance and store element reference\n      this.chatbotBase = new ChatbotBase(config);\n      this.chatbotBase.element = this;\n    }\n\n    connectedCallback() {\n      console.log(\"MainChatbotElement connected\");\n      this.initialize();\n    }\n\n    initialize() {\n      if (!this.initialized) {\n        console.log(\"Initializing MainChatbotElement\");\n        this.initializeElements();\n        this.setupEventListeners();\n        this.chatbotBase.initializeChatIfNeeded();\n        this.initialized = true;\n      }\n    }\n\n    initializeElements() {\n      console.log(\"Initializing elements for MainChatbot\");\n\n      // Find the drawer container\n      const drawer = this.closest(\".drawer.sherpa-guide\");\n      if (!drawer) {\n        console.error(\"Could not find drawer container\");\n        return;\n      }\n\n      // Find elements within the drawer context\n      this.backToStartButton = drawer.querySelector(\".back-to-start\");\n      console.log(\"Back to start button found:\", this.backToStartButton);\n\n      this.messageContainer = this.querySelector(\".message-container\");\n      this.typingIndicator = this.querySelector(\".chat-typing\");\n      this.drawerBody = drawer.querySelector(\".drawer-body\") || drawer;\n      this.chatInput = this.querySelector(\"#userInput\");\n      this.chatForm = this.querySelector(\"#chatForm\");\n      this.sendButton = this.querySelector(\"button[type='submit']\");\n\n      if (!this.chatForm || !this.chatInput || !this.sendButton) {\n        console.error(\"Required chat elements not found:\", {\n          form: this.chatForm,\n          input: this.chatInput,\n          button: this.sendButton,\n        });\n        return;\n      }\n\n      console.log(\"Chat elements found:\", {\n        form: this.chatForm,\n        input: this.chatInput,\n        button: this.sendButton,\n        backToStart: this.backToStartButton,\n      });\n\n      // Set DOM elements on the chatbotBase instance\n      this.chatbotBase.setDOMElements(\n        this.messageContainer,\n        this.typingIndicator,\n        this.drawerBody\n      );\n    }\n\n    setupEventListeners() {\n      if (this.eventListenersAttached) return;\n\n      if (this.chatInput && this.sendButton) {\n        const form = this.chatInput.closest(\"form\");\n        if (form) {\n          console.log(\"Form found:\", form);\n          form.addEventListener(\"submit\", async (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            await this.handleUserInput();\n          });\n        }\n\n        this.chatInput.addEventListener(\"keypress\", async (event) => {\n          if (event.key === \"Enter\" && !event.shiftKey) {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.handleUserInput();\n          }\n        });\n\n        this.sendButton.addEventListener(\"click\", async (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          await this.handleUserInput();\n        });\n      }\n\n      if (this.backToStartButton) {\n        console.log(\"Setting up back-to-start button click listener\");\n        this.backToStartButton.addEventListener(\"click\", () => {\n          console.log(\"Main menu button clicked!\");\n          this.jumpToMainMenu();\n        });\n      } else {\n        console.warn(\"Back to start button not found - will try again later\");\n        setTimeout(() => {\n          const button = this.querySelector(\".back-to-start\");\n          if (button) {\n            console.log(\"Found back-to-start button after delay\");\n            button.addEventListener(\"click\", () => {\n              console.log(\"Main menu button clicked!\");\n              this.jumpToMainMenu();\n            });\n          } else {\n            console.error(\"Back to start button still not found after delay\");\n          }\n        }, 1000);\n      }\n\n      if (this.messageContainer) {\n        this.messageContainer.addEventListener(\"click\", async (event) => {\n          const button = event.target.closest(\".chat-button\");\n          if (button) {\n            const buttonData = JSON.parse(button.dataset.buttonData);\n            await this.chatbotBase.handleButtonClick(buttonData);\n          }\n        });\n      }\n\n      this.eventListenersAttached = true;\n    }\n\n    async handleUserInput() {\n      const message = this.chatInput.value.trim();\n      if (!message) return;\n\n      try {\n        // Clear input and disable\n        this.chatInput.value = \"\";\n        this.chatInput.disabled = true;\n        this.sendButton.disabled = true;\n\n        // Show typing indicator before sending message\n        this.chatbotBase.ui.showTypingIndicator();\n\n        // Send the message\n        await this.chatbotBase.sendMessage(message);\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      } finally {\n        // Re-enable input\n        this.chatInput.disabled = false;\n        this.sendButton.disabled = false;\n        this.chatInput.focus();\n      }\n    }\n\n    async jumpToMainMenu() {\n      console.log(\"MainChatbotElement jumpToMainMenu called\");\n\n      // Add a user message to the UI\n      const userMessage = \"Main Menu\";\n      this.chatbotBase.ui.addMessage(\"user\", userMessage);\n\n      // Update the conversation history\n      this.chatbotBase.history.updateHistory({\n        type: \"user\",\n        message: userMessage,\n      });\n\n      try {\n        this.chatbotBase.ui.showTypingIndicator(\"Returning to main menu...\");\n\n        const response = await this.chatbotBase.api.streamInteract({\n          type: \"event\",\n          payload: {\n            event: {\n              name: \"main_menu\",\n            },\n          },\n        });\n\n        console.log(\"Main menu response received:\", response);\n        await this.chatbotBase.stream.handleStream(\n          response,\n          this.chatbotBase.traceHandler\n        );\n        console.log(\"Finished processing main menu stream\");\n      } catch (error) {\n        console.error(\"Error in jumpToMainMenu:\", error);\n        this.chatbotBase.ui.addMessage(\n          \"assistant\",\n          \"Sorry, I couldn't navigate to the main menu. Please try again.\"\n        );\n      } finally {\n        this.chatbotBase.ui.hideTypingIndicator();\n        this.chatbotBase.ui.scrollToBottom();\n      }\n    }\n  }\n\n  // Register the custom element\n  customElements.define(\"main-chatbot\", MainChatbotElement);\n}\n\n// Export for use in other modules\nexport { MainChatbotElement };\n"],"names":["ApiClient","config","prefix","storedID","newID","action","extraConfig","url","payload","response","errorText","startBlock","productDetails","message","eventName","data","UIManager","rootElement","messageContainer","typingIndicator","drawerBody","callback","role","doc","messageWrapper","messageDiv","contentDiv","text","block","child","error","para","carouselData","carouselContainer","carouselElement","carousel","Carousel","card","index","itemElement","button","cardIndex","buttons","buttonsWrapper","buttonElement","customText","textElement","imageWrapper","img","element","e","direction","increment","itemsPerPage","maxIndex","_a","itemWidth","translateX","item","isVisible","StreamHandler","traceHandler","signal","decoder","buffer","done","value","chunk","events","event","parts","part","cleanPart","TraceHandler","ui","history","onSpecialTrace","_b","_c","_d","_e","productHandle","nextEvent","entry","lastEntry","HistoryHandler","savedHistory","ChatbotBase","el","conversation","turn","lastTurn","buttonData","trace","productUrl","MainChatbotElement","drawer","form","userMessage"],"mappings":"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"}