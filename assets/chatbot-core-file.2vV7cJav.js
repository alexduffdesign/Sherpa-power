function S(f){return f&&f.__esModule&&Object.prototype.hasOwnProperty.call(f,"default")?f.default:f}var w={exports:{}};(function(f){var e=Object.prototype.hasOwnProperty,s="~";function t(){}Object.create&&(t.prototype=Object.create(null),new t().__proto__||(s=!1));function h(c,n,r){this.fn=c,this.context=n,this.once=r||!1}function o(c,n,r,l,m){if(typeof r!="function")throw new TypeError("The listener must be a function");var g=new h(r,l||c,m),u=s?s+n:n;return c._events[u]?c._events[u].fn?c._events[u]=[c._events[u],g]:c._events[u].push(g):(c._events[u]=g,c._eventsCount++),c}function a(c,n){--c._eventsCount===0?c._events=new t:delete c._events[n]}function d(){this._events=new t,this._eventsCount=0}d.prototype.eventNames=function(){var n=[],r,l;if(this._eventsCount===0)return n;for(l in r=this._events)e.call(r,l)&&n.push(s?l.slice(1):l);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(r)):n},d.prototype.listeners=function(n){var r=s?s+n:n,l=this._events[r];if(!l)return[];if(l.fn)return[l.fn];for(var m=0,g=l.length,u=new Array(g);m<g;m++)u[m]=l[m].fn;return u},d.prototype.listenerCount=function(n){var r=s?s+n:n,l=this._events[r];return l?l.fn?1:l.length:0},d.prototype.emit=function(n,r,l,m,g,u){var y=s?s+n:n;if(!this._events[y])return!1;var i=this._events[y],v=arguments.length,b,p;if(i.fn){switch(i.once&&this.removeListener(n,i.fn,void 0,!0),v){case 1:return i.fn.call(i.context),!0;case 2:return i.fn.call(i.context,r),!0;case 3:return i.fn.call(i.context,r,l),!0;case 4:return i.fn.call(i.context,r,l,m),!0;case 5:return i.fn.call(i.context,r,l,m,g),!0;case 6:return i.fn.call(i.context,r,l,m,g,u),!0}for(p=1,b=new Array(v-1);p<v;p++)b[p-1]=arguments[p];i.fn.apply(i.context,b)}else{var C=i.length,_;for(p=0;p<C;p++)switch(i[p].once&&this.removeListener(n,i[p].fn,void 0,!0),v){case 1:i[p].fn.call(i[p].context);break;case 2:i[p].fn.call(i[p].context,r);break;case 3:i[p].fn.call(i[p].context,r,l);break;case 4:i[p].fn.call(i[p].context,r,l,m);break;default:if(!b)for(_=1,b=new Array(v-1);_<v;_++)b[_-1]=arguments[_];i[p].fn.apply(i[p].context,b)}}return!0},d.prototype.on=function(n,r,l){return o(this,n,r,l,!1)},d.prototype.once=function(n,r,l){return o(this,n,r,l,!0)},d.prototype.removeListener=function(n,r,l,m){var g=s?s+n:n;if(!this._events[g])return this;if(!r)return a(this,g),this;var u=this._events[g];if(u.fn)u.fn===r&&(!m||u.once)&&(!l||u.context===l)&&a(this,g);else{for(var y=0,i=[],v=u.length;y<v;y++)(u[y].fn!==r||m&&!u[y].once||l&&u[y].context!==l)&&i.push(u[y]);i.length?this._events[g]=i.length===1?i[0]:i:a(this,g)}return this},d.prototype.removeAllListeners=function(n){var r;return n?(r=s?s+n:n,this._events[r]&&a(this,r)):(this._events=new t,this._eventsCount=0),this},d.prototype.off=d.prototype.removeListener,d.prototype.addListener=d.prototype.on,d.prefixed=s,d.EventEmitter=d,f.exports=d})(w);var E=w.exports;const x=S(E);class T extends x{constructor(e){super(),console.log("ChatbotCore constructor called with config:",e),this.apiEndpoint=e.proxyEndpoint,this.environment=e.environment||"development",this.userIDPrefix=e.userIDPrefix||"chatbot",this.userID=this.loadUserID(),this.messageContainer=null,this.typingIndicator=null,this.drawerBody=null,this.defaultTypingText="Sherpa Guide Is Typing...",this.conversationHistory=[],this.eventListenersAttached=!1,this.useStreaming=!0,this.sendMessage=this.sendMessage.bind(this),this.handleStreaming=this.handleStreaming.bind(this),this.gadgetInteract=this.gadgetInteract.bind(this),this.addMessage=this.addMessage.bind(this),this.updateLatestMessage=this.updateLatestMessage.bind(this),this.parseSSE=this.parseSSE.bind(this),this.handleTrace=this.handleTrace.bind(this),console.log("ChatbotCore instance created:",this)}loadUserID(){let e=localStorage.getItem("chatbotUserID");return e||(e=`user_${Math.random().toString(36).substr(2,9)}`,localStorage.setItem("chatbotUserID",e)),e}setDOMElements(e,s,t){this.messageContainer=e,this.typingIndicator=s,this.drawerBody=t,this.setupEventListeners()}setupEventListeners(){this.eventListenersAttached||(this.messageContainer.addEventListener("click",async e=>{const s=e.target.closest(".button");if(s){const t=JSON.parse(s.dataset.buttonData);await this.handleButtonClick(t)}}),this.eventListenersAttached=!0)}addMessage(e,s){if(!this.messageContainer){console.error("Message container not set");return}const t=document.createElement("div");if(t.classList.add("message-wrapper",`message-wrapper--${e}`),e==="assistant"){const o=document.createElement("div");o.classList.add("assistant-icon"),o.innerHTML="ðŸš€",t.appendChild(o)}const h=document.createElement("div");h.classList.add("message",`message--${e}`),h.innerHTML=`<div class="message__content">${this.markdownToHtml(s)}</div>`,t.appendChild(h),this.messageContainer.appendChild(t),this.scrollToBottom()}updateLatestMessage(e){const s=this.messageContainer.querySelector(".message-wrapper--assistant:last-child .message__content");s?s.innerHTML+=this.markdownToHtml(e):this.addMessage("assistant",e)}scrollToBottom(){this.messageContainer&&(this.messageContainer.scrollTop=this.messageContainer.scrollHeight)}showTypingIndicator(e=this.defaultTypingText){this.typingIndicator&&(this.typingIndicator.innerText=e,this.typingIndicator.style.display="block",this.scrollToBottom())}hideTypingIndicator(){this.typingIndicator&&(this.typingIndicator.style.display="none")}markdownToHtml(e){let t=(a=>a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"))(e);t=t.replace(/^###### (.*)$/gm,'<h6 class="h6">$1</h6>'),t=t.replace(/^##### (.*)$/gm,'<h6 class="h6">$1</h6>'),t=t.replace(/^#### (.*)$/gm,'<h6 class="h6">$1</h6>'),t=t.replace(/^### (.*)$/gm,'<h6 class="h6">$1</h6>'),t=t.replace(/^## (.*)$/gm,'<h5 class="h5">$1</h5>'),t=t.replace(/^# (.*)$/gm,'<h4 class="h4">$1</h4>'),t=t.replace(/\*\*\*(.*?)\*\*\*/g,"<strong><em>$1</em></strong>"),t=t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>"),t=t.replace(/\*(.*?)\*/g,"<em>$1</em>"),t=t.replace(/`([^`]+)`/g,"<code>$1</code>"),t=t.replace(/!\[(.*?)\]\((.*?)\)/g,'<img src="$2" alt="$1" class="markdown-image">'),t=t.replace(/\[(.*?)\]\((.*?)\)/g,'<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');let h=!1;return t=t.split(`
`).map(a=>a.match(/^\s*[-*+]\s/)?h?"<li>"+a.replace(/^\s*[-*+]\s/,"")+"</li>":(h=!0,`<ul>
<li>`+a.replace(/^\s*[-*+]\s/,"")+"</li>"):a.match(/^\s*\d+\.\s/)?h?"<li>"+a.replace(/^\s*\d+\.\s/,"")+"</li>":(h=!0,`<ol>
<li>`+a.replace(/^\s*\d+\.\s/,"")+"</li>"):h&&a.trim()===""?(h=!1,`</ul>
`):a).join(`
`),h&&(t+=`
</ul>`),t=t.replace(/^---$/gm,"<hr>"),t=t.replace(/^>\s(.*)$/gm,"<blockquote>$1</blockquote>"),t=t.replace(/\*{4,}/g,""),t=t.split(/\n{2,}/).map(a=>a.startsWith("<h")||a.startsWith("<ul")||a.startsWith("<ol")||a.startsWith("<blockquote")||a.startsWith("<hr")||a.startsWith("<img")?a:`<p>${a}</p>`).join(`
`),t}async sendMessage(e){console.log("sendMessage called with:",e),this.addMessage("user",e),this.conversationHistory.push({type:"user",message:e}),this.saveConversationToStorage();try{await this.handleStreaming({action:{type:"text",payload:e},config:{completion_events:!0}})}catch(s){console.error("Error sending message:",s),this.addMessage("assistant","Sorry, something went wrong. Please try again.")}}async sendLaunch(){console.log("Sending chatbot launch request");try{await this.handleStreaming({action:{type:"launch"},config:{completion_events:!0}})}catch(e){console.error("Error during launch:",e),this.addMessage("assistant","Failed to initialize the chatbot. Please try again later.")}}async handleStreaming(e){console.log("Handling streaming interaction with payload:",e);try{const s=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,action:e.action,config:e.config})});if(!s.ok){const a=await s.text();throw console.error("Gadget Streaming API error:",a),new Error(`Gadget Streaming API error: ${s.status} - ${a}`)}const t=s.body.getReader(),h=new TextDecoder("utf-8");let o="";for(;;){const{done:a,value:d}=await t.read();if(a)break;o+=h.decode(d,{stream:!0});let c=o.indexOf(`

`);for(;c!==-1;){const n=o.substring(0,c);o=o.substring(c+2),this.parseSSE(n),c=o.indexOf(`

`)}}}catch(s){console.error("Error during stream processing:",s),this.addMessage("assistant","An error occurred while processing your request."),this.hideTypingIndicator()}}parseSSE(e){const s=e.split(`
`);let t=null,h=null;if(s.forEach(o=>{o.startsWith("event:")?t=o.replace("event:","").trim():o.startsWith("data:")&&(h=o.replace("data:","").trim())}),t==="trace"&&h)try{const o=JSON.parse(h);this.handleTrace(o)}catch(o){console.error("Error parsing trace data:",o)}else t==="end"&&(console.log("Stream ended"),this.hideTypingIndicator())}handleTrace(e){if(console.log("Handling trace:",e),e.type==="text")this.addMessage("assistant",e.payload.message),this.conversationHistory.push({type:"assistant",message:e.payload.message});else if(e.type==="completion")if(e.payload.state==="start")this.showTypingIndicator("Sherpa Guide is typing...");else if(e.payload.state==="content"){this.updateLatestMessage(e.payload.content);const s=this.conversationHistory[this.conversationHistory.length-1];s&&s.type==="assistant"&&(s.message+=e.payload.content)}else e.payload.state==="end"&&this.hideTypingIndicator();else e.type==="choice"?(this.addButtons(e.payload.buttons),this.conversationHistory.push({type:"choice",buttons:e.payload.buttons})):e.type==="carousel"?(this.addCarousel(e.payload),this.conversationHistory.push({type:"carousel",data:e.payload})):e.type==="visual"&&e.payload.visualType==="image"?(this.addVisualImage(e.payload),this.conversationHistory.push({type:"visual",data:e.payload})):e.type==="error"?this.addMessage("assistant","An error occurred: "+e.payload.message):console.log("Unknown trace type:",e.type);this.saveConversationToStorage()}addButtons(e){console.log("Adding buttons:",e);const s=document.createElement("div");s.classList.add("button-container"),e.forEach(t=>{const h=document.createElement("button");h.classList.add("button"),h.textContent=t.name,h.dataset.buttonData=JSON.stringify(t),s.appendChild(h)}),this.messageContainer?(this.messageContainer.appendChild(s),this.scrollToBottom()):console.error("Message container not found when adding buttons"),this.conversationHistory.push({type:"buttons",buttons:e}),this.saveConversationToStorage()}removeButtons(){this.messageContainer.querySelectorAll(".button-container").forEach(s=>s.remove())}async handleButtonClick(e){console.log("Button clicked:",e),this.removeButtons(),this.addMessage("user",e.name),this.conversationHistory.push({type:"user",message:e.name}),this.saveConversationToStorage(),this.showTypingIndicator();try{await this.handleStreaming({action:{type:"button_click",payload:e.request},config:{completion_events:!0}})}catch(s){console.error("Error handling button click:",s),this.addMessage("assistant","Sorry, something went wrong. Please try again.")}}addVisualImage(e){if(console.log("Adding visual image:",e),!this.messageContainer){console.error("Message container not set");return}const s=document.createElement("div");s.classList.add("message-wrapper","message-wrapper--assistant");const t=document.createElement("img");t.src=e.image,t.alt="Visual content",t.classList.add("chat-image"),e.dimensions&&(t.width=e.dimensions.width,t.height=e.dimensions.height),t.loading="lazy",t.onerror=()=>{console.error("Failed to load image:",e.image),t.alt="Failed to load image"},s.appendChild(t),this.messageContainer.appendChild(s),this.scrollToBottom()}addCarousel(e){console.log("Adding carousel:",e);const s=document.createElement("div");s.className="carousel",s.innerHTML=`
      <div class="carousel__container">
        <!-- Carousel items will be dynamically added here -->
      </div>
      <button class="carousel__button carousel__button--left" aria-label="Previous slide">
        ðŸš€ <!-- Left Arrow SVG Placeholder -->
      </button>
      <button class="carousel__button carousel__button--right" aria-label="Next slide">
        ðŸš€ <!-- Right Arrow SVG Placeholder -->
      </button>
    `;const t=new I(s);e.cards.forEach((o,a)=>{const d=`
        <div class="carousel__item-wrapper">
          <div class="carousel__item-content">
            <img src="${o.imageUrl}" alt="${o.title}" class="carousel__item-image">
            <h6 class="carousel__item-title">${o.title}</h6>
            <p class="carousel__item-description">${o.description.text}</p>
            <button class="button carousel__item-button" data-button-index="${a}">${o.buttons[0].name}</button>
          </div>
        </div>
      `;t.addItem(d)}),s.querySelectorAll(".carousel__item-button").forEach((o,a)=>{o.addEventListener("click",async()=>{const d=Math.floor(a/e.cards[0].buttons.length),c=a%e.cards[0].buttons.length,n=e.cards[d].buttons[c];try{s.remove(),this.addMessage("user",n.name),this.conversationHistory.push({type:"user",message:n.name}),this.saveConversationToStorage(),await this.handleButtonClick(n)}catch(r){console.error("Error handling carousel button click:",r)}})}),this.messageContainer?(this.messageContainer.appendChild(s),this.scrollToBottom()):console.error("Message container not found when adding carousel")}saveDeviceEstimate(e){const s=`${this.getAttribute("product-title")}_devices`;let t=JSON.parse(localStorage.getItem(s)||"[]");const h=t.findIndex(o=>o.name===e.name);h!==-1&&t.splice(h,1),t.unshift(e),localStorage.setItem(s,JSON.stringify(t))}}class I{constructor(e){this.element=e,this.container=e.querySelector(".carousel__container"),this.leftButton=e.querySelector(".carousel__button--left"),this.rightButton=e.querySelector(".carousel__button--right"),this.items=[],this.currentIndex=0,this.mediaQuery=window.matchMedia("(min-width: 1000px)"),this.isDesktop=this.mediaQuery.matches,this.leftButton.addEventListener("click",()=>this.move("left")),this.rightButton.addEventListener("click",()=>this.move("right")),this.mediaQuery.addListener(this.handleMediaQueryChange.bind(this))}handleMediaQueryChange(e){this.isDesktop=e.matches,this.currentIndex=0,this.updatePosition(),this.updateVisibility()}addItem(e){const s=document.createElement("div");s.className="carousel__item",s.innerHTML=e,this.container.appendChild(s),this.items.push(s),this.updateVisibility()}move(e){const s=this.isDesktop?2:1;e==="left"?this.currentIndex=Math.max(0,this.currentIndex-s):this.currentIndex=Math.min(this.items.length-s,this.currentIndex+s),this.updatePosition(),this.updateVisibility()}updatePosition(){const e=this.isDesktop?2:1,s=-(this.currentIndex/e)*100;this.container.style.transform=`translateX(${s}%)`}updateVisibility(){const e=this.isDesktop?2:1;this.leftButton.style.display=this.currentIndex===0?"none":"flex",this.rightButton.style.display=this.currentIndex>=this.items.length-e?"none":"flex"}}export{T as C};
//# sourceMappingURL=chatbot-core-file.2vV7cJav.js.map
