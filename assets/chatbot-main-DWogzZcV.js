import{C as u}from"./chatbot-core-file-D_dkLCnc.js";console.log("MainChatbot module loading");class m{constructor(t,e){console.log("MainChatbot constructor called with config:",e),this.element=t,this.voiceflowEndpoint=e.voiceflowEndpoint,this.core=new u({apiEndpoint:this.voiceflowEndpoint,userIDPrefix:"mainChatbot"}),console.log("ChatbotCore instance created:",this.core),this.conversationHistory=[],this.hasLaunched=localStorage.getItem(`${this.core.userIDPrefix}_chatHasLaunched`)==="true",this.eventListenersAttached=!1,this.initializeElements(),this.setupEventListeners(),this.hasLaunched&&(this.loadConversationFromStorage(),this.displaySavedConversation())}initializeElements(){console.log("MainChatbot initializeElements called");const t=this.element.querySelector("#messageContainer"),e=this.element.querySelector(".chat-typing"),o=this.element.closest("x-drawer");let s=null;if(o&&o.shadowRoot&&(s=o.shadowRoot.querySelector('[part="body"]')),!t||!e||!s){console.error("Required DOM elements not found");return}this.core.setDOMElements(t,e,s),console.log("DOM elements set in ChatbotCore:",this.core)}setupEventListeners(){if(this.eventListenersAttached)return;console.log("MainChatbot setupEventListeners called");const t=this.element.querySelector("#chatForm"),e=this.element.querySelector("#userInput");if(!t||!e){console.error("Chat form or input not found");return}t.addEventListener("submit",async o=>{o.preventDefault();const s=e.value.trim();s&&(console.log("Form submitted with message:",s),e.value="",await this.initializeChatIfNeeded(),await this.handleUserMessage(s))}),this.messageContainer.addEventListener("click",async o=>{const s=o.target.closest(".button");if(s){const n=JSON.parse(s.dataset.buttonData);console.log("Button clicked:",n);try{const i=await this.core.handleButtonClick(n);await this.handleAgentResponse(i)}catch(i){console.error("Error handling button click:",i)}}}),this.eventListenersAttached=!0}async initializeChatIfNeeded(){this.chatInitialized||(console.log("Initializing main chatbot"),await this.initializeChat(),this.chatInitialized=!0)}async initializeChat(){console.log("Initializing chat"),this.hasLaunched||(console.log("Initializing chat for the first time"),await this.sendLaunch(),this.hasLaunched=!0,localStorage.setItem(`${this.core.userIDPrefix}_chatHasLaunched`,"true")),console.log("Chat initialized")}async sendLaunch(t={}){console.log("Sending main chatbot launch request");const e={userAction:{type:"launch"}};try{const o=await this.core.sendLaunch(e);await this.handleAgentResponse(o),this.saveConversationToStorage()}catch(o){console.error("Error in main chatbot send launch:",o)}}async handleUserMessage(t){this.core.addMessage("user",t),this.conversationHistory.push({type:"user",message:t}),this.saveConversationToStorage(),this.core.showTypingIndicator();try{const e=await this.core.sendMessage(t);console.log("Response from sendMessage:",e),await this.handleAgentResponse(e)}catch(e){console.error("Error in send message:",e)}finally{this.core.hideTypingIndicator(),this.core.scrollToBottom()}}async handleAgentResponse(t){var e,o;console.log("Handling agent response:",t);for(const s of t)if(s.type==="RedirectToProduct"){const n=(o=(e=s.payload)==null?void 0:e.body)==null?void 0:o.productHandle;if(n){this.handleProductRedirect(n);return}}else s.type==="text"?(this.core.addMessage("assistant",s.payload.message),this.conversationHistory.push({type:"assistant",message:s.payload.message})):s.type==="choice"?(this.core.addButtons(s.payload.buttons),this.conversationHistory.push({type:"choice",buttons:s.payload.buttons})):s.type==="carousel"?(this.addCarousel(s.payload),this.conversationHistory.push({type:"carousel",payload:s.payload})):console.log("Unknown trace type:",s.type);this.saveConversationToStorage(),this.core.scrollToBottom()}loadConversationFromStorage(){const t=localStorage.getItem(`${this.core.userIDPrefix}_chatConversation`);this.conversationHistory=t?JSON.parse(t):[],console.log("Loaded conversation from storage:",this.conversationHistory)}saveConversationToStorage(){localStorage.setItem(`${this.core.userIDPrefix}_chatConversation`,JSON.stringify(this.conversationHistory)),console.log("Saved conversation to storage")}displaySavedConversation(){console.log("Displaying saved conversation");const t=this.element.querySelector("#messageContainer");t?(t.innerHTML="",this.conversationHistory.forEach(e=>{e.type==="user"||e.type==="assistant"?this.core.addMessage(e.type==="user"?"user":"assistant",e.message):e.type==="choice"?this.core.addButtons(e.buttons):e.type==="carousel"&&this.addCarousel(e.payload)}),this.core.scrollToBottom()):console.error("Message container not found")}handleProductRedirect(t){if(!t){console.error("Cannot redirect: Product handle is undefined or empty");return}const o=`https://www.sherpapower.co.uk/products/${encodeURIComponent(t)}`;console.log(`Redirecting to product page: ${o}`),window.location.href=o}async handleAgentResponse(t){var e,o;console.log("Handling agent response:",t);for(const s of t)if(s.type==="RedirectToProduct"){const n=(o=(e=s.payload)==null?void 0:e.body)==null?void 0:o.productHandle;if(n){this.handleProductRedirect(n);return}}else s.type==="text"?(this.core.addMessage("assistant",s.payload.message),this.conversationHistory.push({type:"assistant",message:s.payload.message})):s.type==="choice"?this.core.addButtons(s.payload.buttons):s.type==="carousel"?this.addCarousel(s.payload):console.log("Unknown trace type:",s.type);this.saveConversationToStorage(),this.core.scrollToBottom()}addCarousel(t){console.log("Adding carousel:",t);const e=document.createElement("div");e.className="carousel",e.innerHTML=`
      <div class="carousel__container">
        <!-- Carousel items will be dynamically added here -->
      </div>
      <button class="carousel__button carousel__button--left" aria-label="Previous slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="carousel__button carousel__button--right" aria-label="Next slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    `;const o=new p(e);t.cards.forEach((i,a)=>{const r=`
        <div class="carousel__item-wrapper">
          <div class="carousel__item-content">
            <img src="${i.imageUrl}" alt="${i.title}" class="carousel__item-image">
            <h6 class="carousel__item-title">${i.title}</h6>
            <p class="carousel__item-description">${i.description.text}</p>
            <button class="button carousel__item-button" data-button-index="${a}">${i.buttons[0].name}</button>
          </div>
        </div>
      `;o.addItem(r)}),e.querySelectorAll(".carousel__item-button").forEach((i,a)=>{i.addEventListener("click",async()=>{const r=Math.floor(a/t.cards[0].buttons.length),h=a%t.cards[0].buttons.length,d=t.cards[r].buttons[h];try{e.remove();const c=await this.core.handleButtonClick(d);await this.handleAgentResponse(c)}catch(c){console.error("Error handling carousel button click:",c)}})});const n=this.element.querySelector("#messageContainer");n?(n.appendChild(e),this.core.scrollToBottom()):console.error("Message container not found when adding carousel")}}class p{constructor(t){this.element=t,this.container=t.querySelector(".carousel__container"),this.leftButton=t.querySelector(".carousel__button--left"),this.rightButton=t.querySelector(".carousel__button--right"),this.items=[],this.currentIndex=0,this.mediaQuery=window.matchMedia("(min-width: 1000px)"),this.isDesktop=this.mediaQuery.matches,this.leftButton.addEventListener("click",()=>this.move("left")),this.rightButton.addEventListener("click",()=>this.move("right")),this.mediaQuery.addListener(this.handleMediaQueryChange.bind(this))}handleMediaQueryChange(t){this.isDesktop=t.matches,this.currentIndex=0,this.updatePosition(),this.updateVisibility()}addItem(t){const e=document.createElement("div");e.className="carousel__item",e.innerHTML=t,this.container.appendChild(e),this.items.push(e),this.updateVisibility()}move(t){const e=this.isDesktop?2:1;t==="left"?this.currentIndex=Math.max(0,this.currentIndex-e):this.currentIndex=Math.min(this.items.length-e,this.currentIndex+e),this.updatePosition(),this.updateVisibility()}updatePosition(){const t=this.isDesktop?2:1,e=-(this.currentIndex/t)*100;this.container.style.transform=`translateX(${e}%)`}updateVisibility(){const t=this.isDesktop?2:1;this.leftButton.style.display=this.currentIndex===0?"none":"flex",this.rightButton.style.display=this.currentIndex>=this.items.length-t?"none":"flex"}}console.log("MainChatbot module loaded");export{m as M};
//# sourceMappingURL=chatbot-main-DWogzZcV.js.map
