import{E as f}from"./vendor.DqvJXvYX.js";class E extends f{}const s=new E,b={MAIN_CHATBOT:{MESSAGE_RECEIVED:"mainChatbot:messageReceived",TYPING:"mainChatbot:typing",CHOICE_PRESENTED:"mainChatbot:choicePresented",CAROUSEL_PRESENTED:"mainChatbot:carouselPresented",ERROR:"mainChatbot:error"},SECTION_CHATBOT:{MESSAGE_RECEIVED:"sectionChatbot:messageReceived",DEVICE_ANSWER:"sectionChatbot:deviceAnswer",CHOICE_PRESENTED:"sectionChatbot:choicePresented",CAROUSEL_PRESENTED:"sectionChatbot:carouselPresented",ERROR:"sectionChatbot:error"}};class S{constructor({userID:e,endpoint:t,chatbotType:o}){if(!e)throw new Error("ChatbotCore requires a userID.");if(!t)throw new Error("ChatbotCore requires an endpoint URL.");if(!o)throw new Error('ChatbotCore requires a chatbotType ("main" or "section").');this.userID=e,this.endpoint=t,this.chatbotType=o,this.eventPrefix=o==="main"?"mainChatbot":"sectionChatbot",this.abortController=null,this.initialize()}initialize(){}sendLaunch(e={}){const t={action:{type:"launch",payload:e},config:{}};this.sendAction(t)}sendMessage(e){const t={action:{type:"text",payload:{message:e}},config:{}};this.sendAction(t)}async sendAction(e){this.abortController=new AbortController;const{signal:t}=this.abortController;try{const o=await fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,action:e.action,config:e.config}),credentials:"include",signal:t});if(!o.ok)throw new Error(`Gadget API responded with status ${o.status}`);const n=o.body.getReader(),p=new TextDecoder("utf-8");let c="";for(;;){const{done:m,value:g}=await n.read();if(m){s.emit(`${this.eventPrefix}:end`,{});break}c+=p.decode(g,{stream:!0});const d=c.split(`

`);c=d.pop(),d.forEach(i=>{if(i.trim()!=="")try{const r=i.split(`
`),h=r.find(l=>l.startsWith("event:")),C=r.find(l=>l.startsWith("data:")),u=h?h.split(":")[1].trim():"trace",v=C?JSON.parse(i.substring(i.indexOf("data:")+5).trim()):null;u==="trace"?this.processTrace(v):u==="end"&&s.emit(`${this.eventPrefix}:end`,{})}catch(r){console.error("Error parsing SSE event:",r)}})}}catch(o){o.name==="AbortError"?console.warn("SSE connection aborted"):(console.error("SSE connection error:",o),s.emit(`${this.eventPrefix}:error`,{message:o.message}))}finally{this.abortController=null,s.emit(`${this.eventPrefix}:end`,{})}}processTrace(e){if(!e.type){console.warn("Trace without type received:",e);return}switch(e.type){case"text":console.log("Text received choice trace:",e),s.emit(`${this.eventPrefix}:messageReceived`,{content:e.payload.message});break;case"choice":console.log("Choice received choice trace:",e),s.emit(`${this.eventPrefix}:choicePresented`,{buttons:e.payload.buttons});break;case"carousel":s.emit(`${this.eventPrefix}:carouselPresented`,{carouselItems:e.payload.items});break;case"device_answer":s.emit(`${this.eventPrefix}:deviceAnswer`,{devices:e.payload.devices});break;case"block":console.log("Block trace received:",e);break;case"typing":e.payload.isTyping?s.emit(`${this.eventPrefix}:typing`,{isTyping:!0}):s.emit(`${this.eventPrefix}:typing`,{isTyping:!1});break;default:console.warn(`Unhandled trace type: ${e.type}`,e)}}closeConnection(){this.abortController&&(this.abortController.abort(),console.log("SSE connection closed."))}destroy(){this.closeConnection(),s.removeAllListeners(`${this.eventPrefix}:messageReceived`),s.removeAllListeners(`${this.eventPrefix}:choicePresented`),s.removeAllListeners(`${this.eventPrefix}:carouselPresented`),s.removeAllListeners(`${this.eventPrefix}:deviceAnswer`),s.removeAllListeners(`${this.eventPrefix}:error`),s.removeAllListeners(`${this.eventPrefix}:typing`),s.removeAllListeners(`${this.eventPrefix}:end`)}}class T{constructor(e){if(this.container=e,this.form=this.container.querySelector(".chat-form"),this.input=this.container.querySelector("input[type='text']"),this.messageContainer=this.container.querySelector(".message-container"),console.log("Chatbot UI Container:",this.container),console.log("Chat Form:",this.form),console.log("Chat Input:",this.input),console.log("Message Container:",this.messageContainer),!this.container){console.error("Main Chatbot UI container not found");return}if(!this.form||!this.input){console.error("Main Chatbot form or input not found");return}this.setupEventListeners(),this.setupUIEventListeners()}setupEventListeners(){this.form.addEventListener("submit",e=>{e.preventDefault();const t=this.input.value.trim();t&&(s.emit("userMessage",t),this.input.value="",this.saveToHistory("user",t))})}setupUIEventListeners(){this.container.querySelector(".chatbot-container").addEventListener("click",e=>{const t=e.target.closest("button.button");if(t){const o=JSON.parse(t.getAttribute("data-button-data"));s.emit("buttonClicked",o),this.removeInteractiveElements()}})}onUserMessage(e){s.on("userMessage",e)}onButtonClick(e){s.on("buttonClicked",e)}addMessage(e,t){if(!this.messageContainer){console.error("Message container not set");return}const o=document.createElement("message-component");o.setAttribute("sender",e),o.setAttribute("content",t),this.messageContainer.appendChild(o),console.log("Message appended to messageContainer"),this.scrollToBottom(),this.saveToHistory(e,t)}addButtons(e){if(console.log("addButtons called with:",e),!Array.isArray(e)){console.error("addButtons expected an array but received:",e);return}e.forEach(t=>{const o=document.createElement("button-component");o.setAttribute("label",t.name),o.setAttribute("payload",JSON.stringify(t.request)),this.messageContainer.appendChild(o),console.log("Button appended to messageContainer")}),this.scrollToBottom()}addCarousel(e){console.log("Adding carousel:",e);const t=document.createElement("carousel-component");t.setAttribute("data-carousel",JSON.stringify(e)),this.messageContainer.appendChild(t),this.scrollToBottom()}showTypingIndicator(){const e=this.container.querySelector(".chat-typing");e&&(e.style.display="flex",this.scrollToBottom())}hideTypingIndicator(){const e=this.container.querySelector(".chat-typing");e&&(e.style.display="none")}displayError(e){const t=document.createElement("div");t.classList.add("error-message"),t.innerText=e,this.messageContainer.appendChild(t),this.scrollToBottom()}scrollToBottom(){this.messageContainer.scrollTop=this.messageContainer.scrollHeight}saveToHistory(e,t){const o=JSON.parse(localStorage.getItem("mainChatbotHistory"))||[];o.push({sender:e,message:t}),localStorage.setItem("mainChatbotHistory",JSON.stringify(o))}removeInteractiveElements(){this.messageContainer.querySelectorAll("button-component, carousel-component").forEach(t=>t.remove())}}class A{constructor(e){if(this.container=e,this.form=this.container.querySelector(".chat-form"),this.input=this.container.querySelector("input[type='text']"),this.messageContainer=this.container.querySelector(".message-container"),!this.container){console.error("Section Chatbot UI container not found");return}if(!this.form||!this.input){console.error("Section Chatbot form or input not found");return}this.productTitle=this.container.dataset.productTitle,this.productCapacity=this.container.dataset.productCapacity,this.acOutputContinuousPower=this.container.dataset.productAcOutputContinuousPower,this.acOutputPeakPower=this.container.dataset.productAcOutputPeakPower,this.dcOutputPower=this.container.dataset.productDcOutputPower,this.startBlock="shopifySection",this.productDetails={title:this.productTitle,capacity:this.productCapacity,ac_output_continuous_power:this.acOutputContinuousPower,ac_output_peak_power:this.acOutputPeakPower,dc_output_power:this.dcOutputPower},this.setupEventListeners()}setupEventListeners(){this.form.addEventListener("submit",e=>{e.preventDefault();const t=this.input.value.trim();t&&(this.emit("userMessage",t),this.input.value="")})}onUserMessage(e){s.on("userMessage",e)}onButtonClick(e){s.on("buttonClicked",e)}emit(e,t){const o=new CustomEvent(e,{detail:t});this.container.dispatchEvent(o)}addMessage(e,t){const o=document.createElement("message-component");o.setAttribute("sender",e),o.setAttribute("content",t),this.messageContainer.appendChild(o),this.scrollToBottom()}addButtons(e){e.forEach(t=>{const o=document.createElement("button-component");o.setAttribute("label",t.name),o.setAttribute("payload",JSON.stringify(t.request)),this.messageContainer.appendChild(o)}),this.scrollToBottom(),this.messageContainer.addEventListener("click",t=>{if(t.target.closest("button-component")){const o=t.target.closest("button-component"),n=JSON.parse(o.getAttribute("payload"));this.emit("buttonClicked",n),this.removeInteractiveElements()}})}addCarousel(e){const t=document.createElement("carousel-component");t.setAttribute("items",JSON.stringify(e)),this.messageContainer.appendChild(t),this.scrollToBottom()}populateApplicationsGrid(e){const t=document.querySelector(".applications-grid");if(!t){console.error("Applications grid not found");return}e.forEach(o=>{const n=document.createElement("div");n.classList.add("application-card","chatbot-card"),n.innerHTML=`
        <div class="application-card__image">
          <img src="${o.imageUrl}" alt="${o.name}" />
        </div>
        <div class="application-card__content">
          <div class="application-card__title">${o.name}</div>
          <div class="application-card__runtime">${o.estimatedRuntime}</div>
        </div>
      `,t.appendChild(n)}),this.scrollToBottom()}displayError(e){const t=document.createElement("div");t.classList.add("error-message"),t.innerText=e,this.messageContainer.appendChild(t),this.scrollToBottom()}scrollToBottom(){this.container.scrollTop=this.container.scrollHeight}getAttribute(e){return this.container.getAttribute(e)}removeInteractiveElements(){this.messageContainer.querySelectorAll("button-component, carousel-component").forEach(t=>t.remove())}}export{S as C,b as E,T as M,A as S,s as e};
//# sourceMappingURL=chatbot.DfUcQSBi.js.map
