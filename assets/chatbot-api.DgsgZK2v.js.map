{"version":3,"file":"chatbot-api.DgsgZK2v.js","sources":["../frontend/entrypoints/chatbot-api.js"],"sourcesContent":["export class ApiClient {\n    constructor(config) {\n        this.apiEndpoint = config.apiEndpoint;\n        this.streamingEndpoint = \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\";\n        this.apiKey = config.apiKey;\n        this.projectID = config.projectID;\n        this.userID = this.generateUserID(config.userIDPrefix || \"chatbot\");\n    }\n\n    generateUserID(prefix) {\n        const storedID = localStorage.getItem(`${prefix}_userID`);\n        if (storedID) return storedID;\n\n        const newID = `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        localStorage.setItem(`${prefix}_userID`, newID);\n        return newID;\n    }\n\n    async streamInteract(message) {\n        console.log(\"Streaming interaction with message:\", message);\n        const url = new URL(this.streamingEndpoint);\n        url.searchParams.append(\"userID\", this.userID);\n        \n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ message }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return response;\n        } catch (error) {\n            console.error(\"Error in stream interact:\", error);\n            throw error;\n        }\n    }\n\n    async gadgetInteract(message) {\n        console.log(\"Gadget interaction with message:\", message);\n        try {\n            const response = await fetch(this.apiEndpoint, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    message,\n                    userID: this.userID,\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error in gadget interact:\", error);\n            throw error;\n        }\n    }\n}\n"],"names":["ApiClient","config","prefix","storedID","newID","message","url","response","error"],"mappings":"AAAO,MAAMA,CAAU,CACnB,YAAYC,EAAQ,CAChB,KAAK,YAAcA,EAAO,YAC1B,KAAK,kBAAoB,gFACzB,KAAK,OAASA,EAAO,OACrB,KAAK,UAAYA,EAAO,UACxB,KAAK,OAAS,KAAK,eAAeA,EAAO,cAAgB,SAAS,CACrE,CAED,eAAeC,EAAQ,CACnB,MAAMC,EAAW,aAAa,QAAQ,GAAGD,CAAM,SAAS,EACxD,GAAIC,EAAU,OAAOA,EAErB,MAAMC,EAAQ,GAAGF,CAAM,IAAI,KAAK,IAAK,CAAA,IAAI,KAAK,OAAQ,EAAC,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,GAChF,oBAAa,QAAQ,GAAGA,CAAM,UAAWE,CAAK,EACvCA,CACV,CAED,MAAM,eAAeC,EAAS,CAC1B,QAAQ,IAAI,sCAAuCA,CAAO,EAC1D,MAAMC,EAAM,IAAI,IAAI,KAAK,iBAAiB,EAC1CA,EAAI,aAAa,OAAO,SAAU,KAAK,MAAM,EAE7C,GAAI,CACA,MAAMC,EAAW,MAAM,MAAMD,EAAK,CAC9B,OAAQ,OACR,QAAS,CACL,eAAgB,kBACnB,EACD,KAAM,KAAK,UAAU,CAAE,QAAAD,CAAO,CAAE,CAChD,CAAa,EAED,GAAI,CAACE,EAAS,GACV,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG5D,OAAOA,CACV,OAAQC,EAAO,CACZ,cAAQ,MAAM,4BAA6BA,CAAK,EAC1CA,CACT,CACJ,CAED,MAAM,eAAeH,EAAS,CAC1B,QAAQ,IAAI,mCAAoCA,CAAO,EACvD,GAAI,CACA,MAAME,EAAW,MAAM,MAAM,KAAK,YAAa,CAC3C,OAAQ,OACR,QAAS,CACL,eAAgB,kBACnB,EACD,KAAM,KAAK,UAAU,CACjB,QAAAF,EACA,OAAQ,KAAK,MACjC,CAAiB,CACjB,CAAa,EAED,GAAI,CAACE,EAAS,GACV,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG5D,OAAO,MAAMA,EAAS,MACzB,OAAQC,EAAO,CACZ,cAAQ,MAAM,4BAA6BA,CAAK,EAC1CA,CACT,CACJ,CACL"}