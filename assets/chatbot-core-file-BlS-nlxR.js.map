{"version":3,"file":"chatbot-core-file-BlS-nlxR.js","sources":["../frontend/entrypoints/chatbot-core-file.js"],"sourcesContent":["// chatbot-core.js\nconsole.log(\"Recent changes check : 3\");\n\nexport class ChatbotCore {\n  constructor(config) {\n    console.log(\"ChatbotCore constructor called with config:\", config);\n    this.apiEndpoint = config.apiEndpoint;\n    this.userID = this.loadUserID();\n    this.messageContainer = null;\n    this.typingIndicator = null;\n\n    // Bind methods\n    this.sendMessage = this.sendMessage.bind(this);\n    this.gadgetInteract = this.gadgetInteract.bind(this);\n    this.addMessage = this.addMessage.bind(this);\n    this.chatBodyElement = null;\n\n    console.log(\"ChatbotCore instance created:\", this);\n  }\n\n  loadUserID() {\n    let userID = localStorage.getItem(\"chatbotUserID\");\n    if (!userID) {\n      userID = `user_${Math.floor(Math.random() * 1000000000000000)}`;\n      localStorage.setItem(\"chatbotUserID\", userID);\n    }\n    console.log(\"ChatbotCore userID loaded:\", userID);\n    return userID;\n  }\n\n  setDOMElements(messageContainer, typingIndicator, chatBodyElement) {\n    console.log(\"setDOMElements called:\", {\n      messageContainer,\n      typingIndicator,\n    });\n    this.messageContainer = messageContainer;\n    this.typingIndicator = typingIndicator;\n    this.chatBodyElement = chatBodyElement;\n    console.log(\"DOM elements set:\", this);\n  }\n\n  async sendMessage(message) {\n    console.log(\"sendMessage called with:\", message);\n    console.log(\"this in sendMessage:\", this);\n    try {\n      const res = await this.gadgetInteract({\n        userAction: {\n          type: \"text\",\n          payload: message,\n        },\n      });\n      console.log(\"gadgetInteract response:\", res);\n      this.hideTypingIndicator();\n      return res;\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  async sendLaunch() {\n    console.log(\"ChatbotCore sendLaunch called\");\n    this.showTypingIndicator();\n    const interactPayload = {\n      userAction: {\n        type: \"launch\",\n      },\n    };\n    try {\n      const res = await this.gadgetInteract(interactPayload);\n      console.log(\"Launch response:\", res);\n      this.hideTypingIndicator();\n      return res;\n    } catch (error) {\n      console.error(\"Error launching conversation:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  async gadgetInteract(payload) {\n    console.log(\"Sending payload to Gadget:\", payload);\n    const fullPayload = {\n      userID: this.userID,\n      userAction: payload.userAction || payload,\n    };\n    const response = await fetch(this.apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(fullPayload),\n    });\n    if (!response.ok) {\n      throw new Error(`Gadget API error: ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  showTypingIndicator() {\n    console.log(\"Showing typing indicator\");\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n      this.typingIndicator.classList.add(\"active\");\n      this.scrollToBottom();\n    }\n  }\n\n  hideTypingIndicator() {\n    console.log(\"Hiding typing indicator\");\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n      this.typingIndicator.classList.remove(\"active\");\n    }\n  }\n\n  scrollToBottom() {\n    if (this.chatBodyElement) {\n      this.chatBodyElement.scrollTop = this.chatBodyElement.scrollHeight;\n    } else {\n      console.error(\"Chat body element not found for scrolling\");\n    }\n  }\n\n  addMessage(sender, content) {\n    console.log(`Adding message from ${sender}: ${content}`);\n    if (this.messageContainer) {\n      const messageDiv = document.createElement(\"div\");\n      messageDiv.classList.add(\"message\", `message--${sender}`);\n      messageDiv.innerHTML = this.markdownToHtml(content);\n      this.messageContainer.appendChild(messageDiv);\n      this.scrollToBottom(); // Scroll after adding a message\n    }\n  }\n\n  markdownToHtml(markdown) {\n    return markdown\n      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n      .replace(/\\*(.*?)\\*/g, \"<em>$1</em>\")\n      .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '<a href=\"$2\" target=\"_blank\">$1</a>')\n      .replace(/\\n/g, \"<br>\");\n  }\n\n  addButtons(buttons) {\n    console.log(\"Adding buttons:\", buttons);\n    const buttonContainer = document.createElement(\"div\");\n    buttonContainer.classList.add(\"button-container\");\n\n    buttons.forEach((button) => {\n      const buttonElement = document.createElement(\"button\");\n      buttonElement.classList.add(\"button\");\n      buttonElement.textContent = button.name;\n      buttonElement.dataset.buttonData = JSON.stringify(button);\n      buttonContainer.appendChild(buttonElement);\n    });\n\n    if (this.messageContainer) {\n      this.messageContainer.appendChild(buttonContainer);\n      this.scrollToBottom();\n    } else {\n      console.error(\"Message container not found when adding buttons\");\n    }\n  }\n\n  removeButtons() {\n    const buttonContainers =\n      this.messageContainer.querySelectorAll(\".button-container\");\n    buttonContainers.forEach((container) => container.remove());\n  }\n\n  async handleButtonClick(button) {\n    console.log(\"Button clicked:\", button);\n    this.removeButtons();\n    this.addMessage(\"user\", button.name);\n\n    this.showTypingIndicator();\n    try {\n      const response = await this.gadgetInteract({\n        userID: this.userID,\n        userAction: button.request,\n      });\n      this.hideTypingIndicator();\n      return response; // Return the response instead of handling it here\n    } catch (error) {\n      console.error(\"Error handling button click:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n}\n\nconsole.log(\"ChatbotCore module loaded\");\n"],"names":["ChatbotCore","config","userID","messageContainer","typingIndicator","chatBodyElement","message","res","error","interactPayload","payload","fullPayload","response","sender","content","messageDiv","markdown","buttons","buttonContainer","button","buttonElement","container"],"mappings":"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"}