{"version":3,"file":"chatbot-section.CshNLTn0.js","sources":["../frontend/sectionChatbot/chatbot-section.js"],"sourcesContent":["// /frontend/sectionChatbot/chatbot-section.js\n\nimport ChatbotCore from \"../baseChatbot/base-chatbot.js\";\nimport SectionChatbotUI from \"./chatbot-section-ui.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * SectionChatbot Class\n * Handles section-specific chatbot functionality including product context and device answers\n */\nclass SectionChatbot {\n  /**\n   * @param {HTMLElement} container - The container element\n   * @param {Object} productDetails - Product-specific information\n   */\n  constructor(container, productDetails) {\n    this.container = container;\n    this.productDetails = productDetails;\n    this.isLaunched = false;\n\n    this.initialize();\n    this.validateProductDetails();\n  }\n\n  /**\n   * Initialize the chatbot components\n   * @private\n   */\n  initialize() {\n    // Initialize core\n    this.core = new ChatbotCore({\n      type: \"section\",\n      endpoint:\n        \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\",\n      userID: this.generateSessionId(),\n    });\n\n    // Initialize UI\n    this.ui = new SectionChatbotUI({\n      container: this.container,\n      eventBus: this.core.eventBus,\n      type: \"section\",\n      productDetails: this.productDetails,\n    });\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Generate a session ID for this instance\n   * @private\n   * @returns {string}\n   */\n  generateSessionId() {\n    return `section_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate required product details\n   * @private\n   */\n  validateProductDetails() {\n    const requiredFields = [\"title\", \"capacity\"];\n    const missingFields = requiredFields.filter(\n      (field) => !this.productDetails[field]\n    );\n\n    if (missingFields.length > 0) {\n      console.error(\n        \"Missing required product details:\",\n        missingFields.join(\", \")\n      );\n      this.ui.displayError(\n        \"Some product information is missing. Chat functionality may be limited.\"\n      );\n    }\n  }\n\n  /**\n   * Set up event listeners\n   * @private\n   */\n  setupEventListeners() {\n    // Handle device answers\n    this.core.eventBus.on(\"deviceAnswer\", (payload) => {\n      this.handleDeviceAnswer(payload);\n    });\n\n    // Handle input focus for launch\n    const input = this.container.querySelector(\".chat-input\");\n    if (input) {\n      input.addEventListener(\"focus\", () => {\n        if (!this.isLaunched) {\n          this.launch();\n        }\n      });\n    }\n  }\n\n  /**\n   * Launch the chatbot with product context\n   * @public\n   */\n  async launch() {\n    if (this.isLaunched) {\n      console.log(\"Section chatbot already launched\");\n      return;\n    }\n\n    try {\n      const sanitizedDetails = this.sanitizeProductDetails();\n      await this.core.sendLaunch({\n        action: {\n          type: \"launch\",\n          payload: {\n            startBlock: \"shopifySection\",\n            powerStationDetails: sanitizedDetails,\n          },\n        },\n      });\n      this.isLaunched = true;\n    } catch (error) {\n      console.error(\"Error launching section chatbot:\", error);\n      this.ui.displayError(\"Failed to start the chat. Please try again.\");\n    }\n  }\n\n  /**\n   * Handle device answer traces\n   * @private\n   * @param {Object} payload - Device answer payload\n   */\n  handleDeviceAnswer(payload) {\n    if (!payload || !payload.data) {\n      console.warn(\"Invalid device answer payload:\", payload);\n      return;\n    }\n\n    // Process device answer data\n    const processedData = this.processDeviceAnswerData(payload.data);\n    this.ui.updateDeviceAnswers(processedData);\n  }\n\n  /**\n   * Process device answer data for UI\n   * @private\n   * @param {Object} data - Raw device answer data\n   * @returns {Object} Processed data for UI\n   */\n  processDeviceAnswerData(data) {\n    return {\n      deviceName: data.deviceName || this.productDetails.title,\n      results: data.results || [],\n      recommendations: data.recommendations || [],\n      calculationDetails: data.calculationDetails || {},\n    };\n  }\n\n  /**\n   * Sanitize product details for API\n   * @private\n   * @returns {Object}\n   */\n  sanitizeProductDetails() {\n    return Object.entries(this.productDetails).reduce((acc, [key, value]) => {\n      acc[key] = value ? String(value).trim() : \"\";\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Clean up resources\n   * @public\n   */\n  destroy() {\n    this.core.destroy();\n    this.ui.destroy();\n  }\n}\n\nexport default SectionChatbot;\nwindow.sectionChatbot = sectionChatbot;\n"],"names":[],"mappings":"6BAqLA,OAAO,eAAiB"}