{"version":3,"file":"chatbot-section.CIfGYgtb.js","sources":["../frontend/entrypoints/chatbot-section.js"],"sourcesContent":["// section-chatbot.js\n\nimport { ChatbotCore } from \"./chatbot-core-file.js\";\n\nclass SectionChatbot extends HTMLElement {\n  constructor() {\n    super();\n    this.chatInitialized = false;\n    this.core = null;\n    this.messageContainer = null;\n    this.typingIndicator = null;\n    this.applicationsGrid = null;\n  }\n\n  connectedCallback() {\n    this.initialize();\n  }\n\n  initialize() {\n    console.log(\"SectionChatbot initializing\");\n    this.initializeElements();\n    this.setupEventListeners();\n    this.loadSavedDevices();\n    this.setupViewMoreButton();\n  }\n\n  initializeElements() {\n    console.log(\"SectionChatbot initializeElements called\");\n    this.messageContainer = this.querySelector(\"#messageContainer\");\n    this.typingIndicator = this.querySelector(\".chat-typing\");\n    this.applicationsGrid = this.querySelector(\".applications-grid\");\n\n    if (!this.messageContainer || !this.typingIndicator) {\n      console.error(\"Required DOM elements not found\");\n    }\n  }\n\n  setupEventListeners() {\n    if (this.eventListenersAttached) return;\n\n    console.log(\"SectionChatbot setupEventListeners called\");\n    const form = this.querySelector(\"#chatForm\");\n    const input = this.querySelector(\"#userInput\");\n\n    if (!form || !input) {\n      console.error(\"Chat form or input not found\");\n      return;\n    }\n\n    // Initialize chat when user focuses on the input\n    input.addEventListener(\"focus\", async () => {\n      console.log(\"Input focused, initializing chat if needed\");\n      await this.initializeChatIfNeeded();\n    });\n\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const message = input.value.trim();\n      if (message) {\n        console.log(\"Form submitted with message:\", message);\n        input.value = \"\"; // Clear the input field immediately\n        await this.initializeChatIfNeeded(); // Ensure chat is initialized\n        await this.handleUserMessage(message);\n      }\n    });\n\n    this.eventListenersAttached = true;\n  }\n\n  async initializeChatIfNeeded() {\n    if (!this.chatInitialized) {\n      console.log(\"Initializing section chatbot\");\n      const config = {\n        proxyEndpoint:\n          \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\", // Update to Gadget's streaming endpoint\n        userIDPrefix: \"sectionChatbot\",\n      };\n      this.core = new ChatbotCore(config);\n      this.core.setDOMElements(\n        this.messageContainer,\n        this.typingIndicator,\n        this\n      );\n      this.core.on(\"message\", this.handleMessage.bind(this));\n      this.core.on(\"typing\", this.handleTyping.bind(this));\n      this.core.on(\"updateMessage\", this.handleUpdateMessage.bind(this));\n      await this.sendLaunch();\n      this.chatInitialized = true;\n    }\n  }\n\n  async handleUserMessage(message) {\n    this.core.addMessage(\"user\", message);\n    this.core.conversationHistory.push({ type: \"user\", message: message });\n    this.core.saveConversationToStorage();\n    this.core.showTypingIndicator();\n    try {\n      await this.core.sendMessage(message);\n    } catch (error) {\n      console.error(\"Error in send message:\", error);\n    } finally {\n      this.core.hideTypingIndicator();\n      this.core.scrollToBottom();\n    }\n  }\n\n  async handleAgentResponse(response) {\n    // Not needed as ChatbotCore emits events handled via callbacks\n  }\n\n  handleMessage({ sender, content }) {\n    this.core.addMessage(sender, content);\n  }\n\n  handleTyping(isTyping) {\n    if (isTyping) {\n      this.core.showTypingIndicator();\n    } else {\n      this.core.hideTypingIndicator();\n    }\n  }\n\n  handleUpdateMessage(content) {\n    this.core.updateLatestMessage(content);\n  }\n\n  handleDeviceAnswer(deviceAnswer) {\n    console.log(\"Handling device answer:\", deviceAnswer);\n    let devices = Array.isArray(deviceAnswer)\n      ? deviceAnswer\n      : deviceAnswer.devices;\n\n    if (!Array.isArray(devices)) {\n      console.error(\"Invalid devices data:\", devices);\n      return;\n    }\n\n    devices.forEach((device) => {\n      console.log(\"Processing device:\", device);\n      const { name, estimatedRuntime } = device;\n      this.saveDeviceEstimate({ name, estimatedRuntime });\n      const card = this.createDeviceCard(device);\n      this.insertCard(card);\n    });\n\n    try {\n      this.updateDevicesView();\n    } catch (error) {\n      console.error(\"Error in updateDevicesView:\", error);\n    }\n  }\n\n  formatRuntime(runtime) {\n    const totalHours = parseFloat(runtime.value);\n    if (totalHours >= 1) {\n      const wholeHours = Math.floor(totalHours);\n      const remainingMinutes = Math.round((totalHours - wholeHours) * 60);\n\n      const hourText = `${wholeHours} ${wholeHours === 1 ? \"hour\" : \"hours\"}`;\n      if (remainingMinutes === 0) {\n        return hourText;\n      }\n      return `${hourText} ${remainingMinutes} minutes`;\n    } else {\n      const minutes = Math.round(totalHours * 60);\n      return `${minutes} minutes`;\n    }\n  }\n\n  createDeviceCard(device) {\n    const formattedRuntime = this.formatRuntime(device.estimatedRuntime);\n    const card = document.createElement(\"div\");\n    card.className = \"application-card chatbot-card\";\n    card.innerHTML = `\n      <div class=\"application-card__image\">\n        ðŸš€ <!-- SVG Placeholder -->\n      </div>\n      <div class=\"application-card__content\">\n        <div class=\"application-card__title\">${device.name}</div>\n        <div class=\"application-card__runtime\">\n          ${formattedRuntime}\n        </div>\n      </div>\n    `;\n    return card;\n  }\n\n  insertCard(card) {\n    this.applicationsGrid = this.querySelector(\".applications-grid\");\n    if (!this.applicationsGrid) {\n      console.error(\"Applications grid not found when inserting card\");\n      return;\n    }\n\n    const firstChatbotCard = this.applicationsGrid.querySelector(\n      \".application-card.chatbot-card\"\n    );\n    if (firstChatbotCard) {\n      this.applicationsGrid.insertBefore(card, firstChatbotCard);\n    } else {\n      this.applicationsGrid.appendChild(card);\n    }\n  }\n\n  saveDeviceEstimate(device) {\n    const key = `${this.getAttribute(\"product-title\")}_devices`;\n    let devices = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n    const existingIndex = devices.findIndex((d) => d.name === device.name);\n    if (existingIndex !== -1) {\n      devices.splice(existingIndex, 1);\n    }\n    devices.unshift(device);\n\n    localStorage.setItem(key, JSON.stringify(devices));\n  }\n\n  setupViewMoreButton() {\n    this.viewMoreButton = this.querySelector(\".view-more-button\");\n    if (this.viewMoreButton) {\n      this.viewMoreButton.addEventListener(\"click\", () =>\n        this.toggleDevicesView()\n      );\n    } else {\n      console.warn(\"View more button not found\");\n    }\n  }\n\n  toggleDevicesView() {\n    const allCards = this.applicationsGrid.querySelectorAll(\n      \".application-card.chatbot-card\"\n    );\n    const hiddenCards = Array.from(allCards).filter(\n      (card) => card.style.display === \"none\"\n    );\n\n    if (hiddenCards.length > 0) {\n      // Show all cards\n      hiddenCards.forEach((card) => (card.style.display = \"flex\"));\n      this.viewMoreButton.textContent = \"Hide\";\n    } else {\n      // Hide cards beyond the first two\n      Array.from(allCards)\n        .slice(2)\n        .forEach((card) => (card.style.display = \"none\"));\n      this.viewMoreButton.textContent = \"View More\";\n    }\n  }\n\n  updateDevicesView() {\n    console.log(\"Updating devices view\");\n    this.applicationsGrid = this.querySelector(\".applications-grid\");\n    if (!this.applicationsGrid) {\n      console.error(\"Applications grid not found\");\n      return;\n    }\n\n    console.log(\"Applications grid found:\", this.applicationsGrid);\n\n    const allCards = this.applicationsGrid.querySelectorAll(\n      \".application-card.chatbot-card\"\n    );\n    console.log(\"Number of cards found:\", allCards.length);\n\n    this.viewMoreButton = this.querySelector(\".view-more-button\");\n    const devicesPerPage = 2;\n\n    if (allCards.length > devicesPerPage) {\n      if (this.viewMoreButton) {\n        this.viewMoreButton.style.display = \"block\";\n        this.viewMoreButton.textContent = \"View More\";\n        console.log(\"View more button displayed\");\n      } else {\n        console.warn(\"View more button not found\");\n      }\n      allCards.forEach((card, index) => {\n        card.style.display = index < devicesPerPage ? \"flex\" : \"none\";\n      });\n    } else {\n      if (this.viewMoreButton) {\n        this.viewMoreButton.style.display = \"none\";\n        console.log(\"View more button hidden\");\n      } else {\n        console.warn(\"View more button not found\");\n      }\n    }\n  }\n\n  // Additional methods can be implemented as needed\n}\n\ncustomElements.define(\"section-chatbot\", SectionChatbot);\nconsole.log(\"SectionChatbot module loaded\");\n"],"names":["SectionChatbot","form","input","e","message","config","ChatbotCore","error","response","sender","content","isTyping","deviceAnswer","devices","device","name","estimatedRuntime","card","runtime","totalHours","wholeHours","remainingMinutes","hourText","formattedRuntime","firstChatbotCard","key","existingIndex","d","allCards","hiddenCards","devicesPerPage","index"],"mappings":"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"}