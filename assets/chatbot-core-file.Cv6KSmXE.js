console.log("Recent changes check : 3");console.log("ChatbotCore module loaded");class b{constructor(t){this.apiEndpoint=t.apiEndpoint,this.userID=this.generateUserID(t.userIDPrefix||"chatbot"),this.completionEvents=t.completionEvents||!1}generateUserID(t){const e=localStorage.getItem(`${t}_userID`);if(e)return e;const s=`${t}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return localStorage.setItem(`${t}_userID`,s),s}async streamInteract(t,e={}){const s=this.apiEndpoint,a=t.action?t:{userID:this.userID,action:t,config:{...e}};console.log("Sending streaming interact request to gadget endpoint:",a);const o=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json",Accept:"text/event-stream","Cache-Control":"no-cache",Connection:"keep-alive"},credentials:"include",cache:"no-store",body:JSON.stringify(a)});if(!o.ok){const i=await o.text();throw console.error("Stream request failed:",o.status,i),new Error(`HTTP error! status: ${o.status}, details: ${i}`)}if(!o.body)throw new Error("Response has no body");return o}async launch(t,e){const s={type:"launch",payload:{startBlock:t,powerStationDetails:e}};return this.streamInteract(s)}async sendUserMessage(t){const e={type:"text",payload:t};return this.streamInteract(e)}async sendEvent(t,e={}){const s={type:"event",payload:{event:{name:t,...e}}};return this.streamInteract(s)}}class m{constructor(t){this.messageContainer=null,this.typingIndicator=null,this.drawerBody=null,this.onButtonClick=null,this.rootElement=t}setDOMElements(t,e,s){console.log("Setting DOM elements in UIManager"),this.messageContainer=t,this.typingIndicator=e,this.drawerBody=s}setButtonClickHandler(t){this.onButtonClick=t}addMessage(t,e){if(console.log("[UI] Adding message:",{role:t,message:e}),!this.messageContainer||!this.rootElement)return console.error("[UI] Message container or root element not available"),null;this.hideTypingIndicator();try{const s=this.rootElement.ownerDocument,a=s.createElement("div");a.classList.add("message-wrapper",`message-wrapper--${t}`);const o=s.createElement("div");o.classList.add("message",`message--${t}`);const i=s.createElement("div");if(i.classList.add("message__content"),console.log("[UI] Processing message format:",typeof e,e),typeof e=="string")console.log("[UI] Adding string message"),i.innerHTML=this.formatMessage(e);else if(e.slate){console.log("[UI] Adding slate message:",e.slate);const n=e.slate.content.map(l=>l.children.map(r=>r.text).join("")).join(`
`);console.log("[UI] Extracted slate text:",n),i.innerHTML=this.formatMessage(n)}else if(e instanceof Element)console.log("[UI] Adding Element message"),i.appendChild(e);else if(e.message)console.log("[UI] Adding message object:",e.message),i.innerHTML=this.formatMessage(e.message);else return console.error("[UI] Unsupported message format:",e),null;return o.appendChild(i),a.appendChild(o),this.messageContainer.appendChild(a),console.log("[UI] Message added successfully"),this.scrollToBottom(),a}catch(s){return console.error("[UI] Error adding message:",s),console.error("[UI] Message that caused error:",e),null}}formatMessage(t){return t=t.replace(/\n/g,"<br>"),t=t.replace(/(https?:\/\/[^\s]+)/g,'<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'),t=t.split(/\n{2,}/).map(s=>s.startsWith("<h")||s.startsWith("<ul")||s.startsWith("<ol")||s.startsWith("<blockquote")||s.startsWith("<hr")||s.startsWith("<img")?s:`<p>${s}</p>`).join(`
`),t}addCarousel(t){if(!this.messageContainer){console.error("Message container not found when adding carousel");return}console.log("Adding carousel:",t);const e=this.rootElement.ownerDocument.createElement("div");e.className="carousel",e.innerHTML=`
      <div class="carousel__container">
        <!-- Carousel items will be dynamically added here -->
      </div>
      <button class="carousel__button carousel__button--left" aria-label="Previous slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="carousel__button carousel__button--right" aria-label="Next slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    `;const s=new w(e);t.cards.forEach((o,i)=>{const n=`
        <div class="carousel__item-wrapper">
          <div class="carousel__item-content">
            <img src="${o.imageUrl}" alt="${o.title}" class="carousel__item-image">
            <h6 class="carousel__item-title">${o.title}</h6>
            <p class="carousel__item-description">${o.description.text}</p>
            <button class="button carousel__item-button" data-button-index="${i}">${o.buttons[0].name}</button>
          </div>
        </div>
      `;s.addItem(n)}),e.querySelectorAll(".carousel__item-button").forEach((o,i)=>{o.addEventListener("click",()=>{const n=Math.floor(i/t.cards[0].buttons.length),l=i%t.cards[0].buttons.length,r=t.cards[n].buttons[l];e.remove(),this.onButtonClick&&this.onButtonClick(r)})}),this.messageContainer.appendChild(e),this.scrollToBottom()}addButtons(t){if(!this.messageContainer||!(t!=null&&t.length))return;const e=this.rootElement.ownerDocument,s=e.createElement("div");s.classList.add("buttons-wrapper"),t.forEach(a=>{const o=e.createElement("button");o.classList.add("chat-button"),o.textContent=a.name,o.addEventListener("click",()=>{this.onButtonClick&&this.onButtonClick(a)}),s.appendChild(o)}),this.addMessage("assistant",s)}showTypingIndicator(t="Sherpa Guide Is Typing..."){if(!this.typingIndicator){console.error("Typing indicator not found");return}const e=this.typingIndicator.querySelector("p");e&&(e.textContent=t),this.typingIndicator.style.display="flex",this.scrollToBottom()}hideTypingIndicator(){if(!this.typingIndicator){console.error("Typing indicator not found");return}this.typingIndicator.style.display="none"}addVisualImage(t){if(!this.messageContainer||!(t!=null&&t.image))return;const e=this.rootElement.ownerDocument.createElement("div");e.className="message";const s=this.rootElement.ownerDocument.createElement("div");s.className="message-content assistant-message";const a=this.rootElement.ownerDocument.createElement("div");a.className="logo-container";const o=this.rootElement.ownerDocument.createElement("div");o.className="logo-background",a.appendChild(o),s.appendChild(a);const i=this.rootElement.ownerDocument.createElement("div");i.className="visual-image-container";const n=this.rootElement.ownerDocument.createElement("img");n.src=t.image,n.alt=t.alt||"Visual response",n.className="visual-image",i.appendChild(n),s.appendChild(i),e.appendChild(s),this.messageContainer.appendChild(e),this.scrollToBottom()}scrollToBottom(){this.drawerBody&&setTimeout(()=>{this.drawerBody.scrollTop=this.drawerBody.scrollHeight},0)}clearMessages(){this.messageContainer&&(this.messageContainer.innerHTML="")}}class w{constructor(t){this.element=t,this.container=t.querySelector(".carousel__container"),this.leftButton=t.querySelector(".carousel__button--left"),this.rightButton=t.querySelector(".carousel__button--right"),this.items=[],this.currentIndex=0,this.mediaQuery=window.matchMedia("(min-width: 1000px)"),this.isDesktop=this.mediaQuery.matches,this.leftButton.addEventListener("click",()=>this.move("left")),this.rightButton.addEventListener("click",()=>this.move("right")),this.mediaQuery.addListener(this.handleMediaQueryChange.bind(this))}handleMediaQueryChange(t){this.isDesktop=t.matches,this.updatePosition(),this.updateVisibility()}addItem(t){const e=this.element.ownerDocument.createElement("div");e.classList.add("carousel__item"),e.appendChild(t),this.container.appendChild(e),this.items.push(e),this.updateVisibility()}move(t){const e=t==="left"?-1:1;this.currentIndex=Math.max(0,Math.min(this.currentIndex+e,this.items.length-1)),this.updatePosition(),this.updateVisibility()}updatePosition(){const t=this.isDesktop?-400:-300;this.container.style.transform=`translateX(${this.currentIndex*t}px)`}updateVisibility(){this.leftButton.style.visibility=this.currentIndex===0?"hidden":"visible",this.rightButton.style.visibility=this.currentIndex>=this.items.length-1?"hidden":"visible"}}class I{constructor(){this.currentReader=null,this.abortController=null}async handleStream(t,e){if(!t.body)throw new Error("No response body available for streaming");console.log("[Stream] Starting new stream processing"),this.closeCurrentStream(),this.abortController=new AbortController;const s=this.abortController.signal;try{this.currentReader=t.body.getReader();const a=new TextDecoder;let o="",i="";for(;!s.aborted;){const{done:n,value:l}=await this.currentReader.read();if(n){if(i){console.log("[Stream] Processing final buffer:",i);try{const c=JSON.parse(`[${i.replace(/}\s*{/g,"},{")}]`);console.log("[Stream] Parsed final events:",c);for(const u of c)await e.handleTrace(u)}catch(c){console.error("[Stream] Error processing final buffer:",c)}}console.log("[Stream] Stream complete");break}const r=a.decode(l,{stream:!0});console.log("[Stream] Received chunk:",r),o+=r;const d=o.split(`
`);o=d.pop()||"";for(const c of d)if(c.trim()!==""&&c.startsWith("data: ")){const u=c.slice(6);console.log("[Stream] Processing line:",u);try{const g=JSON.parse(u);console.log("[Stream] Successfully parsed single event:",g),await e.handleTrace(g)}catch{console.log("[Stream] Failed to parse as single event, buffering"),i+=(i?",":"")+u;try{const p=JSON.parse(`[${i}]`);console.log("[Stream] Successfully parsed buffered events:",p);for(const f of p)await e.handleTrace(f);i=""}catch{console.log("[Stream] Still accumulating buffer:",i)}}}}}catch(a){throw console.error("[Stream] Fatal stream processing error:",a),a}finally{this.closeCurrentStream()}}closeCurrentStream(){if(this.abortController&&(this.abortController.abort(),this.abortController=null),this.currentReader){try{this.currentReader.cancel()}catch(t){console.error("Error cancelling stream reader:",t)}this.currentReader=null}}}class y{constructor(t,e,s){this.ui=t,this.history=e,this.onSpecialTrace=s||(async()=>{}),this.completionBuffer="",this.lastMessageContainer=null,this.pendingMessages=[],this.processingTrace=!1}async handleTrace(t){var e,s,a,o,i;if(this.processingTrace){console.log("Already processing a trace, queueing:",t),this.pendingMessages.push(t);return}this.processingTrace=!0;try{if(console.log("[Trace] Handling trace event:",t.type,JSON.stringify(t,null,2)),!t.type){console.error("[Trace] Received event with no type:",t);return}if(!this.ui){console.error("[Trace] UI manager not available");return}if(!["text","choice","carousel","visual","waiting_text","RedirectToProduct","completion","end"].includes(t.type)){console.warn("[Trace] Ignoring unknown trace type:",t.type);return}switch(t.type){case"text":if(!t.payload){console.error("[Trace] Invalid text payload:",t.payload);return}console.log("[Trace] Processing text event:",JSON.stringify(t,null,2)),this.ui.hideTypingIndicator();try{if(typeof t.payload=="string")console.log("[Trace] Processing string payload:",t.payload),this.lastMessageContainer=this.ui.addMessage("assistant",t.payload);else if(t.payload.slate){console.log("[Trace] Processing slate payload:",t.payload.slate);const r=t.payload.slate.content.map(d=>(console.log("[Trace] Processing slate block:",d),d.children.map(c=>(console.log("[Trace] Processing slate child:",c),c.text)).join(""))).join(`
`);console.log("[Trace] Extracted text from slate:",r),this.lastMessageContainer=this.ui.addMessage("assistant",r),this.history&&this.history.updateHistory({type:"assistant",message:r})}else t.payload.message?(console.log("[Trace] Processing message payload:",t.payload.message),this.lastMessageContainer=this.ui.addMessage("assistant",t.payload.message),this.history&&this.history.updateHistory({type:"assistant",message:t.payload.message})):console.error("[Trace] Unsupported text payload format:",t.payload)}catch(r){console.error("[Trace] Error processing text event:",r),console.error("[Trace] Event that caused error:",t)}break;case"waiting_text":console.log("[Trace] Showing typing indicator:",t.payload),this.ui.showTypingIndicator(t.payload);break;case"choice":if(!Array.isArray((e=t.payload)==null?void 0:e.buttons)){console.error("[Trace] Invalid choice payload:",t.payload);return}this.ui.hideTypingIndicator(),console.log("[Trace] Adding choice buttons:",t.payload.buttons),this.ui.addButtons(t.payload.buttons),this.history&&this.history.updateHistory({type:"choice",buttons:t.payload.buttons});break;case"carousel":this.ui.hideTypingIndicator(),console.log("[Trace] Adding carousel:",t.payload),this.ui.addCarousel(t.payload),this.history&&this.history.updateHistory({type:"carousel",cards:t.payload.cards});break;case"visual":((s=t.payload)==null?void 0:s.visualType)==="image"&&(this.ui.hideTypingIndicator(),console.log("[Trace] Adding visual image:",t.payload),this.ui.addVisualImage(t.payload),this.history&&this.history.updateHistory({type:"visual",data:t.payload}));break;case"RedirectToProduct":const l=(o=(a=t.payload)==null?void 0:a.body)==null?void 0:o.productHandle;l&&(console.log("[Trace] Redirecting to product:",l),await this.onSpecialTrace({type:"RedirectToProduct",productHandle:l}));break;case"completion":if(!((i=t.payload)!=null&&i.state)){console.error("[Trace] Invalid completion payload:",t.payload);return}t.payload.state==="start"?(this.completionBuffer="",this.ui.showTypingIndicator()):t.payload.state==="content"?(this.completionBuffer+=t.payload.content||"",this.lastMessageContainer?this.ui.updateMessage(this.lastMessageContainer,this.completionBuffer):this.lastMessageContainer=this.ui.addMessage("assistant",this.completionBuffer)):t.payload.state==="end"&&(this.ui.hideTypingIndicator(),this.history&&this.history.updateHistory({type:"assistant",message:this.completionBuffer}));break;case"end":console.log("[Trace] Stream ended"),this.ui.hideTypingIndicator();break}}catch(n){console.error("[Trace] Error handling trace:",n),console.error("[Trace] Event that caused error:",t),this.ui.hideTypingIndicator()}finally{if(this.processingTrace=!1,this.pendingMessages.length>0){const n=this.pendingMessages.shift();await this.handleTrace(n)}}}restoreHistory(){const t=this.history.getHistory();if(t.length===0)return;t.forEach(s=>{(s.type==="assistant"||s.type==="user")&&this.ui.addMessage(s.type,s.message)});const e=t[t.length-1];e.type==="choice"?this.ui.addButtons(e.buttons):e.type==="carousel"&&this.ui.addCarousel(e),this.ui.scrollToBottom()}}class C{constructor(){this.conversationHistory=[],this.hasLaunched=localStorage.getItem("chatHasLaunched")==="true"}updateHistory(t){console.log("Updating conversation history with:",t),this.conversationHistory.push(t),this.saveToStorage()}saveToStorage(){try{localStorage.setItem("chatHistory",JSON.stringify(this.conversationHistory)),localStorage.setItem("chatHasLaunched","true")}catch(t){console.error("Error saving conversation to storage:",t)}}loadFromStorage(){try{const t=localStorage.getItem("chatHistory");t&&(this.conversationHistory=JSON.parse(t))}catch(t){console.error("Error loading conversation from storage:",t),this.conversationHistory=[]}}clearHistory(){this.conversationHistory=[],localStorage.removeItem("chatHistory"),localStorage.removeItem("chatHasLaunched")}getHistory(){return this.conversationHistory}hasHistory(){return this.hasLaunched}}console.log("WOLLLOPPPP");class T{constructor(t){console.log("ChatbotBase constructor called with config:",t),this.config={isSection:!1,...t},this.storagePrefix=this.config.isSection?"section_":"main_",this.ui=new m(null),this.history=new C(this.storagePrefix),this.api=new b({apiEndpoint:this.config.apiEndpoint,userIDPrefix:this.config.userIDPrefix,completionEvents:this.config.completionEvents||!1}),this.stream=new I,this.traceHandler=new y(this.ui,this.history,this.handleSpecialTrace.bind(this)),this.ui.setButtonClickHandler(this.handleButtonClick.bind(this)),this.sendMessage=this.sendMessage.bind(this),this.handleButtonClick=this.handleButtonClick.bind(this),this.history.hasHistory()&&this.history.loadFromStorage()}set element(t){this._element=t,this.ui.rootElement=t}get element(){return this._element}setDOMElements(t,e,s){if(console.log("Setting DOM elements in ChatbotBase"),!this._element){console.error("Element reference not set in ChatbotBase");return}this.ui=new m(this._element),this.ui.setDOMElements(t,e,s),this.traceHandler=new y(this.ui,this.history,this.handleSpecialTrace.bind(this)),this.ui.setButtonClickHandler(this.handleButtonClick.bind(this))}async initializeChatIfNeeded(){this.isSectionChatbot()||(this.history.hasHistory()?(console.log("Chat history found, displaying saved conversation..."),this.displaySavedConversation()):(console.log("No chat history found, sending launch request..."),await this.sendLaunch("","{}"),this.history.hasLaunched=!0,localStorage.setItem(`${this.storagePrefix}chatHasLaunched`,"true")))}isSectionChatbot(){return this.config.isSection||this.element.classList.contains("section-chatbot")}displaySavedConversation(){const t=this.history.getHistory();if(!t||t.length===0)return;this.ui.messageContainer.innerHTML="";for(let s of t)(s.type==="user"||s.type==="assistant")&&this.ui.addMessage(s.type,s.message);const e=t[t.length-1];if(e)switch(e.type){case"choice":this.ui.addButtons(e.buttons);break;case"carousel":this.ui.addCarousel({cards:e.cards});break}this.ui.scrollToBottom()}async sendLaunch(t="",e="{}"){console.log("Sending launch request with:",{startBlock:t,productDetails:e});try{const s=await this.api.streamInteract({type:"launch",payload:{startBlock:t,powerStationDetails:e}});await this.stream.handleStream(s,this.traceHandler)}catch(s){console.error("Error in sendLaunch:",s),this.ui.addMessage("assistant","I apologize, but I encountered an error. Please try again.")}}async sendMessage(t){try{this.isSectionChatbot()||this.history.updateHistory({type:"user",message:t}),this.ui.addMessage("user",t);const e=await this.api.sendUserMessage(t);await this.stream.handleStream(e,this.traceHandler)}catch(e){console.error("Error in sendMessage:",e),this.ui.addMessage("assistant","I apologize, but I encountered an error processing your message. Please try again.")}}async handleButtonClick(t){try{this.isSectionChatbot()||this.history.updateHistory({type:"user",message:t.name}),this.ui.addMessage("user",t.name);const e=await this.api.streamInteract(t.request);await this.stream.handleStream(e,this.traceHandler)}catch(e){console.error("Error in handleButtonClick:",e),this.ui.addMessage("assistant","I apologize, but I encountered an error processing your selection. Please try again.")}}async handleSpecialTrace(t){if(t.type==="RedirectToProduct"){const e=t.productHandle;if(e){const a=`https://www.sherpapower.co.uk/products/${encodeURIComponent(e)}`;console.log(`Redirecting to product page: ${a}`),window.location.href=a}}}async jumpToMainMenu(){console.log("MainChatbot jumpToMainMenu called"),this.ui.showTypingIndicator("Returning to main menu...");try{const t=await this.api.streamInteract({action:{type:"event",payload:{event:{name:"main_menu"}}}});console.log("Main menu response received:",t),await this.stream.handleStream(t,this.traceHandler),console.log("Finished processing main menu stream")}catch(t){console.error("Error in jumpToMainMenu:",t),this.ui.addMessage("assistant","Sorry, I couldn't navigate to the main menu. Please try again.")}finally{this.ui.hideTypingIndicator(),this.ui.scrollToBottom()}}updateHistory(t){this.isSectionChatbot()||this.history.updateHistory(t)}}if(!customElements.get("main-chatbot")){class h extends HTMLElement{constructor(){super(),console.log("MainChatbotElement constructor called");const s={apiEndpoint:this.getAttribute("api-endpoint")||"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-new",userIDPrefix:"mainChatbot",isSection:!1};this.chatbotBase=new T(s),this.chatbotBase.element=this}connectedCallback(){console.log("MainChatbotElement connected"),this.initialize()}initialize(){this.initialized||(console.log("Initializing MainChatbotElement"),this.initializeElements(),this.setupEventListeners(),this.chatbotBase.initializeChatIfNeeded(),this.initialized=!0)}initializeElements(){console.log("Initializing elements for MainChatbot");const e=this.closest(".drawer.sherpa-guide");if(!e){console.error("Could not find drawer container");return}if(this.backToStartButton=e.querySelector(".back-to-start"),console.log("Back to start button found:",this.backToStartButton),this.messageContainer=this.querySelector(".message-container"),this.typingIndicator=this.querySelector(".chat-typing"),this.drawerBody=e.querySelector(".drawer-body")||e,this.chatInput=this.querySelector("#userInput"),this.chatForm=this.querySelector("#chatForm"),this.sendButton=this.querySelector("button[type='submit']"),!this.chatForm||!this.chatInput||!this.sendButton){console.error("Required chat elements not found:",{form:this.chatForm,input:this.chatInput,button:this.sendButton});return}console.log("Chat elements found:",{form:this.chatForm,input:this.chatInput,button:this.sendButton,backToStart:this.backToStartButton}),this.chatbotBase.setDOMElements(this.messageContainer,this.typingIndicator,this.drawerBody)}setupEventListeners(){if(!this.eventListenersAttached){if(this.chatInput&&this.sendButton){const e=this.chatInput.closest("form");e&&(console.log("Form found:",e),e.addEventListener("submit",async s=>{s.preventDefault(),s.stopPropagation(),await this.handleUserInput()})),this.chatInput.addEventListener("keypress",async s=>{s.key==="Enter"&&!s.shiftKey&&(s.preventDefault(),s.stopPropagation(),await this.handleUserInput())}),this.sendButton.addEventListener("click",async s=>{s.preventDefault(),s.stopPropagation(),await this.handleUserInput()})}this.backToStartButton?(console.log("Setting up back-to-start button click listener"),this.backToStartButton.addEventListener("click",()=>{console.log("Main menu button clicked!"),this.jumpToMainMenu()})):(console.warn("Back to start button not found - will try again later"),setTimeout(()=>{const e=this.querySelector(".back-to-start");e?(console.log("Found back-to-start button after delay"),e.addEventListener("click",()=>{console.log("Main menu button clicked!"),this.jumpToMainMenu()})):console.error("Back to start button still not found after delay")},1e3)),this.messageContainer&&this.messageContainer.addEventListener("click",async e=>{const s=e.target.closest(".chat-button");if(s){const a=JSON.parse(s.dataset.buttonData);await this.chatbotBase.handleButtonClick(a)}}),this.eventListenersAttached=!0}}async handleUserInput(){const e=this.chatInput.value.trim();if(e){this.chatInput.value="",this.chatInput.disabled=!0;try{await this.chatbotBase.sendMessage(e)}catch(s){console.error("Error sending message:",s),this.chatbotBase.ui.addMessage("assistant","Sorry, there was an error sending your message. Please try again.")}finally{this.chatInput.disabled=!1,this.chatInput.focus()}}}async jumpToMainMenu(){console.log("MainChatbotElement jumpToMainMenu called");const e="Main Menu";this.chatbotBase.ui.addMessage("user",e),this.chatbotBase.history.updateHistory({type:"user",message:e});try{this.chatbotBase.ui.showTypingIndicator("Returning to main menu...");const s=await this.chatbotBase.api.streamInteract({type:"event",payload:{event:{name:"main_menu"}}});console.log("Main menu response received:",s),await this.chatbotBase.stream.handleStream(s,this.chatbotBase.traceHandler),console.log("Finished processing main menu stream")}catch(s){console.error("Error in jumpToMainMenu:",s),this.chatbotBase.ui.addMessage("assistant","Sorry, I couldn't navigate to the main menu. Please try again.")}finally{this.chatbotBase.ui.hideTypingIndicator(),this.chatbotBase.ui.scrollToBottom()}}}customElements.define("main-chatbot",h)}export{b as A,T as C,C as H,I as S,y as T,m as U,w as a};
//# sourceMappingURL=chatbot-core-file.Cv6KSmXE.js.map
