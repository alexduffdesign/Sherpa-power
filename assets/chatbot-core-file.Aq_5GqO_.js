console.log("Recent changes check : 3");console.log("ChatbotCore module loaded");class p{constructor(t){this.apiEndpoint=t.apiEndpoint,this.userID=this.generateUserID(t.userIDPrefix||"chatbot"),this.completionEvents=t.completionEvents||!1}generateUserID(t){const e=localStorage.getItem(`${t}_userID`);if(e)return e;const s=`${t}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return localStorage.setItem(`${t}_userID`,s),s}async streamInteract(t,e={}){const s=this.apiEndpoint,i=t.action?t:{userID:this.userID,action:t,config:{...e}};console.log("Sending streaming interact request to gadget endpoint:",i);const o=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json",Accept:"text/event-stream"},body:JSON.stringify(i)});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return o}async launch(t,e){const s={type:"launch",payload:{startBlock:t,powerStationDetails:e}};return this.streamInteract(s)}async sendUserMessage(t){const e={type:"text",payload:t};return this.streamInteract(e)}async sendEvent(t,e={}){const s={type:"event",payload:{event:{name:t,...e}}};return this.streamInteract(s)}}class d{constructor(t){this.messageContainer=null,this.typingIndicator=null,this.drawerBody=null,this.onButtonClick=null,this.rootElement=t}setDOMElements(t,e,s){console.log("Setting DOM elements in UIManager"),this.messageContainer=t,this.typingIndicator=e,this.drawerBody=s}setButtonClickHandler(t){this.onButtonClick=t}addMessage(t,e){if(!this.messageContainer||!this.rootElement){console.error("Message container or root element not available");return}const s=this.rootElement.ownerDocument,i=s.createElement("div");i.classList.add("message-wrapper",`message-wrapper--${t}`);const o=s.createElement("div");o.classList.add("message",`message--${t}`);const n=s.createElement("div");n.classList.add("message__content"),typeof e=="string"?n.innerHTML=this.formatMessage(e):n.appendChild(e),o.appendChild(n),i.appendChild(o),this.messageContainer.appendChild(i),this.scrollToBottom()}formatMessage(t){return t=t.replace(/\n/g,"<br>"),t=t.replace(/(https?:\/\/[^\s]+)/g,'<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'),t=t.split(/\n{2,}/).map(s=>s.startsWith("<h")||s.startsWith("<ul")||s.startsWith("<ol")||s.startsWith("<blockquote")||s.startsWith("<hr")||s.startsWith("<img")?s:`<p>${s}</p>`).join(`
`),t}addCarousel(t){if(!this.messageContainer){console.error("Message container not found when adding carousel");return}console.log("Adding carousel:",t);const e=this.rootElement.ownerDocument.createElement("div");e.className="carousel",e.innerHTML=`
      <div class="carousel__container">
        <!-- Carousel items will be dynamically added here -->
      </div>
      <button class="carousel__button carousel__button--left" aria-label="Previous slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="carousel__button carousel__button--right" aria-label="Next slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    `;const s=new m(e);t.cards.forEach((o,n)=>{const a=`
        <div class="carousel__item-wrapper">
          <div class="carousel__item-content">
            <img src="${o.imageUrl}" alt="${o.title}" class="carousel__item-image">
            <h6 class="carousel__item-title">${o.title}</h6>
            <p class="carousel__item-description">${o.description.text}</p>
            <button class="button carousel__item-button" data-button-index="${n}">${o.buttons[0].name}</button>
          </div>
        </div>
      `;s.addItem(a)}),e.querySelectorAll(".carousel__item-button").forEach((o,n)=>{o.addEventListener("click",()=>{const a=Math.floor(n/t.cards[0].buttons.length),l=n%t.cards[0].buttons.length,r=t.cards[a].buttons[l];e.remove(),this.onButtonClick&&this.onButtonClick(r)})}),this.messageContainer.appendChild(e),this.scrollToBottom()}addButtons(t){if(!this.messageContainer||!(t!=null&&t.length))return;const e=this.rootElement.ownerDocument,s=e.createElement("div");s.classList.add("buttons-wrapper"),t.forEach(i=>{const o=e.createElement("button");o.classList.add("chat-button"),o.textContent=i.name,o.addEventListener("click",()=>{this.onButtonClick&&this.onButtonClick(i)}),s.appendChild(o)}),this.addMessage("assistant",s)}showTypingIndicator(){this.typingIndicator?(this.typingIndicator.style.display="flex",this.scrollToBottom()):console.error("Message container not found when adding buttons")}removeButtons(){this.messageContainer.querySelectorAll(".button-container").forEach(e=>e.remove())}addVisualImage(t){if(!this.messageContainer||!(t!=null&&t.image))return;const e=this.rootElement.ownerDocument.createElement("div");e.className="message";const s=this.rootElement.ownerDocument.createElement("div");s.className="message-content assistant-message";const i=this.rootElement.ownerDocument.createElement("div");i.className="logo-container";const o=this.rootElement.ownerDocument.createElement("div");o.className="logo-background",i.appendChild(o),s.appendChild(i);const n=this.rootElement.ownerDocument.createElement("div");n.className="visual-image-container";const a=this.rootElement.ownerDocument.createElement("img");a.src=t.image,a.alt=t.alt||"Visual response",a.className="visual-image",n.appendChild(a),s.appendChild(n),e.appendChild(s),this.messageContainer.appendChild(e),this.scrollToBottom()}showTypingIndicator(t="Sherpa Guide Is Typing..."){if(!this.typingIndicator)return;const e=this.typingIndicator.querySelector("p");e&&(e.textContent=t),this.typingIndicator.style.display="flex",this.scrollToBottom()}hideTypingIndicator(){this.typingIndicator&&(this.typingIndicator.style.display="none")}scrollToBottom(){this.drawerBody&&setTimeout(()=>{this.drawerBody.scrollTop=this.drawerBody.scrollHeight},0)}clearMessages(){this.messageContainer&&(this.messageContainer.innerHTML="")}}class m{constructor(t){this.element=t,this.container=t.querySelector(".carousel__container"),this.leftButton=t.querySelector(".carousel__button--left"),this.rightButton=t.querySelector(".carousel__button--right"),this.items=[],this.currentIndex=0,this.mediaQuery=window.matchMedia("(min-width: 1000px)"),this.isDesktop=this.mediaQuery.matches,this.leftButton.addEventListener("click",()=>this.move("left")),this.rightButton.addEventListener("click",()=>this.move("right")),this.mediaQuery.addListener(this.handleMediaQueryChange.bind(this))}handleMediaQueryChange(t){this.isDesktop=t.matches,this.updatePosition(),this.updateVisibility()}addItem(t){const e=this.element.ownerDocument.createElement("div");e.classList.add("carousel__item"),e.appendChild(t),this.container.appendChild(e),this.items.push(e),this.updateVisibility()}move(t){const e=t==="left"?-1:1;this.currentIndex=Math.max(0,Math.min(this.currentIndex+e,this.items.length-1)),this.updatePosition(),this.updateVisibility()}updatePosition(){const t=this.isDesktop?-400:-300;this.container.style.transform=`translateX(${this.currentIndex*t}px)`}updateVisibility(){this.leftButton.style.visibility=this.currentIndex===0?"hidden":"visible",this.rightButton.style.visibility=this.currentIndex>=this.items.length-1?"hidden":"visible"}}class g{constructor(){this.currentStream=null}async handleStream(t,e){if(!t.body)throw new Error("No response body available for streaming");const s=t.body.getReader(),i=new TextDecoder;let o="";try{for(;;){const{done:n,value:a}=await s.read();if(n)break;o+=i.decode(a,{stream:!0});const l=o.split(`
`);o=l.pop()||"";for(const r of l)if(r.trim()!==""&&r.startsWith("data: ")){const u=r.slice(6);try{const h=JSON.parse(u);await e.handleTrace(h)}catch(h){console.error("Error parsing stream data:",h,r)}}}if(o){const n=o.split(`
`);for(const a of n){if(a.trim()===""||!a.startsWith("data: "))continue;const l=a.slice(6);try{const r=JSON.parse(l);await e.handleTrace(r)}catch(r){console.error("Error parsing remaining stream data:",r)}}}}catch(n){throw console.error("Error reading stream:",n),n}}closeCurrentStream(){this.currentStream&&(this.currentStream.cancel(),this.currentStream=null)}}class y{constructor(t,e,s){this.ui=t,this.history=e,this.onSpecialTrace=s||(async()=>{}),this.completionBuffer="",this.lastMessageContainer=null}async handleTrace(t){var s,i;if(console.log("Handling trace event:",t.type,t),!t.type){console.error("Received event with no type:",t);return}if(!["text","choice","carousel","visual","waiting_text","RedirectToProduct","completion","end"].includes(t.type)){console.warn("Ignoring unknown trace type:",t.type);return}switch(t.type){case"text":console.log("Adding text message:",t.payload.message),this.lastMessageContainer=this.ui.addMessage("assistant",t.payload.message),this.history.updateHistory({type:"assistant",message:t.payload.message});break;case"choice":console.log("Adding choice buttons:",t.payload.buttons),this.ui.addButtons(t.payload.buttons),this.history.updateHistory({type:"choice",buttons:t.payload.buttons});break;case"carousel":console.log("Adding carousel:",t.payload),this.ui.addCarousel(t.payload),this.history.updateHistory({type:"carousel",cards:t.payload.cards});break;case"visual":t.payload.visualType==="image"&&(console.log("Adding visual image:",t.payload),this.ui.addVisualImage(t.payload),this.history.updateHistory({type:"visual",data:t.payload}));break;case"waiting_text":console.log("Showing typing indicator:",t.payload),this.ui.showTypingIndicator(t.payload);break;case"RedirectToProduct":const o=(i=(s=t.payload)==null?void 0:s.body)==null?void 0:i.productHandle;o&&(console.log("Redirecting to product:",o),await this.onSpecialTrace({type:"RedirectToProduct",productHandle:o}));break;case"completion":console.log("Handling completion state:",t.payload.state),t.payload.state==="start"?this.completionBuffer="":t.payload.state==="content"?(this.completionBuffer+=t.payload.content,this.ui.updateLatestAssistantMessage(this.completionBuffer)):t.payload.state==="end"&&this.history.updateHistory({type:"assistant",message:this.completionBuffer});break;case"end":console.log("End of trace event"),this.lastMessageContainer=null;break;default:console.log("Unknown trace type:",t.type);break}this.ui.scrollToBottom()}restoreHistory(){const t=this.history.getHistory();if(t.length===0)return;t.forEach(s=>{(s.type==="assistant"||s.type==="user")&&this.ui.addMessage(s.type,s.message)});const e=t[t.length-1];e.type==="choice"?this.ui.addButtons(e.buttons):e.type==="carousel"&&this.ui.addCarousel(e),this.ui.scrollToBottom()}}class f{constructor(){this.conversationHistory=[],this.hasLaunched=localStorage.getItem("chatHasLaunched")==="true"}updateHistory(t){console.log("Updating conversation history with:",t),this.conversationHistory.push(t),this.saveToStorage()}saveToStorage(){try{localStorage.setItem("chatHistory",JSON.stringify(this.conversationHistory)),localStorage.setItem("chatHasLaunched","true")}catch(t){console.error("Error saving conversation to storage:",t)}}loadFromStorage(){try{const t=localStorage.getItem("chatHistory");t&&(this.conversationHistory=JSON.parse(t))}catch(t){console.error("Error loading conversation from storage:",t),this.conversationHistory=[]}}clearHistory(){this.conversationHistory=[],localStorage.removeItem("chatHistory"),localStorage.removeItem("chatHasLaunched")}getHistory(){return this.conversationHistory}hasHistory(){return this.hasLaunched}}console.log("WOLLLOPPPP");class b{constructor(t){console.log("ChatbotBase constructor called with config:",t),this.config={isSection:!1,...t},this.storagePrefix=this.config.isSection?"section_":"main_",this.ui=new d(null),this.history=new f(this.storagePrefix),this.api=new p({apiEndpoint:this.config.apiEndpoint,userIDPrefix:this.config.userIDPrefix,completionEvents:this.config.completionEvents||!1}),this.stream=new g,this.traceHandler=new y(this.ui,this.history,this.handleSpecialTrace.bind(this)),this.ui.setButtonClickHandler(this.handleButtonClick.bind(this)),this.sendMessage=this.sendMessage.bind(this),this.handleButtonClick=this.handleButtonClick.bind(this),this.history.hasHistory()&&this.history.loadFromStorage()}set element(t){this._element=t,this.ui.rootElement=t}get element(){return this._element}setDOMElements(t,e,s){if(console.log("Setting DOM elements in ChatbotBase"),!this._element){console.error("Element reference not set in ChatbotBase");return}this.ui=new d(this._element),this.ui.setDOMElements(t,e,s),this.ui.setButtonClickHandler(this.handleButtonClick.bind(this))}async initializeChatIfNeeded(){this.isSectionChatbot()||(this.history.hasHistory()?(console.log("Chat history found, displaying saved conversation..."),this.displaySavedConversation()):(console.log("No chat history found, sending launch request..."),await this.sendLaunch("","{}"),this.history.hasLaunched=!0,localStorage.setItem(`${this.storagePrefix}chatHasLaunched`,"true")))}isSectionChatbot(){return this.config.isSection||this.element.classList.contains("section-chatbot")}displaySavedConversation(){const t=this.history.getHistory();if(!t||t.length===0)return;this.ui.messageContainer.innerHTML="";for(let s of t)(s.type==="user"||s.type==="assistant")&&this.ui.addMessage(s.type,s.message);const e=t[t.length-1];if(e)switch(e.type){case"choice":this.ui.addButtons(e.buttons);break;case"carousel":this.ui.addCarousel({cards:e.cards});break}this.ui.scrollToBottom()}async sendLaunch(t="",e="{}"){return console.log("Sending launch request with:",{startBlock:t,productDetails:e}),await this.api.streamInteract({type:"launch",payload:{startBlock:t,powerStationDetails:e}})}async sendMessage(t){return this.isSectionChatbot()||this.history.updateHistory({type:"user",message:t}),this.ui.addMessage("user",t),this.api.sendUserMessage(t)}async handleButtonClick(t){return this.isSectionChatbot()||this.history.updateHistory({type:"user",message:t.name}),this.ui.addMessage("user",t.name),this.api.streamInteract(t.request)}async handleSpecialTrace(t){if(t.type==="RedirectToProduct"){const e=t.productHandle;if(e){const i=`https://www.sherpapower.co.uk/products/${encodeURIComponent(e)}`;console.log(`Redirecting to product page: ${i}`),window.location.href=i}}}async jumpToMainMenu(){console.log("MainChatbot jumpToMainMenu called"),this.ui.showTypingIndicator("Returning to main menu...");try{const t=await this.api.streamInteract({action:{type:"event",payload:{event:{name:"main_menu"}}}});console.log("Main menu response received:",t),await this.stream.handleStream(t,this.traceHandler),console.log("Finished processing main menu stream")}catch(t){console.error("Error in jumpToMainMenu:",t),this.ui.addMessage("assistant","Sorry, I couldn't navigate to the main menu. Please try again.")}finally{this.ui.hideTypingIndicator(),this.ui.scrollToBottom()}}updateHistory(t){this.isSectionChatbot()||this.history.updateHistory(t)}}console.log("WOLLLOPPPP 2");if(!customElements.get("main-chatbot")){class c extends HTMLElement{constructor(){super(),console.log("MainChatbotElement constructor called");const s={apiEndpoint:this.getAttribute("api-endpoint")||"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-new",userIDPrefix:"mainChatbot",isSection:!1};this.chatbotBase=new b(s),this.chatbotBase.element=this}connectedCallback(){console.log("MainChatbotElement connected"),this.initialize()}initialize(){this.initialized||(console.log("Initializing MainChatbotElement"),this.initializeElements(),this.setupEventListeners(),this.chatbotBase.initializeChatIfNeeded(),this.initialized=!0)}initializeElements(){console.log("Initializing elements for MainChatbot");const e=this.closest(".drawer.sherpa-guide");if(!e){console.error("Could not find drawer container");return}if(this.backToStartButton=e.querySelector(".back-to-start"),console.log("Back to start button found:",this.backToStartButton),this.messageContainer=this.querySelector(".message-container"),this.typingIndicator=this.querySelector(".chat-typing"),this.drawerBody=e.querySelector(".drawer-body")||e,this.chatInput=this.querySelector("#userInput"),this.chatForm=this.querySelector("#chatForm"),this.sendButton=this.querySelector("button[type='submit']"),!this.chatForm||!this.chatInput||!this.sendButton){console.error("Required chat elements not found:",{form:this.chatForm,input:this.chatInput,button:this.sendButton});return}console.log("Chat elements found:",{form:this.chatForm,input:this.chatInput,button:this.sendButton,backToStart:this.backToStartButton}),this.chatbotBase.setDOMElements(this.messageContainer,this.typingIndicator,this.drawerBody)}setupEventListeners(){if(!this.eventListenersAttached){if(this.chatInput&&this.sendButton){const e=this.chatInput.closest("form");e&&(console.log("Form found:",e),e.addEventListener("submit",async s=>{s.preventDefault(),s.stopPropagation(),await this.handleUserInput()})),this.chatInput.addEventListener("keypress",async s=>{s.key==="Enter"&&!s.shiftKey&&(s.preventDefault(),s.stopPropagation(),await this.handleUserInput())}),this.sendButton.addEventListener("click",async s=>{s.preventDefault(),s.stopPropagation(),await this.handleUserInput()})}this.backToStartButton?(console.log("Setting up back-to-start button click listener"),this.backToStartButton.addEventListener("click",()=>{console.log("Main menu button clicked!"),this.jumpToMainMenu()})):(console.warn("Back to start button not found - will try again later"),setTimeout(()=>{const e=this.querySelector(".back-to-start");e?(console.log("Found back-to-start button after delay"),e.addEventListener("click",()=>{console.log("Main menu button clicked!"),this.jumpToMainMenu()})):console.error("Back to start button still not found after delay")},1e3)),this.messageContainer&&this.messageContainer.addEventListener("click",async e=>{const s=e.target.closest(".chat-button");if(s){const i=JSON.parse(s.dataset.buttonData);await this.chatbotBase.handleButtonClick(i)}}),this.eventListenersAttached=!0}}async handleUserInput(){const e=this.chatInput.value.trim();if(e){this.chatInput.value="",this.chatInput.disabled=!0;try{await this.chatbotBase.sendMessage(e)}catch(s){console.error("Error sending message:",s),this.chatbotBase.ui.addMessage("assistant","Sorry, there was an error sending your message. Please try again.")}finally{this.chatInput.disabled=!1,this.chatInput.focus()}}}async jumpToMainMenu(){console.log("MainChatbotElement jumpToMainMenu called");const e="Main Menu";this.chatbotBase.ui.addMessage("user",e),this.chatbotBase.history.updateHistory({type:"user",message:e});try{this.chatbotBase.ui.showTypingIndicator("Returning to main menu...");const s=await this.chatbotBase.api.streamInteract({type:"event",payload:{event:{name:"main_menu"}}});console.log("Main menu response received:",s),await this.chatbotBase.stream.handleStream(s,this.chatbotBase.traceHandler),console.log("Finished processing main menu stream")}catch(s){console.error("Error in jumpToMainMenu:",s),this.chatbotBase.ui.addMessage("assistant","Sorry, I couldn't navigate to the main menu. Please try again.")}finally{this.chatbotBase.ui.hideTypingIndicator(),this.chatbotBase.ui.scrollToBottom()}}}customElements.define("main-chatbot",c)}export{p as A,b as C,f as H,g as S,y as T,d as U,m as a};
//# sourceMappingURL=chatbot-core-file.Aq_5GqO_.js.map
