import{E as c}from"./vendor.DqvJXvYX.js";import{S as l,p as h}from"./markdown-util.B3nWrKld.js";class m{constructor(e){if(!e.userID)throw new Error("ChatbotCore requires a userID");if(!e.endpoint)throw new Error("ChatbotCore requires an endpoint URL");if(!e.type)throw new Error("ChatbotCore requires a type ('main' or 'section')");this.userID=e.userID,this.endpoint=e.endpoint,this.type=e.type,this.eventBus=new c,this.abortController=null,this.currentCompletion=null,this.markdownParser=new l(t=>{this.eventBus.emit("partialMessage",{content:t,isStreamed:!0})})}async sendLaunch(e={}){console.log("Constructing launch payload:",e);const t=e.action?e:{action:{type:"launch"}};return this.sendAction(t)}async sendMessage(e){console.log("Message payload:",e);const t={action:{type:"text",payload:e}};return this.sendAction(t)}async sendAction(e){try{this.abortController&&(this.abortController.abort(),await new Promise(n=>setTimeout(n,100))),this.abortController=new AbortController;const{signal:t}=this.abortController;this.eventBus.emit("typing",{isTyping:!0});const s=await fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json",Accept:"text/event-stream"},body:JSON.stringify({userID:this.userID,action:e.action}),credentials:"include",signal:t});if(!s.ok)throw new Error(`API responded with status ${s.status}`);await this.handleSSEResponse(s)}catch(t){if(t.name==="AbortError"){console.debug("Request aborted, new request in progress");return}this.handleError(t)}}async handleSSEResponse(e){const t=e.body.getReader(),s=new TextDecoder("utf-8");let n="";try{for(;;){const{done:o,value:i}=await t.read();if(o){this.eventBus.emit("end",{});break}n+=s.decode(i,{stream:!0});const r=n.split(`

`);n=r.pop(),r.forEach(a=>{a.trim()!==""&&this.processEventString(a)})}}catch(o){this.handleError(o)}finally{this.eventBus.emit("typing",{isTyping:!1})}}processEventString(e){try{const t=e.split(`
`),s=t.find(r=>r.startsWith("event:")),n=t.find(r=>r.startsWith("data:")),o=s?s.split(":")[1].trim():"trace",i=n?JSON.parse(e.substring(e.indexOf("data:")+5).trim()):null;o==="trace"&&this.processTrace(i)}catch(t){console.error("Error processing SSE event:",t)}}processTrace(e){if(!e.type){console.warn("Trace without type received:",e);return}switch(console.log("processTrace called with:",e),e.type){case"text":this.emitMessageReceived(e.payload.message,e.payload.metadata);break;case"completion":this.handleCompletion(e.payload);break;case"choice":this.eventBus.emit("choicePresented",{type:"choice",buttons:e.payload.buttons});break;case"carousel":this.eventBus.emit("carouselPresented",{type:"carousel",items:e.payload.cards});break;case"device_answer":this.type==="section"&&this.eventBus.emit("deviceAnswer",e.payload);break;default:console.warn(`Unhandled trace type: ${e.type}`,e)}}handleCompletion(e){if(!e||!e.state){console.warn("Invalid completion payload:",e);return}switch(e.state){case"start":this.currentCompletion="";break;case"content":e.content&&(this.currentCompletion+=e.content,this.markdownParser.appendText(e.content));break;case"end":this.markdownParser.end();const t=h(this.currentCompletion);this.eventBus.emit("finalMessage",{content:t,isStreamed:!0}),this.eventBus.emit("assistantMessageFinalized",{content:t,metadata:null}),this.currentCompletion=null;break;default:console.warn("Unknown completion state:",e.state)}}emitMessageReceived(e,t){this.eventBus.emit("messageReceived",{content:e,metadata:t,isStreamed:!1})}handleError(e){console.error("Chatbot error:",e),this.eventBus.emit("error",{message:e.message}),this.eventBus.emit("typing",{isTyping:!1})}destroy(){this.abortController&&this.abortController.abort(),this.eventBus.removeAllListeners()}}export{m as C};
//# sourceMappingURL=base-chatbot.Cqp4dz7_.js.map
