{"version":3,"file":"base-chatbot-ui.DEpL1peT.js","sources":["../frontend/utils/animation-util.js","../frontend/baseChatbot/base-chatbot-ui.js"],"sourcesContent":["// frontend/utils/animation-util.js\nexport function animateText(element, text, animationSpeed = 5) {\n  return new Promise((resolve) => {\n    let index = 0;\n    element.textContent = \"\"; // Clear existing content\n    let lastTime = performance.now();\n\n    const animate = (currentTime) => {\n      const deltaTime = currentTime - lastTime;\n      if (deltaTime >= animationSpeed) {\n        element.textContent += text[index];\n        index++;\n        // You might need to trigger a scroll here if the message component isn't handling it\n        lastTime = currentTime;\n      }\n      if (index < text.length) {\n        requestAnimationFrame(animate);\n      } else {\n        resolve();\n      }\n    };\n    requestAnimationFrame(animate);\n  });\n}\n","// /assets/scripts/chatbot/core/base-chatbot-ui.js\n\nimport EventEmitter from \"eventemitter3\";\nimport { animateText } from \"../utils/animation-util.js\";\nimport { parseMarkdown } from \"../utils/markdown-util.js\";\n\n/**\n * ChatbotUI Class\n * Handles base UI functionality for chatbots with markdown and streaming support\n */\nclass ChatbotUI {\n  /**\n   * @param {Object} config - Configuration object\n   * @param {HTMLElement} config.container - The container element for the chatbot\n   * @param {EventEmitter} config.eventBus - Event bus instance\n   * @param {string} config.type - Type of chatbot ('main' or 'section')\n   */\n  constructor(config) {\n    if (!config.container) {\n      throw new Error(\"ChatbotUI requires a container element\");\n    }\n    if (!config.eventBus) {\n      throw new Error(\"ChatbotUI requires an event bus\");\n    }\n\n    this.container = config.container;\n    this.eventBus = config.eventBus;\n    this.type = config.type;\n\n    this.currentAssistantMessage = null; // Track the current assistant message\n\n    this.setupUIElements();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Set up references to UI elements\n   * @private\n   */\n  setupUIElements() {\n    const messageContainers =\n      this.container.querySelectorAll(\".message-container\");\n    this.messageContainer = messageContainers[0];\n    console.log(\"Message container found:\", !!this.messageContainer);\n\n    const forms = this.container.querySelectorAll(\".chat-form\");\n    this.form = forms[0];\n    console.log(\"Chat form found:\", !!this.form);\n\n    const inputs = this.container.querySelectorAll(\".chatbot-input\");\n    this.input = inputs[0];\n    console.log(\"Chat input found:\", !!this.input);\n\n    const typingIndicators = this.container.querySelectorAll(\".chat-typing\");\n    this.typingIndicator = typingIndicators[0];\n    console.log(\"Typing indicator found:\", !!this.typingIndicator);\n\n    this.typingText = this.typingIndicator?.querySelector(\".typing-text\");\n    console.log(\"Typing text found:\", !!this.typingText);\n\n    console.log(\"Container HTML:\", this.container.innerHTML);\n\n    if (!this.messageContainer || !this.form || !this.input) {\n      const missing = [];\n      if (!this.messageContainer) missing.push(\"message-container\");\n      if (!this.form) missing.push(\"chat-form\");\n      if (!this.input) missing.push(\"chatbot-input\");\n      throw new Error(`Required UI elements not found: ${missing.join(\", \")}`);\n    }\n  }\n\n  /**\n   * Set up event listeners for UI interactions\n   * @private\n   */\n  setupEventListeners() {\n    // Handle form submissions\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        // Add message to UI first\n        this.showTypingIndicator();\n\n        this.addMessage(\"user\", message, null, false);\n        // Then emit event for core to handle\n        this.eventBus.emit(\"userMessage\", message);\n        this.input.value = \"\";\n      }\n    });\n\n    this.eventBus.on(\"typing\", ({ isTyping, message }) => {\n      if (isTyping) {\n        this.showTypingIndicator(message);\n      } else {\n        this.hideTypingIndicator();\n      }\n    });\n\n    // Handle button clicks\n    this.eventBus.on(\"buttonClicked\", (payload) => {\n      const userMessage = payload.label || \"Button clicked\";\n      this.showTypingIndicator();\n      this.addMessage(\"user\", userMessage, null, false); // Use this directly since we're in ChatbotUI\n      this.eventBus.emit(\"sendAction\", payload.action); // Emit event for core to handle\n      this.removeInteractiveElements();\n    });\n\n    this.eventBus.on(\"assistantMessageStreamed\", ({ content }) => {\n      this.handleAssistantStreamedMessage(content);\n      console.log(\"assistnatmessageStreamed activated\", content);\n    });\n\n    this.eventBus.on(\"assistantMessageNonStreamed\", ({ content, metadata }) => {\n      this.handleAssistantNonStreamedMessage(content, metadata);\n    });\n\n    this.eventBus.on(\"error\", ({ message }) => {\n      this.displayError(message);\n    });\n\n    this.eventBus.on(\"choicePresented\", ({ buttons }) => {\n      this.addButtons(buttons);\n    });\n\n    this.eventBus.on(\"carouselPresented\", ({ items }) => {\n      this.addCarousel(items);\n    });\n\n    // Reset current assistant message on end\n    this.eventBus.on(\"end\", () => {\n      this.currentAssistantMessage = null;\n      this.hideTypingIndicator();\n    });\n  }\n\n  handleAssistantStreamedMessage(content) {\n    if (!this.currentAssistantMessage) {\n      // Create a message in streaming mode\n      this.currentAssistantMessage = this.createMessage(\n        \"assistant\",\n        \"\",\n        null,\n        false,\n        undefined,\n        true\n      );\n      this.messageContainer.appendChild(this.currentAssistantMessage);\n      // Set the initial content attribute\n      this.currentAssistantMessage.setAttribute(\"content\", content);\n      this.currentAssistantMessage.appendHTMLContent(content);\n      this.scrollToBottom();\n    } else {\n      // Append to the existing message\n      this.currentAssistantMessage.appendHTMLContent(content);\n    }\n  }\n\n  handleAssistantNonStreamedMessage(content, metadata) {\n    const parsedContent = parseMarkdown(content);\n\n    const message = this.createMessage(\n      \"assistant\",\n      parsedContent,\n      metadata,\n      true,\n      undefined,\n      false\n    );\n    this.messageContainer.appendChild(message);\n    this.scrollToBottom();\n\n    const messageContentElement =\n      message.shadowRoot.querySelector(\".message__content\");\n    if (messageContentElement) {\n      // Set innerHTML first to ensure proper HTML rendering\n      messageContentElement.innerHTML = parsedContent;\n\n      // Then animate with faster speed (lower number = faster)\n      animateText(messageContentElement, parsedContent, 2).then(() => {\n        this.scrollToBottom();\n        this.hideTypingIndicator();\n      });\n    }\n  }\n\n  /**\n   * Create a message component\n   * @private\n   * @param {string} sender - The sender of the message ('user' or 'assistant')\n   * @param {string} content - The raw markdown message content or HTML segments\n   * @param {Object} metadata - Optional metadata for the message\n   * @param {boolean} animate - Whether to animate the message\n   * @param {number} [animationSpeed] - Optional animation speed in ms per character\n   * @param {boolean} isStreamed - Indicates if the message is streamed\n   * @returns {MessageComponent} The created message component\n   */\n  createMessage(\n    sender,\n    content,\n    metadata = null,\n    animate = true,\n    animationSpeed,\n    isStreamed = false\n  ) {\n    const message = document.createElement(\"message-component\");\n    message.eventBus = this.eventBus;\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content); // Set initial content\n\n    if (isStreamed) {\n      message.setAttribute(\"streaming\", \"\"); // Add the streaming attribute\n    }\n\n    if (metadata) {\n      message.setAttribute(\"metadata\", JSON.stringify(metadata));\n    }\n\n    // Set data attributes for animation\n    if (!animate) {\n      message.setAttribute(\"data-animate\", \"false\");\n    }\n\n    if (animationSpeed) {\n      message.setAttribute(\"data-animation-speed\", animationSpeed.toString());\n    }\n\n    return message;\n  }\n\n  /**\n   * Add interactive buttons to the chat using button-component\n   * @public\n   * @param {Array} buttons - Array of button data\n   * @param {boolean} fromHistory - Indicates if the buttons are loaded from history\n   */\n  addButtons(buttons, fromHistory = false) {\n    if (!Array.isArray(buttons)) {\n      console.error(\"Invalid buttons data:\", buttons);\n      return;\n    }\n\n    // Use <button-component> for each button\n    const buttonGroup = document.createElement(\"div\");\n    buttonGroup.className = \"button-group\";\n\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.eventBus = this.eventBus;\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      buttonGroup.appendChild(button);\n    });\n\n    this.messageContainer.appendChild(buttonGroup);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Add a carousel to the chat using carousel-component\n   * @public\n   * @param {Array} items - Array of carousel items\n   * @param {boolean} fromHistory - Indicates if the carousel is loaded from history\n   */\n  addCarousel(items, fromHistory = false) {\n    if (!Array.isArray(items)) {\n      console.error(\"Invalid carousel items:\", items);\n      return;\n    }\n\n    // Use <carousel-component> with a data-carousel attribute\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.eventBus = this.eventBus;\n    carousel.setAttribute(\"data-carousel\", JSON.stringify({ cards: items }));\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Show the typing indicator\n   * @public\n   */\n  showTypingIndicator(message = null) {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n\n      // Only update text content if message is provided and typingText exists\n      if (message && this.typingText) {\n        this.typingText.textContent = message;\n      }\n\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Hide the typing indicator\n   * @public\n   */\n  hideTypingIndicator() {\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Display an error message\n   * @public\n   * @param {string} message - The error message to display\n   */\n  displayError(message) {\n    // For errors, create a div with the error message\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.textContent = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Remove all interactive elements\n   * @public\n   */\n  removeInteractiveElements() {\n    // Remove all custom components and groups of interactive elements\n    const elements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component, .button-group\"\n    );\n    elements.forEach((element) => element.remove());\n  }\n\n  /**\n   * Scroll the message container to the bottom\n   * @private\n   */\n  scrollToBottom() {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n\n  /**\n   * Clean up resources\n   * @public\n   */\n  destroy() {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n    this.eventBus.removeAllListeners();\n  }\n\n  /**\n   * Add a user message to the UI\n   * @public\n   * @param {string} sender - The sender ('user')\n   * @param {string} message - The message content\n   * @param {Object} metadata - Optional metadata\n   * @param {boolean} fromHistory - Whether message is from history\n   * @param {boolean} isStreamed - Whether message is part of streaming response\n   */\n  addMessage(\n    sender,\n    message,\n    metadata = null,\n    fromHistory = false,\n    isStreamed = false\n  ) {\n    const parsedMessage =\n      sender === \"assistant\" && !isStreamed ? parseMarkdown(message) : message;\n\n    const shouldAnimate = sender === \"assistant\" && !fromHistory;\n    const animationSpeed = fromHistory ? 2 : undefined; // Adjusted speed here too\n\n    const messageComponent = this.createMessage(\n      sender,\n      parsedMessage,\n      metadata,\n      shouldAnimate,\n      animationSpeed,\n      isStreamed\n    );\n\n    this.messageContainer.appendChild(messageComponent);\n    this.scrollToBottom();\n  }\n}\n\nexport default ChatbotUI;\n"],"names":["animateText","element","text","animationSpeed","resolve","index","lastTime","animate","currentTime","ChatbotUI","config","messageContainers","forms","inputs","typingIndicators","_a","missing","e","message","isTyping","payload","userMessage","content","metadata","buttons","items","parsedContent","parseMarkdown","messageContentElement","sender","isStreamed","fromHistory","buttonGroup","buttonData","button","carousel","errorDiv","parsedMessage","shouldAnimate","messageComponent"],"mappings":"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"}