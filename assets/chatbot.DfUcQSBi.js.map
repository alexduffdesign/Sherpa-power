{"version":3,"file":"chatbot.DfUcQSBi.js","sources":["../frontend/utils/event-bus.js","../frontend/utils/event-constants.js","../frontend/core/chatbot-core.js","../frontend/ui/chatbot-main-ui.js","../frontend/ui/chatbot-section-ui.js"],"sourcesContent":["// /assets/scripts/chatbot/utils/event-bus.js\n\nimport EventEmitter from \"eventemitter3\";\n\n/**\n * EventBus Class\n * Extends the EventEmitter from eventemitter3 to create a centralized event hub.\n */\nclass EventBus extends EventEmitter {}\n\n/**\n * Singleton instance of EventBus\n * Ensures that all modules import the same EventBus instance.\n */\nconst eventBus = new EventBus();\n\nexport default eventBus;\n","// /assets/scripts/chatbot/utils/event-constants.js\n\n/**\n * EVENTS Object\n * Defines all the event names used by the Main Chatbot and Section Chatbot.\n * Namespacing ensures that events are uniquely identified and do not conflict.\n */\nexport const EVENTS = {\n  MAIN_CHATBOT: {\n    MESSAGE_RECEIVED: \"mainChatbot:messageReceived\",\n    TYPING: \"mainChatbot:typing\",\n    CHOICE_PRESENTED: \"mainChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"mainChatbot:carouselPresented\",\n    ERROR: \"mainChatbot:error\",\n    // Additional events can be added here as needed\n  },\n  SECTION_CHATBOT: {\n    MESSAGE_RECEIVED: \"sectionChatbot:messageReceived\",\n    DEVICE_ANSWER: \"sectionChatbot:deviceAnswer\",\n    CHOICE_PRESENTED: \"sectionChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"sectionChatbot:carouselPresented\",\n    ERROR: \"sectionChatbot:error\",\n    // Additional events can be added here as needed\n  },\n};\n","// /assets/scripts/chatbot/core/chatbot-core.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * ChatbotCore Class\n * Handles communication with Voiceflow API via Gadget API, processes incoming data,\n * manages Voiceflow variables, and emits events based on trace types.\n */\nclass ChatbotCore {\n  constructor({ userID, endpoint, chatbotType }) {\n    if (!userID) {\n      throw new Error(\"ChatbotCore requires a userID.\");\n    }\n    if (!endpoint) {\n      throw new Error(\"ChatbotCore requires an endpoint URL.\");\n    }\n    if (!chatbotType) {\n      throw new Error(\n        'ChatbotCore requires a chatbotType (\"main\" or \"section\").'\n      );\n    }\n\n    this.userID = userID;\n    this.endpoint = endpoint;\n    this.chatbotType = chatbotType; // 'main' or 'section'\n    this.eventPrefix =\n      chatbotType === \"main\" ? \"mainChatbot\" : \"sectionChatbot\";\n\n    this.abortController = null; // For aborting the fetch request if needed\n\n    this.initialize();\n  }\n\n  initialize() {\n    // Initial setup if needed\n  }\n\n  /**\n   * Sends a launch request to initiate the conversation.\n   */\n  sendLaunch(variables = {}) {\n    const payload = {\n      action: {\n        type: \"launch\",\n        payload: variables,\n      },\n      config: {}, // Additional configuration if needed\n    };\n\n    this.sendAction(payload);\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    const payload = {\n      action: {\n        type: \"text\",\n        payload: {\n          message: message,\n        },\n      },\n      config: {}, // Additional configuration if needed\n    };\n\n    this.sendAction(payload);\n  }\n\n  /**\n   * Sends an action (launch, message, etc.) to the Gadget API via POST and handles SSE response.\n   * @param {Object} actionPayload - The action payload to send.\n   */\n  async sendAction(actionPayload) {\n    this.abortController = new AbortController();\n    const { signal } = this.abortController;\n\n    try {\n      const response = await fetch(this.endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userID: this.userID,\n          action: actionPayload.action,\n          config: actionPayload.config,\n        }),\n        credentials: \"include\", // Include cookies if needed\n        signal: signal,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Gadget API responded with status ${response.status}`);\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let buffer = \"\";\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          eventBus.emit(`${this.eventPrefix}:end`, {});\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const events = buffer.split(\"\\n\\n\");\n        buffer = events.pop(); // Remaining partial event\n\n        events.forEach((eventStr) => {\n          if (eventStr.trim() === \"\") return;\n          try {\n            const lines = eventStr.split(\"\\n\");\n            const eventTypeLine = lines.find((line) =>\n              line.startsWith(\"event:\")\n            );\n            const dataLine = lines.find((line) => line.startsWith(\"data:\"));\n\n            const eventType = eventTypeLine\n              ? eventTypeLine.split(\":\")[1].trim()\n              : \"trace\";\n            const data = dataLine\n              ? JSON.parse(\n                  eventStr.substring(eventStr.indexOf(\"data:\") + 5).trim()\n                )\n              : null;\n\n            if (eventType === \"trace\") {\n              this.processTrace(data);\n            } else if (eventType === \"end\") {\n              eventBus.emit(`${this.eventPrefix}:end`, {});\n            }\n            // Handle other event types if necessary\n          } catch (error) {\n            console.error(\"Error parsing SSE event:\", error);\n          }\n        });\n      }\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.warn(\"SSE connection aborted\");\n      } else {\n        console.error(\"SSE connection error:\", error);\n        eventBus.emit(`${this.eventPrefix}:error`, { message: error.message });\n      }\n    } finally {\n      this.abortController = null;\n      eventBus.emit(`${this.eventPrefix}:end`, {});\n    }\n  }\n\n  /**\n   * Processes individual trace events and emits corresponding events via EventBus.\n   * @param {Object} trace - The trace object received from Voiceflow.\n   */\n  processTrace(trace) {\n    if (!trace.type) {\n      console.warn(\"Trace without type received:\", trace);\n      return;\n    }\n\n    switch (trace.type) {\n      case \"text\":\n        console.log(\"Text received choice trace:\", trace);\n        eventBus.emit(`${this.eventPrefix}:messageReceived`, {\n          content: trace.payload.message,\n        });\n        break;\n      case \"choice\":\n        console.log(\"Choice received choice trace:\", trace);\n        eventBus.emit(`${this.eventPrefix}:choicePresented`, {\n          buttons: trace.payload.buttons,\n        });\n        break;\n      case \"carousel\":\n        eventBus.emit(`${this.eventPrefix}:carouselPresented`, {\n          carouselItems: trace.payload.items,\n        });\n        break;\n      case \"device_answer\":\n        eventBus.emit(`${this.eventPrefix}:deviceAnswer`, {\n          devices: trace.payload.devices,\n        });\n        break;\n      case \"block\":\n        // Handle block trace - typically used for flow control\n        console.log(\"Block trace received:\", trace);\n        break;\n      case \"typing\":\n        if (trace.payload.isTyping) {\n          eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: true });\n        } else {\n          eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: false });\n        }\n        break;\n      default:\n        console.warn(`Unhandled trace type: ${trace.type}`, trace);\n    }\n  }\n\n  /**\n   * Closes the SSE connection gracefully.\n   */\n  closeConnection() {\n    if (this.abortController) {\n      this.abortController.abort();\n      console.log(\"SSE connection closed.\");\n    }\n  }\n\n  /**\n   * Cleans up resources when the ChatbotCore instance is no longer needed.\n   */\n  destroy() {\n    this.closeConnection();\n    eventBus.removeAllListeners(`${this.eventPrefix}:messageReceived`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:choicePresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:carouselPresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:deviceAnswer`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:error`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:typing`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:end`);\n  }\n}\n\nexport default ChatbotCore;\n","// /assets/scripts/chatbot/main/main-chatbot-ui.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * MainChatbotUI Class\n * Handles UI-specific functionalities for the Main Chatbot.\n */\nclass MainChatbotUI {\n  /**\n   * Constructor initializes UI elements and sets up event listeners.\n   * @param {HTMLElement} container - The main chatbot UI container.\n   */\n  constructor(container) {\n    this.container = container;\n    this.form = this.container.querySelector(\".chat-form\");\n    this.input = this.container.querySelector(\"input[type='text']\");\n    this.messageContainer = this.container.querySelector(\".message-container\");\n\n    console.log(\"Chatbot UI Container:\", this.container);\n    console.log(\"Chat Form:\", this.form);\n    console.log(\"Chat Input:\", this.input);\n    console.log(\"Message Container:\", this.messageContainer);\n\n    if (!this.container) {\n      console.error(\"Main Chatbot UI container not found\");\n      return;\n    }\n\n    if (!this.form || !this.input) {\n      console.error(\"Main Chatbot form or input not found\");\n      return;\n    }\n\n    this.setupEventListeners();\n    this.setupUIEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for user interactions within the UI.\n   */\n  setupEventListeners() {\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        eventBus.emit(\"userMessage\", message);\n        this.input.value = \"\";\n        this.saveToHistory(\"user\", message);\n      }\n    });\n  }\n\n  /**\n   * Sets up event listeners for UI components like buttons.\n   */\n  setupUIEventListeners() {\n    // Set up event delegation for button clicks once\n    this.container\n      .querySelector(\".chatbot-container\")\n      .addEventListener(\"click\", (e) => {\n        const button = e.target.closest(\"button.button\");\n        if (button) {\n          const payload = JSON.parse(button.getAttribute(\"data-button-data\"));\n          eventBus.emit(\"buttonClicked\", payload);\n          this.removeInteractiveElements();\n        }\n      });\n  }\n\n  /**\n   * Registers a callback for user message submissions.\n   * @param {Function} callback - Function to handle user messages.\n   */\n  onUserMessage(callback) {\n    eventBus.on(\"userMessage\", callback);\n  }\n\n  /**\n   * Registers a callback for button click interactions.\n   * @param {Function} callback - Function to handle button clicks.\n   */\n  onButtonClick(callback) {\n    eventBus.on(\"buttonClicked\", callback);\n  }\n\n  /**\n   * Adds a message to the chatbot UI.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} content - The message content.\n   */\n  addMessage(sender, content) {\n    if (!this.messageContainer) {\n      console.error(\"Message container not set\");\n      return;\n    }\n\n    const message = document.createElement(\"message-component\");\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n    this.messageContainer.appendChild(message);\n    console.log(\"Message appended to messageContainer\"); // Debug log\n    this.scrollToBottom();\n    this.saveToHistory(sender, content);\n  }\n\n  /**\n   * Adds interactive buttons to the chatbot UI.\n   * @param {Array} buttons - Array of button data.\n   */\n  addButtons(buttons) {\n    console.log(\"addButtons called with:\", buttons); // Debug log\n\n    if (!Array.isArray(buttons)) {\n      console.error(\"addButtons expected an array but received:\", buttons);\n      return;\n    }\n\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      this.messageContainer.appendChild(button);\n      console.log(\"Button appended to messageContainer\"); // Debug log\n    });\n    this.scrollToBottom();\n  }\n\n  /**\n   * Adds a carousel to the chatbot UI.\n   * @param {Object} carouselData - Data for the carousel.\n   */\n  addCarousel(carouselData) {\n    console.log(\"Adding carousel:\", carouselData);\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.setAttribute(\"data-carousel\", JSON.stringify(carouselData));\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Displays a typing indicator in the chatbot UI.\n   */\n  showTypingIndicator() {\n    const typing = this.container.querySelector(\".chat-typing\");\n    if (typing) {\n      typing.style.display = \"flex\";\n      this.scrollToBottom();\n    }\n  }\n\n  /**\n   * Hides the typing indicator from the chatbot UI.\n   */\n  hideTypingIndicator() {\n    const typing = this.container.querySelector(\".chat-typing\");\n    if (typing) {\n      typing.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Displays an error message in the chatbot UI.\n   * @param {string} message - The error message.\n   */\n  displayError(message) {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.innerText = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Scrolls the chatbot container to the bottom.\n   */\n  scrollToBottom() {\n    this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n  }\n\n  /**\n   * Saves a message to conversation history in localStorage.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} message - The message content.\n   */\n  saveToHistory(sender, message) {\n    const history =\n      JSON.parse(localStorage.getItem(\"mainChatbotHistory\")) || [];\n    history.push({ sender, message });\n    localStorage.setItem(\"mainChatbotHistory\", JSON.stringify(history));\n  }\n\n  /**\n   * Removes interactive elements (buttons, carousels) from the UI.\n   */\n  removeInteractiveElements() {\n    const interactiveElements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component\"\n    );\n    interactiveElements.forEach((element) => element.remove());\n  }\n}\n\nexport default MainChatbotUI;\n","// /assets/scripts/chatbot/section/section-chatbot-ui.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * SectionChatbotUI Class\n * Handles UI-specific functionalities for the Section Chatbot.\n */\nclass SectionChatbotUI {\n  /**\n   * Constructor initializes UI elements, extracts product details, and sets up event listeners.\n   * @param {HTMLElement} container - The section chatbot UI container.\n   */\n  constructor(container) {\n    this.container = container;\n    this.form = this.container.querySelector(\".chat-form\");\n    this.input = this.container.querySelector(\"input[type='text']\");\n    this.messageContainer = this.container.querySelector(\".message-container\");\n\n    if (!this.container) {\n      console.error(\"Section Chatbot UI container not found\");\n      return;\n    }\n\n    if (!this.form || !this.input) {\n      console.error(\"Section Chatbot form or input not found\");\n      return;\n    }\n\n    // Extract product details from container's data attributes\n    this.productTitle = this.container.dataset.productTitle;\n    this.productCapacity = this.container.dataset.productCapacity;\n    this.acOutputContinuousPower =\n      this.container.dataset.productAcOutputContinuousPower;\n    this.acOutputPeakPower = this.container.dataset.productAcOutputPeakPower;\n    this.dcOutputPower = this.container.dataset.productDcOutputPower;\n\n    this.startBlock = \"shopifySection\";\n    this.productDetails = {\n      title: this.productTitle,\n      capacity: this.productCapacity,\n      ac_output_continuous_power: this.acOutputContinuousPower,\n      ac_output_peak_power: this.acOutputPeakPower,\n      dc_output_power: this.dcOutputPower,\n    };\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for user interactions within the UI.\n   */\n  setupEventListeners() {\n    this.form.addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      const message = this.input.value.trim();\n      if (message) {\n        this.emit(\"userMessage\", message);\n        this.input.value = \"\";\n      }\n    });\n  }\n\n  /**\n   * Registers a callback for user message submissions.\n   * @param {Function} callback - Function to handle user messages.\n   */\n  onUserMessage(callback) {\n    eventBus.on(\"userMessage\", callback);\n  }\n\n  /**\n   * Registers a callback for button click interactions.\n   * @param {Function} callback - Function to handle button clicks.\n   */\n  onButtonClick(callback) {\n    eventBus.on(\"buttonClicked\", callback);\n  }\n\n  /**\n   * Emits custom events from the UI components.\n   * @param {string} eventName - Name of the event.\n   * @param {any} data - Data to pass with the event.\n   */\n  emit(eventName, data) {\n    const event = new CustomEvent(eventName, { detail: data });\n    this.container.dispatchEvent(event);\n  }\n\n  /**\n   * Adds a message to the chatbot UI.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} content - The message content.\n   */\n  addMessage(sender, content) {\n    const message = document.createElement(\"message-component\");\n    message.setAttribute(\"sender\", sender);\n    message.setAttribute(\"content\", content);\n    this.messageContainer.appendChild(message);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Adds interactive buttons to the chatbot UI.\n   * @param {Array} buttons - Array of button data.\n   */\n  addButtons(buttons) {\n    buttons.forEach((buttonData) => {\n      const button = document.createElement(\"button-component\");\n      button.setAttribute(\"label\", buttonData.name);\n      button.setAttribute(\"payload\", JSON.stringify(buttonData.request));\n      this.messageContainer.appendChild(button);\n    });\n    this.scrollToBottom();\n\n    // Set up event delegation for button clicks\n    this.messageContainer.addEventListener(\"click\", (e) => {\n      if (e.target.closest(\"button-component\")) {\n        const button = e.target.closest(\"button-component\");\n        const payload = JSON.parse(button.getAttribute(\"payload\"));\n        this.emit(\"buttonClicked\", payload);\n        this.removeInteractiveElements();\n      }\n    });\n  }\n\n  /**\n   * Adds a carousel to the chatbot UI.\n   * @param {Array} items - Array of carousel items.\n   */\n  addCarousel(items) {\n    const carousel = document.createElement(\"carousel-component\");\n    carousel.setAttribute(\"items\", JSON.stringify(items));\n    this.messageContainer.appendChild(carousel);\n    this.scrollToBottom();\n\n    // Set up event delegation for carousel interactions if necessary\n    // Implement similar to buttons if carousel items have interactive elements\n  }\n\n  /**\n   * Populates the applications grid with device information.\n   * @param {Array} devices - Array of device data.\n   */\n  populateApplicationsGrid(devices) {\n    const grid = document.querySelector(\".applications-grid\");\n    if (!grid) {\n      console.error(\"Applications grid not found\");\n      return;\n    }\n    devices.forEach((device) => {\n      const card = document.createElement(\"div\");\n      card.classList.add(\"application-card\", \"chatbot-card\");\n      card.innerHTML = `\n        <div class=\"application-card__image\">\n          <img src=\"${device.imageUrl}\" alt=\"${device.name}\" />\n        </div>\n        <div class=\"application-card__content\">\n          <div class=\"application-card__title\">${device.name}</div>\n          <div class=\"application-card__runtime\">${device.estimatedRuntime}</div>\n        </div>\n      `;\n      grid.appendChild(card);\n    });\n    this.scrollToBottom();\n  }\n\n  /**\n   * Displays an error message in the chatbot UI.\n   * @param {string} message - The error message.\n   */\n  displayError(message) {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.classList.add(\"error-message\");\n    errorDiv.innerText = message;\n    this.messageContainer.appendChild(errorDiv);\n    this.scrollToBottom();\n  }\n\n  /**\n   * Scrolls the chatbot container to the bottom.\n   */\n  scrollToBottom() {\n    this.container.scrollTop = this.container.scrollHeight;\n  }\n\n  /**\n   * Retrieves the value of a specified attribute from the chatbot container.\n   * @param {string} attrName - The name of the attribute.\n   * @returns {string|null} - The value of the attribute or null if not found.\n   */\n  getAttribute(attrName) {\n    return this.container.getAttribute(attrName);\n  }\n\n  /**\n   * Removes interactive elements (buttons, carousels) from the UI.\n   */\n  removeInteractiveElements() {\n    const interactiveElements = this.messageContainer.querySelectorAll(\n      \"button-component, carousel-component\"\n    );\n    interactiveElements.forEach((element) => element.remove());\n  }\n}\n\nexport default SectionChatbotUI;\n"],"names":["EventBus","EventEmitter","eventBus","EVENTS","ChatbotCore","userID","endpoint","chatbotType","variables","payload","message","actionPayload","signal","response","reader","decoder","buffer","done","value","events","eventStr","lines","eventTypeLine","line","dataLine","eventType","data","error","trace","MainChatbotUI","container","button","callback","sender","content","buttons","buttonData","carouselData","carousel","typing","errorDiv","history","element","SectionChatbotUI","eventName","event","e","items","devices","grid","device","card","attrName"],"mappings":"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"}