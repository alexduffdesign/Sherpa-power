class n{constructor({apiEndpoint:t,userIDPrefix:e}){this.apiEndpoint=t,this.userID=`${e}_${this.generateUserID()}`,this.messageContainer=null,this.typingIndicator=null,this.drawerBody=null,this.showTypingIndicator=this.showTypingIndicator.bind(this),this.hideTypingIndicator=this.hideTypingIndicator.bind(this)}generateUserID(){return Math.random().toString(36).substr(2,9)}setDOMElements(t,e,s){this.messageContainer=t,this.typingIndicator=e,this.drawerBody=s,console.log("ChatbotCore: DOM elements set.")}markdownToHtml(t){return t=t.replace(/^# (.*)$/gm,'<h6 class="h4">$1</h6>'),t=t.replace(/^## (.*)$/gm,'<h6 class="h5">$1</h6>'),t=t.replace(/^### (.*)$/gm,'<h6 class="h6">$1</h6>'),t=t.replace(/^####+ (.*)$/gm,'<h6 class="h6">$1</h6>'),t=t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>"),t=t.replace(/\*(.*?)\*/g,"<em>$1</em>"),t=t.replace(/\[(.*?)\]\((.*?)\)/g,'<a href="$2" target="_blank">$1</a>'),t=t.replace(/^\s*-\s+(.*)$/gm,"<ul><li>$1</li></ul>"),t=t.replace(/^\s*\d+\.\s+(.*)$/gm,"<ol><li>$1</li></ol>"),t=t.replace(/<\/?ul>/g,""),t=t.replace(/<\/?ol>/g,""),t=t.replace(/<li>(.*?)<\/li>/g,"<li>$1</li>"),t=t.replace(/<\/li>\s*<li>/g,"</li><li>"),t=t.replace(/\n/g,"<br>"),t}showTypingIndicator(){this.typingIndicator&&(this.typingIndicator.style.display="block",console.log("ChatbotCore: Typing indicator shown."))}hideTypingIndicator(){this.typingIndicator&&(this.typingIndicator.style.display="none",console.log("ChatbotCore: Typing indicator hidden."))}addMessage(t,e){if(!this.messageContainer){console.error("ChatbotCore: Message container not set.");return}const s=document.createElement("div");if(s.classList.add("message-wrapper",`message-wrapper--${t}`),t==="assistant"){const i=document.createElement("svg");i.classList.add("message-icon"),i.setAttribute("width","24"),i.setAttribute("height","24"),i.setAttribute("viewBox","0 0 24 24"),i.setAttribute("fill","none"),i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.innerHTML=`
        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
        <path d="M8 12L10 14L16 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      `,s.appendChild(i)}const r=document.createElement("div");r.classList.add("message",`message--${t}`),r.innerHTML=`<div class="message__content">${this.markdownToHtml(e)}</div>`,s.appendChild(r),this.messageContainer.appendChild(s),this.scrollToBottom()}addButtons(t){if(!this.messageContainer){console.error("ChatbotCore: Message container not set.");return}const e=document.createElement("div");e.classList.add("button-container"),t.forEach(r=>{const i=document.createElement("button");i.textContent=r.name,i.dataset.buttonData=JSON.stringify(r),e.appendChild(i)});const s=document.createElement("div");s.classList.add("message-wrapper","message-wrapper--assistant"),s.appendChild(e),this.messageContainer.appendChild(s),this.scrollToBottom()}async sendMessage(t){this.showTypingIndicator();try{const e=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,message:t})});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);const s=await e.json();return console.log("ChatbotCore: Received response:",s),s.traces||[]}catch(e){return console.error("ChatbotCore: Error sending message:",e),this.addMessage("assistant","Sorry, something went wrong. Please try again."),[]}finally{this.hideTypingIndicator()}}async sendLaunch(t={}){this.showTypingIndicator();try{const e=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,action:"launch",...t})});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);const s=await e.json();return console.log("ChatbotCore: Received launch response:",s),s.traces||[]}catch(e){return console.error("ChatbotCore: Error sending launch:",e),this.addMessage("assistant","Sorry, something went wrong during initialization."),[]}finally{this.hideTypingIndicator()}}async handleButtonClick(t){this.showTypingIndicator();try{const e=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,action:t.request.type,payload:t.request.payload})});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);const s=await e.json();return console.log("ChatbotCore: Received button click response:",s),s.traces||[]}catch(e){return console.error("ChatbotCore: Error handling button click:",e),this.addMessage("assistant","Sorry, something went wrong. Please try again."),[]}finally{this.hideTypingIndicator()}}async gadgetInteract(t){this.showTypingIndicator();try{const e=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userID:this.userID,...t})});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);const s=await e.json();return console.log("ChatbotCore: Received gadget interaction response:",s),s.traces||[]}catch(e){return console.error("ChatbotCore: Error in gadgetInteract:",e),this.addMessage("assistant","Sorry, something went wrong. Please try again."),[]}finally{this.hideTypingIndicator()}}scrollToBottom(){this.messageContainer&&(this.messageContainer.scrollTop=this.messageContainer.scrollHeight,console.log("ChatbotCore: Scrolled to bottom."))}}export{n as C};
//# sourceMappingURL=chatbot-core-file.js.map
