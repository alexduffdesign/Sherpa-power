{"version":3,"file":"chatbot-stream.2Ew4cAx-.js","sources":["../frontend/entrypoints/chatbot-stream.js"],"sourcesContent":["export class StreamHandler {\n    constructor() {\n        this.currentStream = null;\n    }\n\n    async handleStream(response, traceHandler) {\n        if (!response.body) {\n            throw new Error(\"No response body available\");\n        }\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let buffer = \"\";\n\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done) break;\n\n                buffer += decoder.decode(value, { stream: true });\n                const lines = buffer.split(\"\\n\");\n                buffer = lines.pop() || \"\";\n\n                for (const line of lines) {\n                    if (line.trim() === \"\") continue;\n                    if (line.startsWith(\"data: \")) {\n                        const jsonStr = line.slice(6);\n                        try {\n                            const event = JSON.parse(jsonStr);\n                            await traceHandler.handleTrace(event);\n                        } catch (e) {\n                            console.error(\"Error parsing stream data:\", e);\n                        }\n                    }\n                }\n            }\n\n            // Handle any remaining data\n            if (buffer) {\n                const lines = buffer.split(\"\\n\");\n                for (const line of lines) {\n                    if (line.trim() === \"\" || !line.startsWith(\"data: \")) continue;\n                    const jsonStr = line.slice(6);\n                    try {\n                        const event = JSON.parse(jsonStr);\n                        await traceHandler.handleTrace(event);\n                    } catch (e) {\n                        console.error(\"Error parsing remaining stream data:\", e);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error reading stream:\", error);\n            throw error;\n        }\n    }\n\n    closeCurrentStream() {\n        if (this.currentStream) {\n            this.currentStream.cancel();\n            this.currentStream = null;\n        }\n    }\n}\n"],"names":["StreamHandler","response","traceHandler","reader","decoder","buffer","done","value","lines","line","jsonStr","event","e","error"],"mappings":"AAAO,MAAMA,CAAc,CACvB,aAAc,CACV,KAAK,cAAgB,IACxB,CAED,MAAM,aAAaC,EAAUC,EAAc,CACvC,GAAI,CAACD,EAAS,KACV,MAAM,IAAI,MAAM,4BAA4B,EAGhD,MAAME,EAASF,EAAS,KAAK,UAAS,EAChCG,EAAU,IAAI,YACpB,IAAIC,EAAS,GAEb,GAAI,CACA,OAAa,CACT,KAAM,CAAE,KAAAC,EAAM,MAAAC,CAAK,EAAK,MAAMJ,EAAO,KAAI,EACzC,GAAIG,EAAM,MAEVD,GAAUD,EAAQ,OAAOG,EAAO,CAAE,OAAQ,EAAI,CAAE,EAChD,MAAMC,EAAQH,EAAO,MAAM;AAAA,CAAI,EAC/BA,EAASG,EAAM,IAAK,GAAI,GAExB,UAAWC,KAAQD,EACf,GAAIC,EAAK,SAAW,IAChBA,EAAK,WAAW,QAAQ,EAAG,CAC3B,MAAMC,EAAUD,EAAK,MAAM,CAAC,EAC5B,GAAI,CACA,MAAME,EAAQ,KAAK,MAAMD,CAAO,EAChC,MAAMR,EAAa,YAAYS,CAAK,CACvC,OAAQC,EAAG,CACR,QAAQ,MAAM,6BAA8BA,CAAC,CAChD,CACJ,CAER,CAGD,GAAIP,EAAQ,CACR,MAAMG,EAAQH,EAAO,MAAM;AAAA,CAAI,EAC/B,UAAWI,KAAQD,EAAO,CACtB,GAAIC,EAAK,KAAI,IAAO,IAAM,CAACA,EAAK,WAAW,QAAQ,EAAG,SACtD,MAAMC,EAAUD,EAAK,MAAM,CAAC,EAC5B,GAAI,CACA,MAAME,EAAQ,KAAK,MAAMD,CAAO,EAChC,MAAMR,EAAa,YAAYS,CAAK,CACvC,OAAQC,EAAG,CACR,QAAQ,MAAM,uCAAwCA,CAAC,CAC1D,CACJ,CACJ,CACJ,OAAQC,EAAO,CACZ,cAAQ,MAAM,wBAAyBA,CAAK,EACtCA,CACT,CACJ,CAED,oBAAqB,CACb,KAAK,gBACL,KAAK,cAAc,SACnB,KAAK,cAAgB,KAE5B,CACL"}