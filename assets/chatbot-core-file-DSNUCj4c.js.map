{"version":3,"file":"chatbot-core-file-DSNUCj4c.js","sources":["../frontend/entrypoints/chatbot-core-file.js"],"sourcesContent":["// chatbot-core.js\nconsole.log(\"Recent changes check : 1\");\n\nexport class ChatbotCore {\n  constructor(config) {\n    console.log(\"ChatbotCore constructor called with config:\", config);\n    this.apiEndpoint = config.apiEndpoint;\n    this.userID = this.loadUserID();\n    this.messageContainer = null;\n    this.typingIndicator = null;\n\n    // Bind methods\n    this.sendMessage = this.sendMessage.bind(this);\n    this.gadgetInteract = this.gadgetInteract.bind(this);\n    this.addMessage = this.addMessage.bind(this);\n\n    console.log(\"ChatbotCore instance created:\", this);\n  }\n\n  loadUserID() {\n    let userID = localStorage.getItem(\"chatbotUserID\");\n    if (!userID) {\n      userID = `user_${Math.floor(Math.random() * 1000000000000000)}`;\n      localStorage.setItem(\"chatbotUserID\", userID);\n    }\n    console.log(\"ChatbotCore userID loaded:\", userID);\n    return userID;\n  }\n\n  setDOMElements(messageContainer, typingIndicator) {\n    console.log(\"setDOMElements called:\", {\n      messageContainer,\n      typingIndicator,\n    });\n    this.messageContainer = messageContainer;\n    this.typingIndicator = typingIndicator;\n    console.log(\"DOM elements set:\", this);\n  }\n\n  async sendMessage(message) {\n    console.log(\"sendMessage called with:\", message);\n    console.log(\"this in sendMessage:\", this);\n    try {\n      const res = await this.gadgetInteract({\n        userAction: {\n          type: \"text\",\n          payload: message,\n        },\n      });\n      console.log(\"gadgetInteract response:\", res);\n      this.hideTypingIndicator();\n      return res;\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  async sendLaunch() {\n    console.log(\"ChatbotCore sendLaunch called\");\n    this.showTypingIndicator();\n    const interactPayload = {\n      userAction: {\n        type: \"launch\",\n      },\n    };\n    try {\n      const res = await this.gadgetInteract(interactPayload);\n      console.log(\"Launch response:\", res);\n      this.hideTypingIndicator();\n      return res;\n    } catch (error) {\n      console.error(\"Error launching conversation:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n\n  async gadgetInteract(payload) {\n    console.log(\"Sending payload to Gadget:\", payload);\n    const fullPayload = {\n      userID: this.userID,\n      userAction: payload.userAction || payload,\n    };\n    const response = await fetch(this.apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(fullPayload),\n    });\n    if (!response.ok) {\n      throw new Error(`Gadget API error: ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  showTypingIndicator() {\n    console.log(\"Showing typing indicator\");\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"flex\";\n      this.typingIndicator.classList.add(\"active\");\n      this.scrollToBottom();\n    }\n  }\n\n  hideTypingIndicator() {\n    console.log(\"Hiding typing indicator\");\n    if (this.typingIndicator) {\n      this.typingIndicator.style.display = \"none\";\n      this.typingIndicator.classList.remove(\"active\");\n    }\n  }\n\n  scrollToBottom() {\n    if (this.messageContainer) {\n      this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n    }\n  }\n\n  addMessage(sender, content) {\n    console.log(`Adding message from ${sender}: ${content}`);\n    if (this.messageContainer) {\n      const messageDiv = document.createElement(\"div\");\n      messageDiv.classList.add(\"message\", `message--${sender}`);\n      messageDiv.innerHTML = this.markdownToHtml(content);\n      this.messageContainer.appendChild(messageDiv);\n      this.scrollToBottom();\n    }\n  }\n\n  markdownToHtml(markdown) {\n    return markdown\n      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n      .replace(/\\*(.*?)\\*/g, \"<em>$1</em>\")\n      .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '<a href=\"$2\" target=\"_blank\">$1</a>')\n      .replace(/\\n/g, \"<br>\");\n  }\n\n  addButtons(buttons) {\n    console.log(\"Adding buttons:\", buttons);\n    const buttonContainer = document.createElement(\"div\");\n    buttonContainer.classList.add(\"button-container\");\n\n    buttons.forEach((button) => {\n      const buttonElement = document.createElement(\"button\");\n      buttonElement.classList.add(\"button\");\n      buttonElement.textContent = button.name;\n      buttonElement.addEventListener(\"click\", () =>\n        this.handleButtonClick(button)\n      );\n      buttonContainer.appendChild(buttonElement);\n    });\n\n    if (this.messageContainer) {\n      this.messageContainer.appendChild(buttonContainer);\n      this.scrollToBottom();\n    } else {\n      console.error(\"Message container not found when adding buttons\");\n    }\n  }\n\n  removeButtons() {\n    const buttonContainers =\n      this.messageContainer.querySelectorAll(\".button-container\");\n    buttonContainers.forEach((container) => container.remove());\n  }\n\n  async handleButtonClick(button) {\n    console.log(\"Button clicked:\", button);\n    this.removeButtons();\n    this.addMessage(\"user\", button.name);\n\n    this.showTypingIndicator();\n    try {\n      const response = await this.gadgetInteract({\n        userID: this.userID,\n        userAction: button.request,\n      });\n      this.hideTypingIndicator();\n      return response;\n    } catch (error) {\n      console.error(\"Error handling button click:\", error);\n      this.hideTypingIndicator();\n      throw error;\n    }\n  }\n}\n\nconsole.log(\"ChatbotCore module loaded\");\n"],"names":[],"mappings":"AACA,QAAQ,IAAI,0BAA0B,EA6LtC,QAAQ,IAAI,2BAA2B"}