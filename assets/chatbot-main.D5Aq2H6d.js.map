{"version":3,"file":"chatbot-main.D5Aq2H6d.js","sources":["../frontend/entrypoints/chatbot-main.js"],"sourcesContent":["// /assets/scripts/chatbot/chatbot-main.js\n\nimport ChatbotCore from \"../core/chatbot-core.js\";\nimport MainChatbotUI from \"../ui/chatbot-main-ui.js\";\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\nimport { generateUserId } from \"../utils/user-id-generator.js\";\n\n/**\n * MainChatbot Class\n * Manages the Main Chatbot's interactions, conversation history, and UI updates.\n */\nclass MainChatbot {\n  /**\n   * Constructor initializes ChatbotCore and MainChatbotUI, sets up event listeners.\n   * @param {ChatbotCore} core - Instance of ChatbotCore handling API communications.\n   * @param {MainChatbotUI} ui - Instance of MainChatbotUI handling UI updates.\n   */\n  constructor(core, ui) {\n    this.core = core;\n    this.ui = ui;\n    this.historyKey = \"mainChatbotHistory\";\n    this.isLaunched = false;\n    this.setupEventListeners();\n  }\n\n  /**\n   * Sets up event listeners for ChatbotCore events and UI interactions.\n   */\n  setupEventListeners() {\n    // Listen to events emitted by ChatbotCore via EventBus\n    eventBus.on(EVENTS.MAIN_CHATBOT.MESSAGE_RECEIVED, (data) => {\n      this.ui.addMessage(\"assistant\", data.content, data.metadata);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.CHOICE_PRESENTED, (data) => {\n      this.ui.addMessage(\"assistant\", data.content, {\n        type: \"choice\",\n        buttons: data.buttons,\n      });\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.CAROUSEL_PRESENTED, (data) => {\n      this.ui.addMessage(\"assistant\", data.content, {\n        type: \"carousel\",\n        carouselItems: data.carouselItems,\n      });\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.ERROR, (error) => {\n      this.ui.displayError(error.message);\n    });\n\n    eventBus.on(EVENTS.MAIN_CHATBOT.TYPING, (data) => {\n      if (data.isTyping) {\n        this.ui.showTypingIndicator();\n      } else {\n        this.ui.hideTypingIndicator();\n      }\n    });\n\n    // Listen for chatbot launch event\n    document.addEventListener(\"chatbotLaunch\", () => {\n      this.launch();\n    });\n\n    // Listen for user message submissions via UI\n    this.ui.onUserMessage((message) => {\n      this.sendMessage(message);\n    });\n\n    // Listen for button clicks from UI components\n    this.ui.onButtonClick((payload) => {\n      this.sendAction(payload);\n    });\n  }\n\n  /**\n   * Launches the chatbot by sending a launch request.\n   */\n  launch() {\n    if (this.isLaunched) return;\n\n    this.core\n      .sendLaunch()\n      .then(() => {\n        console.log(\"Chatbot launched successfully.\");\n      })\n      .catch((error) => {\n        console.error(\"Error launching chatbot:\", error);\n        this.ui.displayError(\n          \"Failed to launch the chatbot. Please try again later.\"\n        );\n      });\n\n    this.isLaunched = true;\n  }\n\n  /**\n   * Sends a user message to the chatbot.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    // Sanitize user input to prevent XSS attacks\n    const sanitizedMessage = this.sanitizeInput(message);\n    this.core\n      .sendMessage(sanitizedMessage)\n      .then(() => {\n        this.ui.addMessage(\"user\", sanitizedMessage, { type: \"message\" });\n        this.saveToHistory(\"user\", sanitizedMessage, { type: \"message\" });\n      })\n      .catch((error) => {\n        console.error(\"Error sending message:\", error);\n        this.ui.displayError(\"Failed to send your message. Please try again.\");\n      });\n  }\n\n  /**\n   * Sends an action payload to the chatbot.\n   * @param {Object} actionPayload - The action payload to send.\n   */\n  sendAction(actionPayload) {\n    // Validate the action payload\n    if (!actionPayload || typeof actionPayload !== \"object\") {\n      console.error(\"Invalid action payload:\", actionPayload);\n      this.ui.displayError(\"Invalid action triggered.\");\n      return;\n    }\n\n    // Send the action to the chatbot core\n    this.core\n      .sendAction({\n        action: actionPayload,\n        config: {},\n      })\n      .then(() => {\n        console.log(\"Action sent successfully:\", actionPayload);\n        this.ui.addMessage(\"user\", actionPayload.label || \"Action executed.\", {\n          type: \"action\",\n        });\n        this.saveToHistory(\"user\", JSON.stringify(actionPayload), {\n          type: \"action\",\n        });\n      })\n      .catch((error) => {\n        console.error(\"Error sending action:\", error);\n        this.ui.displayError(\n          \"An error occurred while processing your request.\"\n        );\n      });\n  }\n\n  /**\n   * Loads conversation history from localStorage and renders it in the UI.\n   */\n  loadHistory() {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n    history.forEach((entry) => {\n      if (entry.sender === \"user\") {\n        this.ui.addMessage(\"user\", entry.message, entry.metadata);\n      } else if (entry.sender === \"assistant\") {\n        this.ui.addMessage(\"assistant\", entry.message, entry.metadata);\n      }\n    });\n\n    // Optionally, re-render interactive elements based on the last entry's metadata\n    if (history.length > 0) {\n      const lastEntry = history[history.length - 1];\n      if (lastEntry.sender === \"assistant\" && lastEntry.metadata) {\n        switch (lastEntry.metadata.type) {\n          case \"choice\":\n            this.ui.addButtons(lastEntry.metadata.buttons);\n            break;\n          case \"carousel\":\n            this.ui.addCarousel(lastEntry.metadata.carouselItems);\n            break;\n          // Add more cases as needed\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Saves a message or action to conversation history in localStorage.\n   * @param {string} sender - 'user' or 'assistant'.\n   * @param {string} message - The message content or action payload.\n   * @param {Object} [metadata] - Additional metadata about the entry.\n   */\n  saveToHistory(sender, message, metadata = null) {\n    const history = JSON.parse(localStorage.getItem(this.historyKey)) || [];\n    history.push({ sender, message, metadata });\n    localStorage.setItem(this.historyKey, JSON.stringify(history));\n  }\n\n  /**\n   * Sanitizes user input to prevent XSS attacks.\n   * @param {string} input - The user-provided input.\n   * @returns {string} - The sanitized input.\n   */\n  sanitizeInput(input) {\n    const div = document.createElement(\"div\");\n    div.textContent = input;\n    return div.innerHTML;\n  }\n}\n\n// Initialize Main Chatbot on DOMContentLoaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const mainChatbotContainer = document.getElementById(\"main-chatbot-ui\");\n\n  if (!mainChatbotContainer) {\n    console.error(\"Main Chatbot UI container not found\");\n    return;\n  }\n\n  // Generate or retrieve existing userID for Main Chatbot\n  let mainUserId = localStorage.getItem(\"mainChatbotUserId\");\n  if (!mainUserId) {\n    mainUserId = generateUserId(\"mainChatbot\");\n    localStorage.setItem(\"mainChatbotUserId\", mainUserId);\n  }\n\n  // Initialize ChatbotCore with the generated userID\n  const mainChatbotCore = new ChatbotCore({\n    userID: mainUserId,\n    endpoint:\n      \"https://chatbottings--development.gadget.app/voiceflowAPI/voiceflow-streaming\", // Update to your actual endpoint\n    chatbotType: \"main\",\n  });\n\n  // Initialize MainChatbotUI\n  const mainChatbotUI = new MainChatbotUI(mainChatbotContainer);\n\n  // Initialize MainChatbot\n  const mainChatbot = new MainChatbot(mainChatbotCore, mainChatbotUI);\n\n  // Load conversation history\n  mainChatbot.loadHistory();\n});\n\nexport default MainChatbot;\n"],"names":["MainChatbot","core","ui","eventBus","EVENTS","data","error","message","payload","sanitizedMessage","actionPayload","history","entry","lastEntry","sender","metadata","input","div","mainChatbotContainer","mainUserId","generateUserId","mainChatbotCore","ChatbotCore","mainChatbotUI","MainChatbotUI"],"mappings":"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"}