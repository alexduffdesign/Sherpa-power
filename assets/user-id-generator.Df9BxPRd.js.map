{"version":3,"file":"user-id-generator.Df9BxPRd.js","sources":["../frontend/utils/event-bus.js","../frontend/utils/event-constants.js","../frontend/core/chatbot-core.js","../frontend/utils/user-id-generator.js"],"sourcesContent":["// /assets/scripts/chatbot/utils/event-bus.js\n\nimport EventEmitter from \"eventemitter3\";\n\n/**\n * EventBus Class\n * Extends the EventEmitter from eventemitter3 to create a centralized event hub.\n */\nclass EventBus extends EventEmitter {}\n\n/**\n * Singleton instance of EventBus\n * Ensures that all modules import the same EventBus instance.\n */\nconst eventBus = new EventBus();\n\nexport default eventBus;\n","// /assets/scripts/chatbot/utils/event-constants.js\n\n/**\n * EVENTS Object\n * Defines all the event names used by the Main Chatbot and Section Chatbot.\n * Namespacing ensures that events are uniquely identified and do not conflict.\n */\nexport const EVENTS = {\n  MAIN_CHATBOT: {\n    MESSAGE_RECEIVED: \"mainChatbot:messageReceived\",\n    TYPING: \"mainChatbot:typing\",\n    CHOICE_PRESENTED: \"mainChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"mainChatbot:carouselPresented\",\n    ERROR: \"mainChatbot:error\",\n    // Additional events can be added here as needed\n  },\n  SECTION_CHATBOT: {\n    MESSAGE_RECEIVED: \"sectionChatbot:messageReceived\",\n    DEVICE_ANSWER: \"sectionChatbot:deviceAnswer\",\n    CHOICE_PRESENTED: \"sectionChatbot:choicePresented\",\n    CAROUSEL_PRESENTED: \"sectionChatbot:carouselPresented\",\n    ERROR: \"sectionChatbot:error\",\n    // Additional events can be added here as needed\n  },\n};\n","// /assets/scripts/chatbot/core/chatbot-core.js\n\nimport eventBus from \"../utils/event-bus.js\";\nimport { EVENTS } from \"../utils/event-constants.js\";\n\n/**\n * ChatbotCore Class\n * Handles communication with Voiceflow API via Gadget API, processes incoming data,\n * manages Voiceflow variables, and emits events based on trace types.\n */\nclass ChatbotCore {\n  /**\n   * Constructor initializes ChatbotCore with userID, endpoint, and chatbot type.\n   * @param {Object} options - Configuration options.\n   * @param {string} options.userID - Unique identifier for the user/session.\n   * @param {string} options.endpoint - Gadget API endpoint URL.\n   * @param {string} options.chatbotType - Type of chatbot ('main' or 'section') for event namespacing.\n   */\n  constructor({ userID, endpoint, chatbotType }) {\n    if (!userID) {\n      throw new Error(\"ChatbotCore requires a userID.\");\n    }\n    if (!endpoint) {\n      throw new Error(\"ChatbotCore requires an endpoint URL.\");\n    }\n    if (!chatbotType) {\n      throw new Error(\n        'ChatbotCore requires a chatbotType (\"main\" or \"section\").'\n      );\n    }\n\n    this.userID = userID;\n    this.endpoint = endpoint;\n    this.chatbotType = chatbotType; // 'main' or 'section'\n    this.eventNamespace =\n      chatbotType === \"main\" ? \"MAIN_CHATBOT\" : \"SECTION_CHATBOT\";\n    this.eventPrefix =\n      chatbotType === \"main\" ? \"mainChatbot\" : \"sectionChatbot\";\n\n    this.eventHandlers = {};\n\n    this.initialize();\n  }\n\n  /**\n   * Initializes the ChatbotCore by setting up SSE connection.\n   */\n  initialize() {\n    this.setupSSE();\n  }\n\n  /**\n   * Sets up the Server-Sent Events (SSE) connection to the Gadget API.\n   */\n  setupSSE() {\n    const payload = {\n      userID: this.userID,\n      action: {}, // Initial action is empty; launch or message will populate this\n      config: {}, // Additional configuration if needed\n    };\n\n    // Send initial connection request to Gadget API to establish SSE\n    fetch(this.endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\n            `Gadget API responded with status ${response.status}`\n          );\n        }\n        // Check if browser supports EventSource\n        if (typeof EventSource === \"undefined\") {\n          throw new Error(\"EventSource is not supported in this browser.\");\n        }\n\n        // Create a unique URL with userID to handle multiple chatbots\n        const eventSourceUrl = `${this.endpoint}?userID=${encodeURIComponent(\n          this.userID\n        )}`;\n\n        this.eventSource = new EventSource(eventSourceUrl, {\n          withCredentials: true,\n        });\n\n        this.eventSource.onmessage = this.handleIncomingMessage.bind(this);\n        this.eventSource.onerror = this.handleError.bind(this);\n      })\n      .catch((error) => {\n        console.error(\"Failed to establish SSE connection:\", error);\n        eventBus.emit(`${this.eventPrefix}:error`, { message: error.message });\n      });\n  }\n\n  /**\n   * Handles incoming SSE messages from the Gadget API.\n   * @param {MessageEvent} event - The SSE message event.\n   */\n  handleIncomingMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      if (!data.type || !data.payload) {\n        throw new Error(\"Invalid data format received from Gadget API.\");\n      }\n\n      switch (data.type) {\n        case \"trace\":\n          this.processTrace(data.payload);\n          break;\n        case \"end\":\n          this.closeConnection();\n          break;\n        case \"error\":\n          eventBus.emit(`${this.eventPrefix}:error`, {\n            message: data.payload.message,\n          });\n          this.closeConnection();\n          break;\n        default:\n          console.warn(`Unknown data type received: ${data.type}`);\n      }\n    } catch (error) {\n      console.error(\"Error processing incoming message:\", error);\n      eventBus.emit(`${this.eventPrefix}:error`, { message: error.message });\n    }\n  }\n\n  /**\n   * Processes different types of traces received from Voiceflow.\n   * @param {Object} trace - The trace object containing type and payload.\n   */\n  processTrace(trace) {\n    if (!trace.type) {\n      console.warn(\"Trace without type received:\", trace);\n      return;\n    }\n\n    switch (trace.type) {\n      case \"message\":\n        eventBus.emit(`${this.eventPrefix}:messageReceived`, {\n          content: trace.payload.message,\n        });\n        break;\n      case \"choice\":\n        eventBus.emit(`${this.eventPrefix}:choicePresented`, {\n          choices: trace.payload.choices,\n        });\n        break;\n      case \"carousel\":\n        eventBus.emit(`${this.eventPrefix}:carouselPresented`, {\n          carouselItems: trace.payload.items,\n        });\n        break;\n      case \"device_answer\":\n        eventBus.emit(`${this.eventPrefix}:deviceAnswer`, {\n          devices: trace.payload.devices,\n        });\n        break;\n      case \"typing\":\n        if (trace.payload.isTyping) {\n          eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: true });\n        } else {\n          eventBus.emit(`${this.eventPrefix}:typing`, { isTyping: false });\n        }\n        break;\n      // Add more trace types as needed\n      default:\n        console.warn(`Unhandled trace type: ${trace.type}`);\n    }\n  }\n\n  /**\n   * Handles errors from the SSE connection.\n   * @param {Event} event - The error event.\n   */\n  handleError(event) {\n    console.error(\"SSE connection error:\", event);\n    eventBus.emit(`${this.eventPrefix}:error`, {\n      message: \"Connection error with Voiceflow API.\",\n    });\n    this.closeConnection();\n  }\n\n  /**\n   * Sends a launch request to Voiceflow with optional payload.\n   * @param {Object} [variables={}] - Voiceflow variables to include in the launch payload.\n   */\n  sendLaunch(variables = {}) {\n    const payload = {\n      action: {\n        type: \"launch\",\n        payload: variables,\n      },\n      config: {}, // Additional configuration if needed\n    };\n\n    this.sendAction(payload);\n  }\n\n  /**\n   * Sends a user message to Voiceflow.\n   * @param {string} message - The user's message.\n   */\n  sendMessage(message) {\n    const payload = {\n      action: {\n        type: \"text\",\n        payload: {\n          message: message,\n        },\n      },\n      config: {}, // Additional configuration if needed\n    };\n\n    this.sendAction(payload);\n  }\n\n  /**\n   * Sends an action (launch, message, etc.) to the Gadget API.\n   * @param {Object} actionPayload - The action payload to send.\n   */\n  sendAction(actionPayload) {\n    const payload = {\n      userID: this.userID,\n      action: actionPayload.action,\n      config: actionPayload.config,\n    };\n\n    fetch(this.endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n      credentials: \"include\", // Include cookies if needed\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\n            `Gadget API responded with status ${response.status}`\n          );\n        }\n        // No need to handle response as SSE is used for incoming messages\n      })\n      .catch((error) => {\n        console.error(\"Failed to send action to Gadget API:\", error);\n        eventBus.emit(`${this.eventPrefix}:error`, { message: error.message });\n      });\n  }\n\n  /**\n   * Closes the SSE connection gracefully.\n   */\n  closeConnection() {\n    if (this.eventSource) {\n      this.eventSource.close();\n      console.log(\"SSE connection closed.\");\n    }\n  }\n\n  /**\n   * Cleans up resources when the ChatbotCore instance is no longer needed.\n   */\n  destroy() {\n    this.closeConnection();\n    eventBus.removeAllListeners(`${this.eventPrefix}:messageReceived`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:choicePresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:carouselPresented`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:deviceAnswer`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:error`);\n    eventBus.removeAllListeners(`${this.eventPrefix}:typing`);\n  }\n}\n\nexport default ChatbotCore;\n","/**\n * Generates a unique user ID with the specified prefix.\n * @param {string} prefix - The prefix indicating the chatbot type ('mainChatbot' or 'sectionChatbot').\n * @returns {string} - The generated unique user ID.\n */\nexport function generateUserId(prefix) {\n  const uniquePart =\n    Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n  return `${prefix}-${uniquePart}`;\n}\n"],"names":["EventBus","EventEmitter","eventBus","EVENTS","ChatbotCore","userID","endpoint","chatbotType","payload","response","eventSourceUrl","error","event","data","trace","variables","message","actionPayload","generateUserId","prefix","uniquePart"],"mappings":"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"}