{"version":3,"file":"chatbot-section-y5kQmoS3.js","sources":["../frontend/entrypoints/chatbot-section.js"],"sourcesContent":["import { ChatbotCore } from \"./chatbot-core-file.js\";\n\nclass SectionChatbot extends ChatbotCore {\n  constructor() {\n    super();\n    this.userID = `section_${Math.floor(Math.random() * 1000000000000000)}`;\n  }\n\n  connectedCallback() {\n    console.log(\"SectionChatbot connected to the DOM\");\n    this.init();\n  }\n\n  initialize(config) {\n    console.log(\"Initializing SectionChatbot with config:\", config);\n    this.productTitle = config.productTitle;\n    this.productCapacity = config.productCapacity;\n    this.productDetails = `Power Station: ${this.productTitle}, Wattage: ${this.productCapacity}`;\n\n    // Initialize applicationsGrid\n    this.applicationsGrid = this.querySelector(\".applications-grid\");\n    if (!this.applicationsGrid) {\n      console.error(\"Applications grid not found\");\n      return;\n    }\n\n    this.setupEventListeners();\n    this.loadSavedDevices();\n  }\n\n  setupEventListeners() {\n    if (this.viewMoreButton) {\n      this.viewMoreButton.addEventListener(\"click\", () =>\n        this.toggleDevicesView()\n      );\n    }\n  }\n\n  toggleDevicesView() {\n    this.isExpanded = !this.isExpanded;\n    this.updateDevicesView();\n  }\n\n  updateDevicesView() {\n    const allCards = this.applicationsGrid.querySelectorAll(\n      \".application-card.chatbot-card\"\n    );\n    if (allCards.length > this.devicesPerPage) {\n      this.viewMoreButton.style.display = \"block\";\n      this.viewMoreButton.textContent = this.isExpanded\n        ? \"View Less\"\n        : \"View More\";\n\n      allCards.forEach((card, index) => {\n        card.style.display =\n          index < this.devicesPerPage || this.isExpanded ? \"flex\" : \"none\";\n      });\n    } else {\n      this.viewMoreButton.style.display = \"none\";\n    }\n  }\n\n  async sendMessage(message) {\n    try {\n      const res = await this.gadgetInteract({\n        userAction: {\n          type: \"text\",\n          payload: message,\n        },\n      });\n      this.hideTypingIndicator();\n      this.handleAgentResponse(res);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      this.hideTypingIndicator();\n    }\n  }\n\n  async sendLaunch() {\n    this.showTypingIndicator();\n    const interactPayload = {\n      userAction: {\n        type: \"launch\",\n        payload: {\n          startBlock: \"shopifySection\",\n          powerStationDetails: this.productDetails,\n        },\n      },\n    };\n\n    try {\n      const res = await this.gadgetInteract(interactPayload);\n      console.log(\"Launch response:\", res);\n      this.hideTypingIndicator();\n      this.handleAgentResponse(res);\n    } catch (error) {\n      console.error(\"Error launching conversation:\", error);\n      this.hideTypingIndicator();\n    }\n  }\n\n  handleDeviceAnswer(payload) {\n    console.log(\"Raw device answer payload:\", payload);\n\n    let deviceData;\n\n    if (typeof payload === \"string\") {\n      try {\n        deviceData = JSON.parse(payload);\n      } catch (error) {\n        console.error(\"Failed to parse payload string:\", error);\n        return;\n      }\n    } else if (typeof payload === \"object\" && payload !== null) {\n      deviceData = payload;\n    } else {\n      console.error(\"Invalid payload type:\", typeof payload);\n      return;\n    }\n\n    console.log(\"Processed device data:\", deviceData);\n\n    let devices = Array.isArray(deviceData) ? deviceData : deviceData.devices;\n\n    if (!Array.isArray(devices)) {\n      console.error(\"Invalid devices data:\", devices);\n      return;\n    }\n\n    devices.forEach((device) => {\n      console.log(\"Processing device:\", device);\n      const { name, estimatedRuntime, powerConsumption } = device;\n      this.saveDeviceEstimate({ name, estimatedRuntime, powerConsumption });\n      const card = this.createDeviceCard(device);\n      this.insertCard(card);\n    });\n\n    this.updateDevicesView();\n  }\n\n  createDeviceCard(device) {\n    const card = document.createElement(\"div\");\n    card.className = \"application-card chatbot-card\";\n    card.innerHTML = `\n      <div class=\"application-card__image\">\n        <svg>...</svg>\n      </div>\n      <div class=\"application-card__content\">\n        <div class=\"application-card__title\">${device.name}</div>\n        <div class=\"application-card__runtime\">\n          ${device.estimatedRuntime.value} ${device.estimatedRuntime.unit}\n        </div>\n      </div>\n    `;\n    return card;\n  }\n\n  insertCard(card) {\n    const firstChatbotCard = this.applicationsGrid.querySelector(\n      \".application-card.chatbot-card\"\n    );\n    if (firstChatbotCard) {\n      this.applicationsGrid.insertBefore(card, firstChatbotCard);\n    } else {\n      this.applicationsGrid.appendChild(card);\n    }\n  }\n\n  saveDeviceEstimate(device) {\n    const key = `${this.productTitle}_devices`;\n    let devices = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n    const existingIndex = devices.findIndex((d) => d.name === device.name);\n    if (existingIndex !== -1) {\n      devices.splice(existingIndex, 1);\n    }\n    devices.unshift(device);\n\n    localStorage.setItem(key, JSON.stringify(devices));\n  }\n\n  loadSavedDevices() {\n    const key = `${this.productTitle}_devices`;\n    const devices = JSON.parse(localStorage.getItem(key) || \"[]\");\n\n    devices.forEach((device) => {\n      const card = this.createDeviceCard(device);\n      this.insertCard(card);\n    });\n\n    this.updateDevicesView();\n  }\n\n  async handleAgentResponse(response) {\n    await super.handleAgentResponse(response);\n    for (const trace of response) {\n      if (trace.type === \"device_answer\") {\n        this.handleDeviceAnswer(trace.payload);\n      }\n    }\n  }\n}\n\n// Ensure DOM is fully loaded before initializing the SectionChatbot\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const sectionChatbot = document.querySelector(\"section-chatbot\");\n  if (sectionChatbot) {\n    const productTitle = sectionChatbot.getAttribute(\"product-title\");\n    const productCapacity = sectionChatbot.getAttribute(\"product-capacity\");\n\n    const config = {\n      apiEndpoint: \"https://chatbottings--development.gadget.app/voiceflow\",\n      chatFormId: \"chatForm\",\n      userInputId: \"userInput\",\n      chatMessagesId: \"chatMessages\",\n      messageContainerId: \"messageContainer\",\n      typingIndicatorSelector: \".chat-typing\",\n      productTitle,\n      productCapacity,\n    };\n\n    sectionChatbot.initialize(config);\n  }\n});\n"],"names":["sectionChatbot","productTitle","productCapacity","config"],"mappings":"wCA4MA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMA,EAAiB,SAAS,cAAc,iBAAiB,EAC/D,GAAIA,EAAgB,CAClB,MAAMC,EAAeD,EAAe,aAAa,eAAe,EAC1DE,EAAkBF,EAAe,aAAa,kBAAkB,EAEhEG,EAAS,CACb,YAAa,yDACb,WAAY,WACZ,YAAa,YACb,eAAgB,eAChB,mBAAoB,mBACpB,wBAAyB,eACzB,aAAAF,EACA,gBAAAC,CACN,EAEIF,EAAe,WAAWG,CAAM,CACjC,CACH,CAAC"}