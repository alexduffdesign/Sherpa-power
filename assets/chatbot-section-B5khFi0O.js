import{C as c}from"./chatbot-core-file-DN8_V_qZ.js";class d extends HTMLElement{constructor(){super(),this.chatbotCore=new c,this.userID=`section_${Math.floor(Math.random()*1e15)}`}connectedCallback(){console.log("SectionChatbot connected to the DOM"),this.initialize()}initialize(){const t=this.getAttribute("product-title"),e=this.getAttribute("product-capacity"),i={apiEndpoint:"https://chatbottings--development.gadget.app/voiceflow",chatFormId:"chatForm",userInputId:"userInput",chatMessagesId:"chatMessages",messageContainerId:"messageContainer",typingIndicatorSelector:".chat-typing",productTitle:t,productCapacity:e};if(this.chatbotCore.initialize(i),this.productTitle=t,this.productCapacity=e,this.productDetails=`Power Station: ${this.productTitle}, Wattage: ${this.productCapacity}`,this.applicationsGrid=this.querySelector(".applications-grid"),!this.applicationsGrid){console.error("Applications grid not found");return}this.setupEventListeners(),this.loadSavedDevices()}setupEventListeners(){this.viewMoreButton&&this.viewMoreButton.addEventListener("click",()=>this.toggleDevicesView())}toggleDevicesView(){this.isExpanded=!this.isExpanded,this.updateDevicesView()}updateDevicesView(){const t=this.applicationsGrid.querySelectorAll(".application-card.chatbot-card");t.length>this.devicesPerPage?(this.viewMoreButton.style.display="block",this.viewMoreButton.textContent=this.isExpanded?"View Less":"View More",t.forEach((e,i)=>{e.style.display=i<this.devicesPerPage||this.isExpanded?"flex":"none"})):this.viewMoreButton.style.display="none"}async sendMessage(t){try{const e=await this.chatbotCore.gadgetInteract({userAction:{type:"text",payload:t}});this.chatbotCore.hideTypingIndicator(),this.handleAgentResponse(e)}catch(e){console.error("Error sending message:",e),this.chatbotCore.hideTypingIndicator()}}async sendLaunch(){this.showTypingIndicator();const t={userAction:{type:"launch",payload:{startBlock:"shopifySection",powerStationDetails:this.productDetails}}};try{const e=await this.chatbotCore.gadgetInteract(t);console.log("Launch response:",e),this.hideTypingIndicator(),this.handleAgentResponse(e)}catch(e){console.error("Error launching conversation:",e),this.hideTypingIndicator()}}handleDeviceAnswer(t){console.log("Raw device answer payload:",t);let e;if(typeof t=="string")try{e=JSON.parse(t)}catch(s){console.error("Failed to parse payload string:",s);return}else if(typeof t=="object"&&t!==null)e=t;else{console.error("Invalid payload type:",typeof t);return}console.log("Processed device data:",e);let i=Array.isArray(e)?e:e.devices;if(!Array.isArray(i)){console.error("Invalid devices data:",i);return}i.forEach(s=>{console.log("Processing device:",s);const{name:a,estimatedRuntime:o,powerConsumption:n}=s;this.saveDeviceEstimate({name:a,estimatedRuntime:o,powerConsumption:n});const r=this.createDeviceCard(s);this.insertCard(r)}),this.updateDevicesView()}createDeviceCard(t){const e=document.createElement("div");return e.className="application-card chatbot-card",e.innerHTML=`
      <div class="application-card__image">
        <svg>...</svg>
      </div>
      <div class="application-card__content">
        <div class="application-card__title">${t.name}</div>
        <div class="application-card__runtime">
          ${t.estimatedRuntime.value} ${t.estimatedRuntime.unit}
        </div>
      </div>
    `,e}insertCard(t){const e=this.applicationsGrid.querySelector(".application-card.chatbot-card");e?this.applicationsGrid.insertBefore(t,e):this.applicationsGrid.appendChild(t)}saveDeviceEstimate(t){const e=`${this.productTitle}_devices`;let i=JSON.parse(localStorage.getItem(e)||"[]");const s=i.findIndex(a=>a.name===t.name);s!==-1&&i.splice(s,1),i.unshift(t),localStorage.setItem(e,JSON.stringify(i))}loadSavedDevices(){const t=`${this.productTitle}_devices`;JSON.parse(localStorage.getItem(t)||"[]").forEach(i=>{const s=this.createDeviceCard(i);this.insertCard(s)}),this.updateDevicesView()}async handleAgentResponse(t){await super.handleAgentResponse(t);for(const e of t)e.type==="device_answer"&&this.handleDeviceAnswer(e.payload)}}customElements.define("section-chatbot",d);
//# sourceMappingURL=chatbot-section-B5khFi0O.js.map
