{%- assign drawer_id = 'header-ai-trigger' -%}

<!-- Styling for the main drawer chatbot -->

<style>

  /* Ensure the chatbot container and its children respect the width */
  .chatbot-container,
  .chatbot-content,
  .chat-messages,
  .message-container {
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
  }
  
  /* Prevent content from overflowing */
  .message {
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  .drawer.sherpa-guide {
    min-width: auto !important;
    width: auto !important;
  }

  main-chatbot {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  #{{ drawer_id }} .chatbot-container {
    height: 100%;
    color: rgb(var(--text-color, 255 255 255));
    position: relative;
    overflow: hidden;
    padding: var(--spacing-4);
  }
  
  #{{ drawer_id }} .chatbot-content {
    height: 100%;
    padding-bottom: 2rem;
  }
  
  #{{ drawer_id }} .chat-messages {
    overflow: hidden;
    height: 100%;
  }
  
  #{{ drawer_id }} .chat-form {
    margin-top: 0;
  }  
  
  #{{ drawer_id }}::part(content) {
    background-color: #403545;
    border: 2px solid #DB9BFB;
    border-radius: var(--rounded);
    position: relative;
    z-index: 1;
    overflow: hidden;
  }
  
  #{{ drawer_id }}::part(header) {
    background-color: #403545;
    padding: var(--spacing-4) var(--spacing-6);
    color: white;
    border-bottom: solid 1px #da9bfb;
    display: flex;
    justify-content: flex-start;
    grid-gap: 0.5rem;
  }
  
  #{{ drawer_id }}:not([header-bordered])::part(header):after {
    height: var(--spacing-6);
    background: linear-gradient(to bottom, rgb(64 53 69), rgb(64 53 69 / 52%) 50%, rgb(64 53 69 / 0%));
    z-index: 3;
    pointer-events: none;
    display: none;
  }
  
  #{{ drawer_id }}::part(body) {
    background-color: #403545;
    padding: var(--spacing-0);
  }
  
  .footer-form {
    width: 100%;
    padding: var(--spacing-4);
    position: sticky;
    bottom: 0;
    background: linear-gradient(to bottom, rgb(64 53 69 / 0%), rgb(64 53 70) 22%, rgb(64 53 69));
    z-index: 2;
  }
  
  @media screen and (min-width: 700px) {
    main-chatbot {
      width: 500px;
    }
  }

  @media screen and (max-width: 699px) {
  .main-chatbot-ui {
    width: 95dvw;  }

  .button.sherpa-guide {
      padding: var(--spacing-2);
    }

  .sherpa-icon {
    width: 20px;
    height: 20px;
  }
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .button.main-menu {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
  }

  .button.main-menu svg {
    width: 12px;
    height: 14px;
  }
      
</style>

{% capture form %}

  <form id="chatForm" class="chat-form">
      <input type="text" id="userInput" placeholder="Type your message here..." autocomplete="off" required>
      <button type="submit">
        <svg width="20" height="18" viewBox="0 0 20 18" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M1.4 17.3984L18.85 9.91844C19.0304 9.84159 19.1842 9.71341 19.2923 9.54984C19.4004 9.38626 19.4581 9.19451 19.4581 8.99844C19.4581 8.80236 19.4004 8.61061 19.2923 8.44704C19.1842 8.28346 19.0304 8.15528 18.85 8.07844L1.4 0.598438C1.2489 0.532533 1.08377 0.505281 0.919509 0.519141C0.755246 0.533002 0.597018 0.587538 0.459098 0.67783C0.321179 0.768123 0.207908 0.891331 0.129505 1.03634C0.0511009 1.18135 0.010031 1.34359 0.00999999 1.50844L0 6.11844C0 6.61844 0.37 7.04844 0.87 7.10844L15 8.99844L0.87 10.8784C0.37 10.9484 0 11.3784 0 11.8784L0.00999999 16.4884C0.00999999 17.1984 0.74 17.6884 1.4 17.3984Z" fill="#231F25"/>
        </svg>
      </button>
    </form>

{% endcapture %}
            
<custom-drawer id="{{ drawer_id }}" class="drawer sherpa-guide">
    <div slot="header" class="header-content">
      <div class="header-left">
        <h2 class="h6">SHERPA GUIDE</h2>
        <svg
        class="sherpa-icon"
        width="23"
        height="23"
        viewBox="0 0 23 23"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path d="M3.32783 18.0945V22.2721L5.00839 21.2637L10.2908 18.0945H15.5299C16.7534 18.0945 17.7484 17.0995 17.7484 15.876V7.00176C17.7484 5.77822 16.7534 4.7832 15.5299 4.7832H2.21855C0.995022 4.7832 0 5.77822 0 7.00176V15.876C0 17.0995 0.995022 18.0945 2.21855 18.0945H3.32783ZM2.21855 7.00176H15.5299V15.876H9.67623L5.54639 18.3541V15.876H2.21855V7.00176Z" fill="url(#paint0_linear_3039_66)" />
        <path d="M19.9669 0.345703H6.65557C5.43203 0.345703 4.43701 1.34072 4.43701 2.56426H17.7483C18.9719 2.56426 19.9669 3.55928 19.9669 4.78281V13.657C21.1904 13.657 22.1854 12.662 22.1854 11.4385V2.56426C22.1854 1.34072 21.1904 0.345703 19.9669 0.345703Z" fill="url(#paint1_linear_3039_66)" />
        <defs>
          <linearGradient
            id="paint0_linear_3039_66"
            x1="8.87422"
            y1="4.7832"
            x2="8.87422"
            y2="22.2721"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#FEFBFF" />
            <stop offset="1" stop-color="#DD9FFC" />
          </linearGradient>
          <linearGradient
            id="paint1_linear_3039_66"
            x1="13.3112"
            y1="0.345703"
            x2="13.3112"
            y2="13.657"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#FEFBFF" />
            <stop offset="1" stop-color="#DD9FFC" />
          </linearGradient>
        </defs>
      </svg>
      </div>
      <button class="button main-menu">
        <svg width="12" height="14" viewBox="0 0 12 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M0 13.75V4.75L6 0.25L12 4.75V13.75H7.5V8.5H4.5V13.75H0Z" fill="white"/>
        </svg>
        Back to Menu
      </button>
    </div>
        <div id="main-chatbot-container">
          {% render 'chatbot-template' %}
          <footer class="chatbot-footer">
            {{ form }}
            <div class="footer-controls">
            </div>
          </footer>
        </div>
    </custom-drawer>
    
    <!-- Include required scripts -->
    {% render 'vite-tag' with 'frontend/components/chatbot-component.js' %}
    {% render 'vite-tag' with 'frontend/baseChatbot/base-chatbot.js' %}
    {% render 'vite-tag' with 'frontend/baseChatbot/base-chatbot-ui.js' %}
    {% render 'vite-tag' with 'frontend/mainChatbot/chatbot-main.js' %}
    
    <script type="module">
      import { Drawer } from "{{ 'theme.js' | asset_url }}";
      import { MainChatbot } from "{{ 'frontend/mainChatbot/chatbot-main.js' | asset_url }}";
      
      const DRAWER_LAUNCHED_KEY = 'drawerHasLaunched';
    
      class CustomDrawer extends Drawer {
        constructor() {
          super();
          this.hasLaunched = localStorage.getItem(DRAWER_LAUNCHED_KEY) === 'true';
          this.mainChatbot = null;
        }
    
        connectedCallback() {
          super.connectedCallback();
          this.addEventListener('dialog:after-show', this.handleDrawerOpen.bind(this));
          
          // Initialize main chatbot
          const container = this.querySelector('#main-chatbot-container');
          if (container) {
            this.mainChatbot = new MainChatbot(container);
          }
        }
    
        handleDrawerOpen() {
          if (!this.hasLaunched && this.mainChatbot) {
            this.mainChatbot.launch();
            localStorage.setItem(DRAWER_LAUNCHED_KEY, 'true');
            this.hasLaunched = true;
          }
        }
      }
    
      // Register custom drawer
      customElements.define('custom-drawer', CustomDrawer);
    </script>

{% schema %}
{
  "name": "Chatbot Drawer",
  "tag": "section",
  "class": "chatbot-drawer-section",
  "settings": []
}
{% endschema %}